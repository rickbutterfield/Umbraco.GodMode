{"version":3,"file":"godmode-interface-browser.element-CifEo0rm.js","sources":["../../../assets/src/workspace/godmode/views/godmode-interface-browser.element.ts"],"sourcesContent":["import { customElement, html, css, state, repeat } from \"@umbraco-cms/backoffice/external/lit\";\nimport { UmbLitElement } from \"@umbraco-cms/backoffice/lit-element\";\nimport { DirectionModel, DirectionModelEnum, GodModeService, NameValue, TypeMap } from \"../../../api\";\nimport { tryExecuteAndNotify } from \"@umbraco-cms/backoffice/resources\";\nimport { UUISelectEvent } from \"@umbraco-cms/backoffice/external/uui\";\nimport { sortTypeMapData } from \"../../../helpers/sort\";\n\n@customElement('godmode-interface-browser')\nexport class GodModeInterfaceBrowserElement extends UmbLitElement {\n  @state()\n  assemblies: Array<NameValue> = [];\n\n  @state()\n  assemblyOptions: Array<Option> = [];\n\n  @state()\n  currentAssembly: NameValue | undefined = undefined;\n\n  @state()\n  currentAssemblyOption: string = '';\n\n  @state()\n  interfaces: Array<TypeMap> = [];\n\n  @state()\n  interfaceOptions: Array<Option> = [];\n\n  @state()\n  currentInterface: TypeMap | undefined = undefined;\n\n  @state()\n  currentInterfaceOption: string = '';\n\n  @state()\n  types: Array<TypeMap> = [];\n\n  @state()\n  sortingDesc: boolean = false;\n\n  @state()\n  orderDirection: DirectionModel = DirectionModelEnum.ASCENDING;\n\n  @state()\n  orderBy: string = 'name';\n\n  constructor() {\n    super();\n    this.#loadAssemblies();\n  }\n\n  private _sortingHandler(column: keyof TypeMap) {\n    this.sortingDesc = this.orderBy === column ? !this.sortingDesc : false;\n    this.orderBy = column;\n\n    this.orderDirection = this.sortingDesc ? DirectionModelEnum.DESCENDING : DirectionModelEnum.ASCENDING;\n\n    if (this.types) {\n      this.types = sortTypeMapData<TypeMap>(this.types, column, this.orderDirection);\n    }\n  }\n\n  async #loadAssemblies() {\n    const { data } = await tryExecuteAndNotify(this, GodModeService.getUmbracoManagementApiV1GodModeGetAssemblies());\n\n    if (data) {\n      this.assemblies = data;\n\n      this.assemblyOptions = this.assemblies.map((assembly) => ({ name: assembly.name, value: assembly.name }));\n      this.assemblyOptions.unshift({ name: 'Please select', value: '' })\n    }\n  }\n\n  async #getInterfaces(event: UUISelectEvent) {\n    this.currentAssemblyOption = event.target.value as string;\n    \n    if (this.currentAssemblyOption !== '') {\n      this.currentAssembly = this.assemblies.find(x => x.name === this.currentAssemblyOption);\n\n      const { data } = await tryExecuteAndNotify(this, GodModeService.getUmbracoManagementApiV1GodModeGetInterfacesFrom({ assembly: this.currentAssemblyOption }));\n\n      if (data) {\n        this.interfaces = data;\n\n        this.interfaceOptions = this.interfaces.map((int) => ({ name: int.name, value: int.name }));\n        this.interfaceOptions.unshift({ name: 'Please select', value: '' });\n      }\n    }\n    else {\n      this.currentAssembly = undefined;\n      this.currentInterface = undefined;\n      this.currentInterfaceOption = '';\n      this.interfaces = [];\n      this.interfaceOptions = [];\n    }\n  }\n\n  async #getTypes(event: UUISelectEvent) {\n    this.currentInterfaceOption = event.target.value as string;\n\n    if (this.currentInterfaceOption !== '') {\n      this.currentInterface = this.interfaces.find(x => x.name === this.currentInterfaceOption);\n\n      if (this.currentInterface) {\n        const { data } = await tryExecuteAndNotify(this, GodModeService.getUmbracoManagementApiV1GodModeGetTypesAssignableFrom({ baseType: this.currentInterface.loadableName }));\n\n        if (data) {\n          this.types = data;\n        }\n      }\n    }\n    else {\n      this.currentInterface = undefined;\n      this.types = [];\n    }\n  }\n\n  render() {\n    return html`\n      <umb-body-layout>\n        <godmode-header name=\"Interface Browser\" slot=\"header\"></godmode-header>\n\n        <uui-box>\n          <div class=\"grid\">\n              <div>\n                  <uui-label for=\"search-assembly\">Assembly:</uui-label>\n                  <uui-select\n                      id=\"search-assembly\"\n                      .options=${this.assemblyOptions}\n                      @change=${this.#getInterfaces}\n                      .value=${this.currentAssemblyOption}>\n                  </uui-select>\n              </div>\n              ${this.currentAssemblyOption !== '' ?\n                html`\n                  <div>\n                      <uui-label for=\"search-interface\">Interface:</uui-label>\n                      <uui-select\n                          id=\"search-interface\"\n                          .options=${this.interfaceOptions}\n                          @change=${this.#getTypes}\n                          .value=${this.currentInterfaceOption}>\n                      </uui-select>\n                  </div>\n              ` : html``\n              }\n          </div>\n        </uui-box>\n\n        ${this.currentAssemblyOption === '' ? \n          html`\n            <uui-box>Please select an Assembly (above) and then the Interface you wish to browse. You will then see all types that implement the Interface.</uui-box>\n          `\n          :\n          html`\n            <h5>${this.currentAssembly?.value}</h5>\n\n            ${this.types.length !== 0 ?\n              html`\n                <uui-box style=\"--uui-box-default-padding: 0;\">\n                  <uui-table>\n                      <uui-table-head>\n                          <uui-table-head-cell style=\"--uui-table-cell-padding: 0\">\n                            <button\n                            label=\"Implemented By\"\n                            style=\"font-weight: 700; padding: var(--uui-size-4) var(--uui-size-5);\"\n                            @click=${() => this._sortingHandler('name')}>\n                                Implemented By\n                                <uui-symbol-sort\n                                  ?active=${this.orderBy === 'name'}\n                                  ?descending=${this.sortingDesc}>\n                                </uui-symbol-sort>\n                              </button>\n                            </uui-table-head-cell>\n                          <uui-table-head-cell style=\"--uui-table-cell-padding: 0\">\n                            <button\n                                label=\"Namespace\"\n                                style=\"font-weight: 700; padding: var(--uui-size-4) var(--uui-size-5);\"\n                                @click=${() => this._sortingHandler('namespace')}>\n                                Namespace\n                                <uui-symbol-sort\n                                  ?active=${this.orderBy === 'namespace'}\n                                  ?descending=${this.sortingDesc}>\n                                </uui-symbol-sort>\n                              </button>\n                          </uui-table-head-cell>\n                          <uui-table-head-cell style=\"--uui-table-cell-padding: 0\">\n                            <button\n                                label=\"Module\"\n                                style=\"font-weight: 700; padding: var(--uui-size-4) var(--uui-size-5);\"\n                                @click=${() => this._sortingHandler('module')}>\n                                Module\n                                <uui-symbol-sort\n                                  ?active=${this.orderBy === 'module'}\n                                  ?descending=${this.sortingDesc}>\n                                </uui-symbol-sort>\n                              </button>\n                          </uui-table-head-cell>\n                          <uui-table-head-cell style=\"--uui-table-cell-padding: 0\">\n                            <button\n                                label=\"Base Type\"\n                                style=\"font-weight: 700; padding: var(--uui-size-4) var(--uui-size-5);\"\n                                @click=${() => this._sortingHandler('baseType')}>\n                                Base Type\n                                <uui-symbol-sort\n                                  ?active=${this.orderBy === 'baseType'}\n                                  ?descending=${this.sortingDesc}>\n                                </uui-symbol-sort>\n                              </button>\n                          </uui-table-head-cell>\n                      </uui-table-head>\n\n                      ${repeat(\n                        this.types,\n                        (type) => type.name,\n                        (type) => html`\n                              <uui-table-row>\n                                  <uui-table-cell>${type.name}</uui-table-cell>\n                                  <uui-table-cell>${type.namespace}</uui-table-cell>\n                                  <uui-table-cell><code>${type.module}</code></uui-table-cell>\n                                  <uui-table-cell>${type.baseType}</uui-table-cell>\n                              </uui-table-row>\n                          `\n                      )}\n                  </uui-table>\n                </uui-box>\n              `\n              :\n              html``\n            }\n          `\n        }\n      </umb-body-layout>\n    `\n  }\n\n  static styles = [\n    css`\n        .grid {\n            display: grid;\n            grid-template-columns: repeat(3, 1fr);\n            gap: 20px;\n\n            div {\n                display: flex;\n                flex-direction: column;\n                align-items: flex-start;\n            }\n        }\n\n        uui-box {\n            margin-bottom: 20px;\n        }\n\n        uui-table-head-cell button {\n            padding: var(--uui-size-4) var(--uui-size-5);\n            background-color: transparent;\n            color: inherit;\n            border: none;\n            cursor: pointer;\n            font-family: var(--uui-font-family);\n            font-weight: inherit;\n            font-size: inherit;\n            display: inline-flex;\n            align-items: center;\n            justify-content: space-between;\n            width: 100%;\n        }\n    `\n  ]\n}\n\nexport default GodModeInterfaceBrowserElement;\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'godmode-interface-browser': GodModeInterfaceBrowserElement;\n  }\n}\n"],"names":["_loadAssemblies","loadAssemblies_fn","_getInterfaces","getInterfaces_fn","_getTypes","getTypes_fn","GodModeInterfaceBrowserElement","UmbLitElement","__privateAdd","DirectionModelEnum","__privateMethod","column","sortTypeMapData","html","_a","repeat","type","data","tryExecuteAndNotify","GodModeService","assembly","event","x","int","css","__decorateClass","state","customElement","GodModeInterfaceBrowserElement$1"],"mappings":"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"}