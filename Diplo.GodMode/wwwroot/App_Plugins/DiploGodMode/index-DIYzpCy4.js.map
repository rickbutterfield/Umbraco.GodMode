{"version":3,"file":"index-DIYzpCy4.js","sources":["../../../assets/src/api/core/OpenAPI.ts","../../../assets/src/constants.ts","../../../assets/src/elements/godmode-header.element.ts","../../../assets/src/api/enums.gen.ts","../../../assets/src/api/core/ApiError.ts","../../../assets/src/api/core/CancelablePromise.ts","../../../assets/src/api/core/request.ts","../../../assets/src/api/services.gen.ts","../../../assets/src/helpers/sort.ts","../../../assets/src/elements/godmode-reflection-browser.element.ts","../../../assets/src/workspace/godmode-root/manifests.ts","../../../assets/src/workspace/godmode/manifests.ts","../../../assets/src/workspace/godmode-folder/manifests.ts","../../../assets/src/workspace/manifests.ts","../../../assets/src/menu/manifests.ts","../../../assets/src/tree/manifests.ts","../../../assets/src/index.ts"],"sourcesContent":["import type { ApiRequestOptions } from './ApiRequestOptions';\n\ntype Headers = Record<string, string>;\ntype Middleware<T> = (value: T) => T | Promise<T>;\ntype Resolver<T> = (options: ApiRequestOptions) => Promise<T>;\n\nexport class Interceptors<T> {\n  _fns: Middleware<T>[];\n\n  constructor() {\n    this._fns = [];\n  }\n\n  eject(fn: Middleware<T>) {\n    const index = this._fns.indexOf(fn);\n    if (index !== -1) {\n      this._fns = [\n        ...this._fns.slice(0, index),\n        ...this._fns.slice(index + 1),\n      ];\n    }\n  }\n\n  use(fn: Middleware<T>) {\n    this._fns = [...this._fns, fn];\n  }\n}\n\nexport type OpenAPIConfig = {\n\tBASE: string;\n\tCREDENTIALS: 'include' | 'omit' | 'same-origin';\n\tENCODE_PATH?: ((path: string) => string) | undefined;\n\tHEADERS?: Headers | Resolver<Headers> | undefined;\n\tPASSWORD?: string | Resolver<string> | undefined;\n\tTOKEN?: string | Resolver<string> | undefined;\n\tUSERNAME?: string | Resolver<string> | undefined;\n\tVERSION: string;\n\tWITH_CREDENTIALS: boolean;\n\tinterceptors: {request: Interceptors<RequestInit>;\n\t\tresponse: Interceptors<Response>;};\n};\n\nexport const OpenAPI: OpenAPIConfig = {\n\tBASE: '',\n\tCREDENTIALS: 'include',\n\tENCODE_PATH: undefined,\n\tHEADERS: undefined,\n\tPASSWORD: undefined,\n\tTOKEN: undefined,\n\tUSERNAME: undefined,\n\tVERSION: 'Latest',\n\tWITH_CREDENTIALS: false,\n\tinterceptors: {request: new Interceptors(),response: new Interceptors(),\n\t},\n};","export const GOD_MODE_TREE_REPOSITORY_ALIAS = 'Umb.Repository.GodMode.Tree';\nexport const GOD_MODE_TREE_STORE_ALIAS = 'Umb.Store.GodMode.Tree';\nexport const GOD_MODE_TREE_ALIAS = 'Umb.Tree.GodMode';\n","import { UmbElementMixin } from \"@umbraco-cms/backoffice/element-api\";\nimport { LitElement, css, customElement, html, ifDefined, property } from \"@umbraco-cms/backoffice/external/lit\";\n\n@customElement('godmode-header')\nexport class GodModeHeaderElement extends UmbElementMixin(LitElement) {\n    @property({ type: String, attribute: true })\n    name?: string;\n\n    constructor() {\n        super();\n    }\n\n    render() {\n        return html`\n            <div class=\"header\">\n                <uui-icon name=\"icon-sience\"></uui-icon>\n                <h3>God Mode ${ifDefined(this.name)}</h3>\n            </div>\n        `;\n    }\n\n    static styles = [\n        css`\n            .header {\n                display: flex;\n                flex-direction: row;\n                align-items: center;\n\n                uui-icon {\n                    width: 24px;\n                    height: 24px;\n                    margin-right: var(--uui-size-space-2);\n                }\n            }\n        `\n    ]\n}\n\nexport default GodModeHeaderElement;","// This file is auto-generated by @hey-api/openapi-ts\n\nexport enum AuditTypeModelEnum {\n    NEW = 'New',\n    SAVE = 'Save',\n    SAVE_VARIANT = 'SaveVariant',\n    OPEN = 'Open',\n    DELETE = 'Delete',\n    PUBLISH = 'Publish',\n    PUBLISH_VARIANT = 'PublishVariant',\n    SEND_TO_PUBLISH = 'SendToPublish',\n    SEND_TO_PUBLISH_VARIANT = 'SendToPublishVariant',\n    UNPUBLISH = 'Unpublish',\n    UNPUBLISH_VARIANT = 'UnpublishVariant',\n    MOVE = 'Move',\n    COPY = 'Copy',\n    ASSIGN_DOMAIN = 'AssignDomain',\n    PUBLIC_ACCESS = 'PublicAccess',\n    SORT = 'Sort',\n    NOTIFY = 'Notify',\n    SYSTEM = 'System',\n    ROLL_BACK = 'RollBack',\n    PACKAGER_INSTALL = 'PackagerInstall',\n    PACKAGER_UNINSTALL = 'PackagerUninstall',\n    CUSTOM = 'Custom',\n    CONTENT_VERSION_PREVENT_CLEANUP = 'ContentVersionPreventCleanup',\n    CONTENT_VERSION_ENABLE_CLEANUP = 'ContentVersionEnableCleanup'\n}\n\nexport enum CompositionTypeModelEnum {\n    COMPOSITION = 'Composition',\n    INHERITANCE = 'Inheritance'\n}\n\nexport enum ContentVariationModelEnum {\n    NOTHING = 'Nothing',\n    CULTURE = 'Culture',\n    SEGMENT = 'Segment',\n    CULTURE_AND_SEGMENT = 'CultureAndSegment'\n}\n\nexport enum DataTypeChangeModeModelEnum {\n    TRUE = 'True',\n    FALSE = 'False',\n    FALSE_WITH_HELP_TEXT = 'FalseWithHelpText'\n}\n\nexport enum DirectionModelEnum {\n    ASCENDING = 'Ascending',\n    DESCENDING = 'Descending'\n}\n\nexport enum DocumentVariantStateModelEnum {\n    NOT_CREATED = 'NotCreated',\n    DRAFT = 'Draft',\n    PUBLISHED = 'Published',\n    PUBLISHED_PENDING_CHANGES = 'PublishedPendingChanges'\n}\n\nexport enum EventMessageTypeModelEnum {\n    DEFAULT = 'Default',\n    INFO = 'Info',\n    ERROR = 'Error',\n    SUCCESS = 'Success',\n    WARNING = 'Warning'\n}\n\nexport enum HealthStatusModelEnum {\n    HEALTHY = 'Healthy',\n    UNHEALTHY = 'Unhealthy',\n    REBUILDING = 'Rebuilding'\n}\n\nexport enum ImageCropModeModelEnum {\n    CROP = 'Crop',\n    MAX = 'Max',\n    STRETCH = 'Stretch',\n    PAD = 'Pad',\n    BOX_PAD = 'BoxPad',\n    MIN = 'Min'\n}\n\nexport enum LogLevelModelEnum {\n    VERBOSE = 'Verbose',\n    DEBUG = 'Debug',\n    INFORMATION = 'Information',\n    WARNING = 'Warning',\n    ERROR = 'Error',\n    FATAL = 'Fatal'\n}\n\nexport enum ModelsModeModelEnum {\n    NOTHING = 'Nothing',\n    IN_MEMORY_AUTO = 'InMemoryAuto',\n    SOURCE_CODE_MANUAL = 'SourceCodeManual',\n    SOURCE_CODE_AUTO = 'SourceCodeAuto'\n}\n\nexport enum OperatorModelEnum {\n    EQUALS = 'Equals',\n    NOT_EQUALS = 'NotEquals',\n    CONTAINS = 'Contains',\n    NOT_CONTAINS = 'NotContains',\n    LESS_THAN = 'LessThan',\n    LESS_THAN_EQUAL_TO = 'LessThanEqualTo',\n    GREATER_THAN = 'GreaterThan',\n    GREATER_THAN_EQUAL_TO = 'GreaterThanEqualTo'\n}\n\nexport enum OutOfDateTypeModelEnum {\n    OUT_OF_DATE = 'OutOfDate',\n    CURRENT = 'Current',\n    UNKNOWN = 'Unknown'\n}\n\nexport enum OverlaySizeEnum {\n    SMALL = 'Small',\n    MEDIUM = 'Medium',\n    LARGE = 'Large'\n}\n\nexport enum RedirectStatusModelEnum {\n    ENABLED = 'Enabled',\n    DISABLED = 'Disabled'\n}\n\nexport enum RuntimeLevelModelEnum {\n    UNKNOWN = 'Unknown',\n    BOOT = 'Boot',\n    INSTALL = 'Install',\n    UPGRADE = 'Upgrade',\n    RUN = 'Run',\n    BOOT_FAILED = 'BootFailed'\n}\n\nexport enum RuntimeModeModelEnum {\n    BACKOFFICE_DEVELOPMENT = 'BackofficeDevelopment',\n    DEVELOPMENT = 'Development',\n    PRODUCTION = 'Production'\n}\n\nexport enum ServerResponseTypeEnum {\n    SUCCESS = 'Success',\n    ERROR = 'Error',\n    WARNING = 'Warning'\n}\n\nexport enum StatusResultTypeModelEnum {\n    SUCCESS = 'Success',\n    WARNING = 'Warning',\n    ERROR = 'Error',\n    INFO = 'Info'\n}\n\nexport enum TelemetryLevelModelEnum {\n    MINIMAL = 'Minimal',\n    BASIC = 'Basic',\n    DETAILED = 'Detailed'\n}\n\nexport enum TemplateQueryPropertyTypeModelEnum {\n    STRING = 'String',\n    DATE_TIME = 'DateTime',\n    INTEGER = 'Integer'\n}\n\nexport enum UserDataOperationStatusModelEnum {\n    SUCCESS = 'Success',\n    NOT_FOUND = 'NotFound',\n    USER_NOT_FOUND = 'UserNotFound',\n    ALREADY_EXISTS = 'AlreadyExists'\n}\n\nexport enum UserOrderModelEnum {\n    USER_NAME = 'UserName',\n    LANGUAGE = 'Language',\n    NAME = 'Name',\n    EMAIL = 'Email',\n    ID = 'Id',\n    CREATE_DATE = 'CreateDate',\n    UPDATE_DATE = 'UpdateDate',\n    IS_APPROVED = 'IsApproved',\n    IS_LOCKED_OUT = 'IsLockedOut',\n    LAST_LOGIN_DATE = 'LastLoginDate'\n}\n\nexport enum UserStateModelEnum {\n    ACTIVE = 'Active',\n    DISABLED = 'Disabled',\n    LOCKED_OUT = 'LockedOut',\n    INVITED = 'Invited',\n    INACTIVE = 'Inactive',\n    ALL = 'All'\n}","import type { ApiRequestOptions } from './ApiRequestOptions';\nimport type { ApiResult } from './ApiResult';\n\nexport class ApiError extends Error {\n\tpublic readonly url: string;\n\tpublic readonly status: number;\n\tpublic readonly statusText: string;\n\tpublic readonly body: unknown;\n\tpublic readonly request: ApiRequestOptions;\n\n\tconstructor(request: ApiRequestOptions, response: ApiResult, message: string) {\n\t\tsuper(message);\n\n\t\tthis.name = 'ApiError';\n\t\tthis.url = response.url;\n\t\tthis.status = response.status;\n\t\tthis.statusText = response.statusText;\n\t\tthis.body = response.body;\n\t\tthis.request = request;\n\t}\n}","export class CancelError extends Error {\n\tconstructor(message: string) {\n\t\tsuper(message);\n\t\tthis.name = 'CancelError';\n\t}\n\n\tpublic get isCancelled(): boolean {\n\t\treturn true;\n\t}\n}\n\nexport interface OnCancel {\n\treadonly isResolved: boolean;\n\treadonly isRejected: boolean;\n\treadonly isCancelled: boolean;\n\n\t(cancelHandler: () => void): void;\n}\n\nexport class CancelablePromise<T> implements Promise<T> {\n\tprivate _isResolved: boolean;\n\tprivate _isRejected: boolean;\n\tprivate _isCancelled: boolean;\n\treadonly cancelHandlers: (() => void)[];\n\treadonly promise: Promise<T>;\n\tprivate _resolve?: (value: T | PromiseLike<T>) => void;\n\tprivate _reject?: (reason?: unknown) => void;\n\n\tconstructor(\n\t\texecutor: (\n\t\t\tresolve: (value: T | PromiseLike<T>) => void,\n\t\t\treject: (reason?: unknown) => void,\n\t\t\tonCancel: OnCancel\n\t\t) => void\n\t) {\n\t\tthis._isResolved = false;\n\t\tthis._isRejected = false;\n\t\tthis._isCancelled = false;\n\t\tthis.cancelHandlers = [];\n\t\tthis.promise = new Promise<T>((resolve, reject) => {\n\t\t\tthis._resolve = resolve;\n\t\t\tthis._reject = reject;\n\n\t\t\tconst onResolve = (value: T | PromiseLike<T>): void => {\n\t\t\t\tif (this._isResolved || this._isRejected || this._isCancelled) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tthis._isResolved = true;\n\t\t\t\tif (this._resolve) this._resolve(value);\n\t\t\t};\n\n\t\t\tconst onReject = (reason?: unknown): void => {\n\t\t\t\tif (this._isResolved || this._isRejected || this._isCancelled) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tthis._isRejected = true;\n\t\t\t\tif (this._reject) this._reject(reason);\n\t\t\t};\n\n\t\t\tconst onCancel = (cancelHandler: () => void): void => {\n\t\t\t\tif (this._isResolved || this._isRejected || this._isCancelled) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tthis.cancelHandlers.push(cancelHandler);\n\t\t\t};\n\n\t\t\tObject.defineProperty(onCancel, 'isResolved', {\n\t\t\t\tget: (): boolean => this._isResolved,\n\t\t\t});\n\n\t\t\tObject.defineProperty(onCancel, 'isRejected', {\n\t\t\t\tget: (): boolean => this._isRejected,\n\t\t\t});\n\n\t\t\tObject.defineProperty(onCancel, 'isCancelled', {\n\t\t\t\tget: (): boolean => this._isCancelled,\n\t\t\t});\n\n\t\t\treturn executor(onResolve, onReject, onCancel as OnCancel);\n\t\t});\n\t}\n\n\tget [Symbol.toStringTag]() {\n\t\treturn \"Cancellable Promise\";\n\t}\n\n\tpublic then<TResult1 = T, TResult2 = never>(\n\t\tonFulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | null,\n\t\tonRejected?: ((reason: unknown) => TResult2 | PromiseLike<TResult2>) | null\n\t): Promise<TResult1 | TResult2> {\n\t\treturn this.promise.then(onFulfilled, onRejected);\n\t}\n\n\tpublic catch<TResult = never>(\n\t\tonRejected?: ((reason: unknown) => TResult | PromiseLike<TResult>) | null\n\t): Promise<T | TResult> {\n\t\treturn this.promise.catch(onRejected);\n\t}\n\n\tpublic finally(onFinally?: (() => void) | null): Promise<T> {\n\t\treturn this.promise.finally(onFinally);\n\t}\n\n\tpublic cancel(): void {\n\t\tif (this._isResolved || this._isRejected || this._isCancelled) {\n\t\t\treturn;\n\t\t}\n\t\tthis._isCancelled = true;\n\t\tif (this.cancelHandlers.length) {\n\t\t\ttry {\n\t\t\t\tfor (const cancelHandler of this.cancelHandlers) {\n\t\t\t\t\tcancelHandler();\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\tconsole.warn('Cancellation threw an error', error);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tthis.cancelHandlers.length = 0;\n\t\tif (this._reject) this._reject(new CancelError('Request aborted'));\n\t}\n\n\tpublic get isCancelled(): boolean {\n\t\treturn this._isCancelled;\n\t}\n}","import { ApiError } from './ApiError';\nimport type { ApiRequestOptions } from './ApiRequestOptions';\nimport type { ApiResult } from './ApiResult';\nimport { CancelablePromise } from './CancelablePromise';\nimport type { OnCancel } from './CancelablePromise';\nimport type { OpenAPIConfig } from './OpenAPI';\n\nexport const isString = (value: unknown): value is string => {\n\treturn typeof value === 'string';\n};\n\nexport const isStringWithValue = (value: unknown): value is string => {\n\treturn isString(value) && value !== '';\n};\n\nexport const isBlob = (value: any): value is Blob => {\n\treturn value instanceof Blob;\n};\n\nexport const isFormData = (value: unknown): value is FormData => {\n\treturn value instanceof FormData;\n};\n\nexport const base64 = (str: string): string => {\n\ttry {\n\t\treturn btoa(str);\n\t} catch (err) {\n\t\t// @ts-ignore\n\t\treturn Buffer.from(str).toString('base64');\n\t}\n};\n\nexport const getQueryString = (params: Record<string, unknown>): string => {\n\tconst qs: string[] = [];\n\n\tconst append = (key: string, value: unknown) => {\n\t\tqs.push(`${encodeURIComponent(key)}=${encodeURIComponent(String(value))}`);\n\t};\n\n\tconst encodePair = (key: string, value: unknown) => {\n\t\tif (value === undefined || value === null) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (Array.isArray(value)) {\n\t\t\tvalue.forEach(v => encodePair(key, v));\n\t\t} else if (typeof value === 'object') {\n\t\t\tObject.entries(value).forEach(([k, v]) => encodePair(`${key}[${k}]`, v));\n\t\t} else {\n\t\t\tappend(key, value);\n\t\t}\n\t};\n\n\tObject.entries(params).forEach(([key, value]) => encodePair(key, value));\n\n\treturn qs.length ? `?${qs.join('&')}` : '';\n};\n\nconst getUrl = (config: OpenAPIConfig, options: ApiRequestOptions): string => {\n\tconst encoder = config.ENCODE_PATH || encodeURI;\n\n\tconst path = options.url\n\t\t.replace('{api-version}', config.VERSION)\n\t\t.replace(/{(.*?)}/g, (substring: string, group: string) => {\n\t\t\tif (options.path?.hasOwnProperty(group)) {\n\t\t\t\treturn encoder(String(options.path[group]));\n\t\t\t}\n\t\t\treturn substring;\n\t\t});\n\n\tconst url = config.BASE + path;\n\treturn options.query ? url + getQueryString(options.query) : url;\n};\n\nexport const getFormData = (options: ApiRequestOptions): FormData | undefined => {\n\tif (options.formData) {\n\t\tconst formData = new FormData();\n\n\t\tconst process = (key: string, value: unknown) => {\n\t\t\tif (isString(value) || isBlob(value)) {\n\t\t\t\tformData.append(key, value);\n\t\t\t} else {\n\t\t\t\tformData.append(key, JSON.stringify(value));\n\t\t\t}\n\t\t};\n\n\t\tObject.entries(options.formData)\n\t\t\t.filter(([, value]) => value !== undefined && value !== null)\n\t\t\t.forEach(([key, value]) => {\n\t\t\t\tif (Array.isArray(value)) {\n\t\t\t\t\tvalue.forEach(v => process(key, v));\n\t\t\t\t} else {\n\t\t\t\t\tprocess(key, value);\n\t\t\t\t}\n\t\t\t});\n\n\t\treturn formData;\n\t}\n\treturn undefined;\n};\n\ntype Resolver<T> = (options: ApiRequestOptions) => Promise<T>;\n\nexport const resolve = async <T>(options: ApiRequestOptions, resolver?: T | Resolver<T>): Promise<T | undefined> => {\n\tif (typeof resolver === 'function') {\n\t\treturn (resolver as Resolver<T>)(options);\n\t}\n\treturn resolver;\n};\n\nexport const getHeaders = async (config: OpenAPIConfig, options: ApiRequestOptions): Promise<Headers> => {\n\tconst [token, username, password, additionalHeaders] = await Promise.all([\n\t\tresolve(options, config.TOKEN),\n\t\tresolve(options, config.USERNAME),\n\t\tresolve(options, config.PASSWORD),\n\t\tresolve(options, config.HEADERS),\n\t]);\n\n\tconst headers = Object.entries({\n\t\tAccept: 'application/json',\n\t\t...additionalHeaders,\n\t\t...options.headers,\n\t})\n\t\t.filter(([, value]) => value !== undefined && value !== null)\n\t\t.reduce((headers, [key, value]) => ({\n\t\t\t...headers,\n\t\t\t[key]: String(value),\n\t\t}), {} as Record<string, string>);\n\n\tif (isStringWithValue(token)) {\n\t\theaders['Authorization'] = `Bearer ${token}`;\n\t}\n\n\tif (isStringWithValue(username) && isStringWithValue(password)) {\n\t\tconst credentials = base64(`${username}:${password}`);\n\t\theaders['Authorization'] = `Basic ${credentials}`;\n\t}\n\n\tif (options.body !== undefined) {\n\t\tif (options.mediaType) {\n\t\t\theaders['Content-Type'] = options.mediaType;\n\t\t} else if (isBlob(options.body)) {\n\t\t\theaders['Content-Type'] = options.body.type || 'application/octet-stream';\n\t\t} else if (isString(options.body)) {\n\t\t\theaders['Content-Type'] = 'text/plain';\n\t\t} else if (!isFormData(options.body)) {\n\t\t\theaders['Content-Type'] = 'application/json';\n\t\t}\n\t}\n\n\treturn new Headers(headers);\n};\n\nexport const getRequestBody = (options: ApiRequestOptions): unknown => {\n\tif (options.body !== undefined) {\n\t\tif (options.mediaType?.includes('application/json') || options.mediaType?.includes('+json')) {\n\t\t\treturn JSON.stringify(options.body);\n\t\t} else if (isString(options.body) || isBlob(options.body) || isFormData(options.body)) {\n\t\t\treturn options.body;\n\t\t} else {\n\t\t\treturn JSON.stringify(options.body);\n\t\t}\n\t}\n\treturn undefined;\n};\n\nexport const sendRequest = async (\n\tconfig: OpenAPIConfig,\n\toptions: ApiRequestOptions,\n\turl: string,\n\tbody: any,\n\tformData: FormData | undefined,\n\theaders: Headers,\n\tonCancel: OnCancel\n): Promise<Response> => {\n\tconst controller = new AbortController();\n\n\tlet request: RequestInit = {\n\t\theaders,\n\t\tbody: body ?? formData,\n\t\tmethod: options.method,\n\t\tsignal: controller.signal,\n\t};\n\n\tif (config.WITH_CREDENTIALS) {\n\t\trequest.credentials = config.CREDENTIALS;\n\t}\n\n\tfor (const fn of config.interceptors.request._fns) {\n\t\trequest = await fn(request);\n\t}\n\n\tonCancel(() => controller.abort());\n\n\treturn await fetch(url, request);\n};\n\nexport const getResponseHeader = (response: Response, responseHeader?: string): string | undefined => {\n\tif (responseHeader) {\n\t\tconst content = response.headers.get(responseHeader);\n\t\tif (isString(content)) {\n\t\t\treturn content;\n\t\t}\n\t}\n\treturn undefined;\n};\n\nexport const getResponseBody = async (response: Response): Promise<unknown> => {\n\tif (response.status !== 204) {\n\t\ttry {\n\t\t\tconst contentType = response.headers.get('Content-Type');\n\t\t\tif (contentType) {\n\t\t\t\tconst binaryTypes = ['application/octet-stream', 'application/pdf', 'application/zip', 'audio/', 'image/', 'video/'];\n\t\t\t\tif (contentType.includes('application/json') || contentType.includes('+json')) {\n\t\t\t\t\treturn await response.json();\n\t\t\t\t} else if (binaryTypes.some(type => contentType.includes(type))) {\n\t\t\t\t\treturn await response.blob();\n\t\t\t\t} else if (contentType.includes('multipart/form-data')) {\n\t\t\t\t\treturn await response.formData();\n\t\t\t\t} else if (contentType.includes('text/')) {\n\t\t\t\t\treturn await response.text();\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tconsole.error(error);\n\t\t}\n\t}\n\treturn undefined;\n};\n\nexport const catchErrorCodes = (options: ApiRequestOptions, result: ApiResult): void => {\n\tconst errors: Record<number, string> = {\n\t\t400: 'Bad Request',\n\t\t401: 'Unauthorized',\n\t\t402: 'Payment Required',\n\t\t403: 'Forbidden',\n\t\t404: 'Not Found',\n\t\t405: 'Method Not Allowed',\n\t\t406: 'Not Acceptable',\n\t\t407: 'Proxy Authentication Required',\n\t\t408: 'Request Timeout',\n\t\t409: 'Conflict',\n\t\t410: 'Gone',\n\t\t411: 'Length Required',\n\t\t412: 'Precondition Failed',\n\t\t413: 'Payload Too Large',\n\t\t414: 'URI Too Long',\n\t\t415: 'Unsupported Media Type',\n\t\t416: 'Range Not Satisfiable',\n\t\t417: 'Expectation Failed',\n\t\t418: 'Im a teapot',\n\t\t421: 'Misdirected Request',\n\t\t422: 'Unprocessable Content',\n\t\t423: 'Locked',\n\t\t424: 'Failed Dependency',\n\t\t425: 'Too Early',\n\t\t426: 'Upgrade Required',\n\t\t428: 'Precondition Required',\n\t\t429: 'Too Many Requests',\n\t\t431: 'Request Header Fields Too Large',\n\t\t451: 'Unavailable For Legal Reasons',\n\t\t500: 'Internal Server Error',\n\t\t501: 'Not Implemented',\n\t\t502: 'Bad Gateway',\n\t\t503: 'Service Unavailable',\n\t\t504: 'Gateway Timeout',\n\t\t505: 'HTTP Version Not Supported',\n\t\t506: 'Variant Also Negotiates',\n\t\t507: 'Insufficient Storage',\n\t\t508: 'Loop Detected',\n\t\t510: 'Not Extended',\n\t\t511: 'Network Authentication Required',\n\t\t...options.errors,\n\t}\n\n\tconst error = errors[result.status];\n\tif (error) {\n\t\tthrow new ApiError(options, result, error);\n\t}\n\n\tif (!result.ok) {\n\t\tconst errorStatus = result.status ?? 'unknown';\n\t\tconst errorStatusText = result.statusText ?? 'unknown';\n\t\tconst errorBody = (() => {\n\t\t\ttry {\n\t\t\t\treturn JSON.stringify(result.body, null, 2);\n\t\t\t} catch (e) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t})();\n\n\t\tthrow new ApiError(options, result,\n\t\t\t`Generic Error: status: ${errorStatus}; status text: ${errorStatusText}; body: ${errorBody}`\n\t\t);\n\t}\n};\n\n/**\n * Request method\n * @param config The OpenAPI configuration object\n * @param options The request options from the service\n * @returns CancelablePromise<T>\n * @throws ApiError\n */\nexport const request = <T>(config: OpenAPIConfig, options: ApiRequestOptions): CancelablePromise<T> => {\n\treturn new CancelablePromise(async (resolve, reject, onCancel) => {\n\t\ttry {\n\t\t\tconst url = getUrl(config, options);\n\t\t\tconst formData = getFormData(options);\n\t\t\tconst body = getRequestBody(options);\n\t\t\tconst headers = await getHeaders(config, options);\n\n\t\t\tif (!onCancel.isCancelled) {\n\t\t\t\tlet response = await sendRequest(config, options, url, body, formData, headers, onCancel);\n\n\t\t\t\tfor (const fn of config.interceptors.response._fns) {\n\t\t\t\t\tresponse = await fn(response);\n\t\t\t\t}\n\n\t\t\t\tconst responseBody = await getResponseBody(response);\n\t\t\t\tconst responseHeader = getResponseHeader(response, options.responseHeader);\n\n\t\t\t\tconst result: ApiResult = {\n\t\t\t\t\turl,\n\t\t\t\t\tok: response.ok,\n\t\t\t\t\tstatus: response.status,\n\t\t\t\t\tstatusText: response.statusText,\n\t\t\t\t\tbody: responseHeader ?? responseBody,\n\t\t\t\t};\n\n\t\t\t\tcatchErrorCodes(options, result);\n\n\t\t\t\tresolve(result.body);\n\t\t\t}\n\t\t} catch (error) {\n\t\t\treject(error);\n\t\t}\n\t});\n};","// This file is auto-generated by @hey-api/openapi-ts\n\nimport type { CancelablePromise } from './core/CancelablePromise';\nimport { OpenAPI } from './core/OpenAPI';\nimport { request as __request } from './core/request';\nimport type { $OpenApiTs } from './types.gen';\n\nexport class ContentmentService {\n    /**\n     * @param data The data for the request.\n     * @param data.type\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getContentmentConfigurationEditorModels(data: $OpenApiTs['/umbraco/management/api/v1/contentment/configuration-editor/models']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/contentment/configuration-editor/models']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/contentment/configuration-editor/models',\n            query: {\n                type: data.type\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.requestBody\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static postContentmentDataListEditor(data: $OpenApiTs['/umbraco/management/api/v1/contentment/data-list/editor']['post']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/contentment/data-list/editor']['post']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/contentment/data-list/editor',\n            body: data.requestBody,\n            mediaType: 'application/json',\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n}\n\nexport class CultureService {\n    /**\n     * @param data The data for the request.\n     * @param data.skip\n     * @param data.take\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getCulture(data: $OpenApiTs['/umbraco/management/api/v1/culture']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/culture']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/culture',\n            query: {\n                skip: data.skip,\n                take: data.take\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token'\n            }\n        });\n    }\n    \n}\n\nexport class DataTypeService {\n    /**\n     * @param data The data for the request.\n     * @param data.requestBody\n     * @returns string Created\n     * @throws ApiError\n     */\n    public static postDataType(data: $OpenApiTs['/umbraco/management/api/v1/data-type']['post']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/data-type']['post']['res'][201]> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/data-type',\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Generated-Resource',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getDataTypeById(data: $OpenApiTs['/umbraco/management/api/v1/data-type/{id}']['get']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/data-type/{id}']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/data-type/{id}',\n            path: {\n                id: data.id\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static deleteDataTypeById(data: $OpenApiTs['/umbraco/management/api/v1/data-type/{id}']['delete']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/data-type/{id}']['delete']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'DELETE',\n            url: '/umbraco/management/api/v1/data-type/{id}',\n            path: {\n                id: data.id\n            },\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @param data.requestBody\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static putDataTypeById(data: $OpenApiTs['/umbraco/management/api/v1/data-type/{id}']['put']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/data-type/{id}']['put']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'PUT',\n            url: '/umbraco/management/api/v1/data-type/{id}',\n            path: {\n                id: data.id\n            },\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @param data.requestBody\n     * @returns string Created\n     * @throws ApiError\n     */\n    public static postDataTypeByIdCopy(data: $OpenApiTs['/umbraco/management/api/v1/data-type/{id}/copy']['post']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/data-type/{id}/copy']['post']['res'][201]> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/data-type/{id}/copy',\n            path: {\n                id: data.id\n            },\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Generated-Resource',\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns boolean OK\n     * @throws ApiError\n     */\n    public static getDataTypeByIdIsUsed(data: $OpenApiTs['/umbraco/management/api/v1/data-type/{id}/is-used']['get']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/data-type/{id}/is-used']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/data-type/{id}/is-used',\n            path: {\n                id: data.id\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @param data.requestBody\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static putDataTypeByIdMove(data: $OpenApiTs['/umbraco/management/api/v1/data-type/{id}/move']['put']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/data-type/{id}/move']['put']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'PUT',\n            url: '/umbraco/management/api/v1/data-type/{id}/move',\n            path: {\n                id: data.id\n            },\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getDataTypeByIdReferences(data: $OpenApiTs['/umbraco/management/api/v1/data-type/{id}/references']['get']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/data-type/{id}/references']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/data-type/{id}/references',\n            path: {\n                id: data.id\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getDataTypeConfiguration(): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/data-type/configuration']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/data-type/configuration',\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.requestBody\n     * @returns string Created\n     * @throws ApiError\n     */\n    public static postDataTypeFolder(data: $OpenApiTs['/umbraco/management/api/v1/data-type/folder']['post']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/data-type/folder']['post']['res'][201]> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/data-type/folder',\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Generated-Resource',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getDataTypeFolderById(data: $OpenApiTs['/umbraco/management/api/v1/data-type/folder/{id}']['get']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/data-type/folder/{id}']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/data-type/folder/{id}',\n            path: {\n                id: data.id\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static deleteDataTypeFolderById(data: $OpenApiTs['/umbraco/management/api/v1/data-type/folder/{id}']['delete']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/data-type/folder/{id}']['delete']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'DELETE',\n            url: '/umbraco/management/api/v1/data-type/folder/{id}',\n            path: {\n                id: data.id\n            },\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @param data.requestBody\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static putDataTypeFolderById(data: $OpenApiTs['/umbraco/management/api/v1/data-type/folder/{id}']['put']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/data-type/folder/{id}']['put']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'PUT',\n            url: '/umbraco/management/api/v1/data-type/folder/{id}',\n            path: {\n                id: data.id\n            },\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.skip\n     * @param data.take\n     * @param data.name\n     * @param data.editorUiAlias\n     * @param data.editorAlias\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getFilterDataType(data: $OpenApiTs['/umbraco/management/api/v1/filter/data-type']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/filter/data-type']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/filter/data-type',\n            query: {\n                skip: data.skip,\n                take: data.take,\n                name: data.name,\n                editorUiAlias: data.editorUiAlias,\n                editorAlias: data.editorAlias\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getItemDataType(data: $OpenApiTs['/umbraco/management/api/v1/item/data-type']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/item/data-type']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/item/data-type',\n            query: {\n                id: data.id\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.query\n     * @param data.skip\n     * @param data.take\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getItemDataTypeSearch(data: $OpenApiTs['/umbraco/management/api/v1/item/data-type/search']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/item/data-type/search']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/item/data-type/search',\n            query: {\n                query: data.query,\n                skip: data.skip,\n                take: data.take\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.descendantId\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getTreeDataTypeAncestors(data: $OpenApiTs['/umbraco/management/api/v1/tree/data-type/ancestors']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/tree/data-type/ancestors']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/tree/data-type/ancestors',\n            query: {\n                descendantId: data.descendantId\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.parentId\n     * @param data.skip\n     * @param data.take\n     * @param data.foldersOnly\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getTreeDataTypeChildren(data: $OpenApiTs['/umbraco/management/api/v1/tree/data-type/children']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/tree/data-type/children']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/tree/data-type/children',\n            query: {\n                parentId: data.parentId,\n                skip: data.skip,\n                take: data.take,\n                foldersOnly: data.foldersOnly\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.skip\n     * @param data.take\n     * @param data.foldersOnly\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getTreeDataTypeRoot(data: $OpenApiTs['/umbraco/management/api/v1/tree/data-type/root']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/tree/data-type/root']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/tree/data-type/root',\n            query: {\n                skip: data.skip,\n                take: data.take,\n                foldersOnly: data.foldersOnly\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n}\n\nexport class DictionaryService {\n    /**\n     * @param data The data for the request.\n     * @param data.filter\n     * @param data.skip\n     * @param data.take\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getDictionary(data: $OpenApiTs['/umbraco/management/api/v1/dictionary']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/dictionary']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/dictionary',\n            query: {\n                filter: data.filter,\n                skip: data.skip,\n                take: data.take\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.requestBody\n     * @returns string Created\n     * @throws ApiError\n     */\n    public static postDictionary(data: $OpenApiTs['/umbraco/management/api/v1/dictionary']['post']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/dictionary']['post']['res'][201]> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/dictionary',\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Generated-Resource',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found',\n                409: 'Conflict'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getDictionaryById(data: $OpenApiTs['/umbraco/management/api/v1/dictionary/{id}']['get']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/dictionary/{id}']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/dictionary/{id}',\n            path: {\n                id: data.id\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static deleteDictionaryById(data: $OpenApiTs['/umbraco/management/api/v1/dictionary/{id}']['delete']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/dictionary/{id}']['delete']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'DELETE',\n            url: '/umbraco/management/api/v1/dictionary/{id}',\n            path: {\n                id: data.id\n            },\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @param data.requestBody\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static putDictionaryById(data: $OpenApiTs['/umbraco/management/api/v1/dictionary/{id}']['put']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/dictionary/{id}']['put']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'PUT',\n            url: '/umbraco/management/api/v1/dictionary/{id}',\n            path: {\n                id: data.id\n            },\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @param data.includeChildren\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getDictionaryByIdExport(data: $OpenApiTs['/umbraco/management/api/v1/dictionary/{id}/export']['get']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/dictionary/{id}/export']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/dictionary/{id}/export',\n            path: {\n                id: data.id\n            },\n            query: {\n                includeChildren: data.includeChildren\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @param data.requestBody\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static putDictionaryByIdMove(data: $OpenApiTs['/umbraco/management/api/v1/dictionary/{id}/move']['put']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/dictionary/{id}/move']['put']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'PUT',\n            url: '/umbraco/management/api/v1/dictionary/{id}/move',\n            path: {\n                id: data.id\n            },\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.requestBody\n     * @returns string Created\n     * @throws ApiError\n     */\n    public static postDictionaryImport(data: $OpenApiTs['/umbraco/management/api/v1/dictionary/import']['post']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/dictionary/import']['post']['res'][201]> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/dictionary/import',\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Generated-Resource',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getItemDictionary(data: $OpenApiTs['/umbraco/management/api/v1/item/dictionary']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/item/dictionary']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/item/dictionary',\n            query: {\n                id: data.id\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.descendantId\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getTreeDictionaryAncestors(data: $OpenApiTs['/umbraco/management/api/v1/tree/dictionary/ancestors']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/tree/dictionary/ancestors']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/tree/dictionary/ancestors',\n            query: {\n                descendantId: data.descendantId\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.parentId\n     * @param data.skip\n     * @param data.take\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getTreeDictionaryChildren(data: $OpenApiTs['/umbraco/management/api/v1/tree/dictionary/children']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/tree/dictionary/children']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/tree/dictionary/children',\n            query: {\n                parentId: data.parentId,\n                skip: data.skip,\n                take: data.take\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.skip\n     * @param data.take\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getTreeDictionaryRoot(data: $OpenApiTs['/umbraco/management/api/v1/tree/dictionary/root']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/tree/dictionary/root']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/tree/dictionary/root',\n            query: {\n                skip: data.skip,\n                take: data.take\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n}\n\nexport class DocumentBlueprintService {\n    /**\n     * @param data The data for the request.\n     * @param data.requestBody\n     * @returns string Created\n     * @throws ApiError\n     */\n    public static postDocumentBlueprint(data: $OpenApiTs['/umbraco/management/api/v1/document-blueprint']['post']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/document-blueprint']['post']['res'][201]> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/document-blueprint',\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Generated-Resource',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getDocumentBlueprintById(data: $OpenApiTs['/umbraco/management/api/v1/document-blueprint/{id}']['get']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/document-blueprint/{id}']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/document-blueprint/{id}',\n            path: {\n                id: data.id\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static deleteDocumentBlueprintById(data: $OpenApiTs['/umbraco/management/api/v1/document-blueprint/{id}']['delete']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/document-blueprint/{id}']['delete']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'DELETE',\n            url: '/umbraco/management/api/v1/document-blueprint/{id}',\n            path: {\n                id: data.id\n            },\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @param data.requestBody\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static putDocumentBlueprintById(data: $OpenApiTs['/umbraco/management/api/v1/document-blueprint/{id}']['put']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/document-blueprint/{id}']['put']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'PUT',\n            url: '/umbraco/management/api/v1/document-blueprint/{id}',\n            path: {\n                id: data.id\n            },\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @param data.requestBody\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static putDocumentBlueprintByIdMove(data: $OpenApiTs['/umbraco/management/api/v1/document-blueprint/{id}/move']['put']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/document-blueprint/{id}/move']['put']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'PUT',\n            url: '/umbraco/management/api/v1/document-blueprint/{id}/move',\n            path: {\n                id: data.id\n            },\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.requestBody\n     * @returns string Created\n     * @throws ApiError\n     */\n    public static postDocumentBlueprintFolder(data: $OpenApiTs['/umbraco/management/api/v1/document-blueprint/folder']['post']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/document-blueprint/folder']['post']['res'][201]> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/document-blueprint/folder',\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Generated-Resource',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getDocumentBlueprintFolderById(data: $OpenApiTs['/umbraco/management/api/v1/document-blueprint/folder/{id}']['get']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/document-blueprint/folder/{id}']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/document-blueprint/folder/{id}',\n            path: {\n                id: data.id\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static deleteDocumentBlueprintFolderById(data: $OpenApiTs['/umbraco/management/api/v1/document-blueprint/folder/{id}']['delete']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/document-blueprint/folder/{id}']['delete']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'DELETE',\n            url: '/umbraco/management/api/v1/document-blueprint/folder/{id}',\n            path: {\n                id: data.id\n            },\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @param data.requestBody\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static putDocumentBlueprintFolderById(data: $OpenApiTs['/umbraco/management/api/v1/document-blueprint/folder/{id}']['put']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/document-blueprint/folder/{id}']['put']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'PUT',\n            url: '/umbraco/management/api/v1/document-blueprint/folder/{id}',\n            path: {\n                id: data.id\n            },\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.requestBody\n     * @returns string Created\n     * @throws ApiError\n     */\n    public static postDocumentBlueprintFromDocument(data: $OpenApiTs['/umbraco/management/api/v1/document-blueprint/from-document']['post']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/document-blueprint/from-document']['post']['res'][201]> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/document-blueprint/from-document',\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Generated-Resource',\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getItemDocumentBlueprint(data: $OpenApiTs['/umbraco/management/api/v1/item/document-blueprint']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/item/document-blueprint']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/item/document-blueprint',\n            query: {\n                id: data.id\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.descendantId\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getTreeDocumentBlueprintAncestors(data: $OpenApiTs['/umbraco/management/api/v1/tree/document-blueprint/ancestors']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/tree/document-blueprint/ancestors']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/tree/document-blueprint/ancestors',\n            query: {\n                descendantId: data.descendantId\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.parentId\n     * @param data.skip\n     * @param data.take\n     * @param data.foldersOnly\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getTreeDocumentBlueprintChildren(data: $OpenApiTs['/umbraco/management/api/v1/tree/document-blueprint/children']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/tree/document-blueprint/children']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/tree/document-blueprint/children',\n            query: {\n                parentId: data.parentId,\n                skip: data.skip,\n                take: data.take,\n                foldersOnly: data.foldersOnly\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.skip\n     * @param data.take\n     * @param data.foldersOnly\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getTreeDocumentBlueprintRoot(data: $OpenApiTs['/umbraco/management/api/v1/tree/document-blueprint/root']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/tree/document-blueprint/root']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/tree/document-blueprint/root',\n            query: {\n                skip: data.skip,\n                take: data.take,\n                foldersOnly: data.foldersOnly\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n}\n\nexport class DocumentTypeService {\n    /**\n     * @param data The data for the request.\n     * @param data.requestBody\n     * @returns string Created\n     * @throws ApiError\n     */\n    public static postDocumentType(data: $OpenApiTs['/umbraco/management/api/v1/document-type']['post']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/document-type']['post']['res'][201]> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/document-type',\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Generated-Resource',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getDocumentTypeById(data: $OpenApiTs['/umbraco/management/api/v1/document-type/{id}']['get']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/document-type/{id}']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/document-type/{id}',\n            path: {\n                id: data.id\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static deleteDocumentTypeById(data: $OpenApiTs['/umbraco/management/api/v1/document-type/{id}']['delete']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/document-type/{id}']['delete']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'DELETE',\n            url: '/umbraco/management/api/v1/document-type/{id}',\n            path: {\n                id: data.id\n            },\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @param data.requestBody\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static putDocumentTypeById(data: $OpenApiTs['/umbraco/management/api/v1/document-type/{id}']['put']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/document-type/{id}']['put']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'PUT',\n            url: '/umbraco/management/api/v1/document-type/{id}',\n            path: {\n                id: data.id\n            },\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @param data.skip\n     * @param data.take\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getDocumentTypeByIdAllowedChildren(data: $OpenApiTs['/umbraco/management/api/v1/document-type/{id}/allowed-children']['get']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/document-type/{id}/allowed-children']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/document-type/{id}/allowed-children',\n            path: {\n                id: data.id\n            },\n            query: {\n                skip: data.skip,\n                take: data.take\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @param data.skip\n     * @param data.take\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getDocumentTypeByIdBlueprint(data: $OpenApiTs['/umbraco/management/api/v1/document-type/{id}/blueprint']['get']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/document-type/{id}/blueprint']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/document-type/{id}/blueprint',\n            path: {\n                id: data.id\n            },\n            query: {\n                skip: data.skip,\n                take: data.take\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getDocumentTypeByIdCompositionReferences(data: $OpenApiTs['/umbraco/management/api/v1/document-type/{id}/composition-references']['get']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/document-type/{id}/composition-references']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/document-type/{id}/composition-references',\n            path: {\n                id: data.id\n            },\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @param data.requestBody\n     * @returns string Created\n     * @throws ApiError\n     */\n    public static postDocumentTypeByIdCopy(data: $OpenApiTs['/umbraco/management/api/v1/document-type/{id}/copy']['post']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/document-type/{id}/copy']['post']['res'][201]> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/document-type/{id}/copy',\n            path: {\n                id: data.id\n            },\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Generated-Resource',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getDocumentTypeByIdExport(data: $OpenApiTs['/umbraco/management/api/v1/document-type/{id}/export']['get']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/document-type/{id}/export']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/document-type/{id}/export',\n            path: {\n                id: data.id\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @param data.requestBody\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static putDocumentTypeByIdImport(data: $OpenApiTs['/umbraco/management/api/v1/document-type/{id}/import']['put']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/document-type/{id}/import']['put']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'PUT',\n            url: '/umbraco/management/api/v1/document-type/{id}/import',\n            path: {\n                id: data.id\n            },\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @param data.requestBody\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static putDocumentTypeByIdMove(data: $OpenApiTs['/umbraco/management/api/v1/document-type/{id}/move']['put']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/document-type/{id}/move']['put']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'PUT',\n            url: '/umbraco/management/api/v1/document-type/{id}/move',\n            path: {\n                id: data.id\n            },\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.skip\n     * @param data.take\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getDocumentTypeAllowedAtRoot(data: $OpenApiTs['/umbraco/management/api/v1/document-type/allowed-at-root']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/document-type/allowed-at-root']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/document-type/allowed-at-root',\n            query: {\n                skip: data.skip,\n                take: data.take\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.requestBody\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static postDocumentTypeAvailableCompositions(data: $OpenApiTs['/umbraco/management/api/v1/document-type/available-compositions']['post']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/document-type/available-compositions']['post']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/document-type/available-compositions',\n            body: data.requestBody,\n            mediaType: 'application/json',\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getDocumentTypeConfiguration(): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/document-type/configuration']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/document-type/configuration',\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.requestBody\n     * @returns string Created\n     * @throws ApiError\n     */\n    public static postDocumentTypeFolder(data: $OpenApiTs['/umbraco/management/api/v1/document-type/folder']['post']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/document-type/folder']['post']['res'][201]> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/document-type/folder',\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Generated-Resource',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getDocumentTypeFolderById(data: $OpenApiTs['/umbraco/management/api/v1/document-type/folder/{id}']['get']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/document-type/folder/{id}']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/document-type/folder/{id}',\n            path: {\n                id: data.id\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static deleteDocumentTypeFolderById(data: $OpenApiTs['/umbraco/management/api/v1/document-type/folder/{id}']['delete']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/document-type/folder/{id}']['delete']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'DELETE',\n            url: '/umbraco/management/api/v1/document-type/folder/{id}',\n            path: {\n                id: data.id\n            },\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @param data.requestBody\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static putDocumentTypeFolderById(data: $OpenApiTs['/umbraco/management/api/v1/document-type/folder/{id}']['put']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/document-type/folder/{id}']['put']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'PUT',\n            url: '/umbraco/management/api/v1/document-type/folder/{id}',\n            path: {\n                id: data.id\n            },\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.requestBody\n     * @returns string Created\n     * @throws ApiError\n     */\n    public static postDocumentTypeImport(data: $OpenApiTs['/umbraco/management/api/v1/document-type/import']['post']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/document-type/import']['post']['res'][201]> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/document-type/import',\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Generated-Resource',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getItemDocumentType(data: $OpenApiTs['/umbraco/management/api/v1/item/document-type']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/item/document-type']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/item/document-type',\n            query: {\n                id: data.id\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.query\n     * @param data.skip\n     * @param data.take\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getItemDocumentTypeSearch(data: $OpenApiTs['/umbraco/management/api/v1/item/document-type/search']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/item/document-type/search']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/item/document-type/search',\n            query: {\n                query: data.query,\n                skip: data.skip,\n                take: data.take\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.descendantId\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getTreeDocumentTypeAncestors(data: $OpenApiTs['/umbraco/management/api/v1/tree/document-type/ancestors']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/tree/document-type/ancestors']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/tree/document-type/ancestors',\n            query: {\n                descendantId: data.descendantId\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.parentId\n     * @param data.skip\n     * @param data.take\n     * @param data.foldersOnly\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getTreeDocumentTypeChildren(data: $OpenApiTs['/umbraco/management/api/v1/tree/document-type/children']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/tree/document-type/children']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/tree/document-type/children',\n            query: {\n                parentId: data.parentId,\n                skip: data.skip,\n                take: data.take,\n                foldersOnly: data.foldersOnly\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.skip\n     * @param data.take\n     * @param data.foldersOnly\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getTreeDocumentTypeRoot(data: $OpenApiTs['/umbraco/management/api/v1/tree/document-type/root']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/tree/document-type/root']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/tree/document-type/root',\n            query: {\n                skip: data.skip,\n                take: data.take,\n                foldersOnly: data.foldersOnly\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n}\n\nexport class DocumentVersionService {\n    /**\n     * @param data The data for the request.\n     * @param data.documentId\n     * @param data.culture\n     * @param data.skip\n     * @param data.take\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getDocumentVersion(data: $OpenApiTs['/umbraco/management/api/v1/document-version']['get']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/document-version']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/document-version',\n            query: {\n                documentId: data.documentId,\n                culture: data.culture,\n                skip: data.skip,\n                take: data.take\n            },\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getDocumentVersionById(data: $OpenApiTs['/umbraco/management/api/v1/document-version/{id}']['get']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/document-version/{id}']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/document-version/{id}',\n            path: {\n                id: data.id\n            },\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @param data.preventCleanup\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static putDocumentVersionByIdPreventCleanup(data: $OpenApiTs['/umbraco/management/api/v1/document-version/{id}/prevent-cleanup']['put']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/document-version/{id}/prevent-cleanup']['put']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'PUT',\n            url: '/umbraco/management/api/v1/document-version/{id}/prevent-cleanup',\n            path: {\n                id: data.id\n            },\n            query: {\n                preventCleanup: data.preventCleanup\n            },\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @param data.culture\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static postDocumentVersionByIdRollback(data: $OpenApiTs['/umbraco/management/api/v1/document-version/{id}/rollback']['post']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/document-version/{id}/rollback']['post']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/document-version/{id}/rollback',\n            path: {\n                id: data.id\n            },\n            query: {\n                culture: data.culture\n            },\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n}\n\nexport class DocumentService {\n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @param data.dataTypeId\n     * @param data.orderBy\n     * @param data.orderCulture\n     * @param data.orderDirection\n     * @param data.filter\n     * @param data.skip\n     * @param data.take\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getCollectionDocumentById(data: $OpenApiTs['/umbraco/management/api/v1/collection/document/{id}']['get']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/collection/document/{id}']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/collection/document/{id}',\n            path: {\n                id: data.id\n            },\n            query: {\n                dataTypeId: data.dataTypeId,\n                orderBy: data.orderBy,\n                orderCulture: data.orderCulture,\n                orderDirection: data.orderDirection,\n                filter: data.filter,\n                skip: data.skip,\n                take: data.take\n            },\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.requestBody\n     * @returns string Created\n     * @throws ApiError\n     */\n    public static postDocument(data: $OpenApiTs['/umbraco/management/api/v1/document']['post']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/document']['post']['res'][201]> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/document',\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Generated-Resource',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getDocumentById(data: $OpenApiTs['/umbraco/management/api/v1/document/{id}']['get']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/document/{id}']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/document/{id}',\n            path: {\n                id: data.id\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static deleteDocumentById(data: $OpenApiTs['/umbraco/management/api/v1/document/{id}']['delete']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/document/{id}']['delete']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'DELETE',\n            url: '/umbraco/management/api/v1/document/{id}',\n            path: {\n                id: data.id\n            },\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @param data.requestBody\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static putDocumentById(data: $OpenApiTs['/umbraco/management/api/v1/document/{id}']['put']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/document/{id}']['put']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'PUT',\n            url: '/umbraco/management/api/v1/document/{id}',\n            path: {\n                id: data.id\n            },\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @param data.orderDirection\n     * @param data.sinceDate\n     * @param data.skip\n     * @param data.take\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getDocumentByIdAuditLog(data: $OpenApiTs['/umbraco/management/api/v1/document/{id}/audit-log']['get']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/document/{id}/audit-log']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/document/{id}/audit-log',\n            path: {\n                id: data.id\n            },\n            query: {\n                orderDirection: data.orderDirection,\n                sinceDate: data.sinceDate,\n                skip: data.skip,\n                take: data.take\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @param data.requestBody\n     * @returns string Created\n     * @throws ApiError\n     */\n    public static postDocumentByIdCopy(data: $OpenApiTs['/umbraco/management/api/v1/document/{id}/copy']['post']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/document/{id}/copy']['post']['res'][201]> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/document/{id}/copy',\n            path: {\n                id: data.id\n            },\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Generated-Resource',\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getDocumentByIdDomains(data: $OpenApiTs['/umbraco/management/api/v1/document/{id}/domains']['get']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/document/{id}/domains']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/document/{id}/domains',\n            path: {\n                id: data.id\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @param data.requestBody\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static putDocumentByIdDomains(data: $OpenApiTs['/umbraco/management/api/v1/document/{id}/domains']['put']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/document/{id}/domains']['put']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'PUT',\n            url: '/umbraco/management/api/v1/document/{id}/domains',\n            path: {\n                id: data.id\n            },\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found',\n                409: 'Conflict'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @param data.requestBody\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static putDocumentByIdMove(data: $OpenApiTs['/umbraco/management/api/v1/document/{id}/move']['put']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/document/{id}/move']['put']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'PUT',\n            url: '/umbraco/management/api/v1/document/{id}/move',\n            path: {\n                id: data.id\n            },\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static putDocumentByIdMoveToRecycleBin(data: $OpenApiTs['/umbraco/management/api/v1/document/{id}/move-to-recycle-bin']['put']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/document/{id}/move-to-recycle-bin']['put']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'PUT',\n            url: '/umbraco/management/api/v1/document/{id}/move-to-recycle-bin',\n            path: {\n                id: data.id\n            },\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getDocumentByIdNotifications(data: $OpenApiTs['/umbraco/management/api/v1/document/{id}/notifications']['get']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/document/{id}/notifications']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/document/{id}/notifications',\n            path: {\n                id: data.id\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @param data.requestBody\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static putDocumentByIdNotifications(data: $OpenApiTs['/umbraco/management/api/v1/document/{id}/notifications']['put']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/document/{id}/notifications']['put']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'PUT',\n            url: '/umbraco/management/api/v1/document/{id}/notifications',\n            path: {\n                id: data.id\n            },\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @param data.requestBody\n     * @returns string Created\n     * @throws ApiError\n     */\n    public static postDocumentByIdPublicAccess(data: $OpenApiTs['/umbraco/management/api/v1/document/{id}/public-access']['post']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/document/{id}/public-access']['post']['res'][201]> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/document/{id}/public-access',\n            path: {\n                id: data.id\n            },\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Generated-Resource',\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static deleteDocumentByIdPublicAccess(data: $OpenApiTs['/umbraco/management/api/v1/document/{id}/public-access']['delete']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/document/{id}/public-access']['delete']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'DELETE',\n            url: '/umbraco/management/api/v1/document/{id}/public-access',\n            path: {\n                id: data.id\n            },\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getDocumentByIdPublicAccess(data: $OpenApiTs['/umbraco/management/api/v1/document/{id}/public-access']['get']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/document/{id}/public-access']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/document/{id}/public-access',\n            path: {\n                id: data.id\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @param data.requestBody\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static putDocumentByIdPublicAccess(data: $OpenApiTs['/umbraco/management/api/v1/document/{id}/public-access']['put']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/document/{id}/public-access']['put']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'PUT',\n            url: '/umbraco/management/api/v1/document/{id}/public-access',\n            path: {\n                id: data.id\n            },\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @param data.requestBody\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static putDocumentByIdPublish(data: $OpenApiTs['/umbraco/management/api/v1/document/{id}/publish']['put']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/document/{id}/publish']['put']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'PUT',\n            url: '/umbraco/management/api/v1/document/{id}/publish',\n            path: {\n                id: data.id\n            },\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @param data.requestBody\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static putDocumentByIdPublishWithDescendants(data: $OpenApiTs['/umbraco/management/api/v1/document/{id}/publish-with-descendants']['put']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/document/{id}/publish-with-descendants']['put']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'PUT',\n            url: '/umbraco/management/api/v1/document/{id}/publish-with-descendants',\n            path: {\n                id: data.id\n            },\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @param data.skip\n     * @param data.take\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getDocumentByIdReferencedBy(data: $OpenApiTs['/umbraco/management/api/v1/document/{id}/referenced-by']['get']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/document/{id}/referenced-by']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/document/{id}/referenced-by',\n            path: {\n                id: data.id\n            },\n            query: {\n                skip: data.skip,\n                take: data.take\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @param data.skip\n     * @param data.take\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getDocumentByIdReferencedDescendants(data: $OpenApiTs['/umbraco/management/api/v1/document/{id}/referenced-descendants']['get']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/document/{id}/referenced-descendants']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/document/{id}/referenced-descendants',\n            path: {\n                id: data.id\n            },\n            query: {\n                skip: data.skip,\n                take: data.take\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @param data.requestBody\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static putDocumentByIdUnpublish(data: $OpenApiTs['/umbraco/management/api/v1/document/{id}/unpublish']['put']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/document/{id}/unpublish']['put']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'PUT',\n            url: '/umbraco/management/api/v1/document/{id}/unpublish',\n            path: {\n                id: data.id\n            },\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @param data.requestBody\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static putDocumentByIdValidate(data: $OpenApiTs['/umbraco/management/api/v1/document/{id}/validate']['put']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/document/{id}/validate']['put']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'PUT',\n            url: '/umbraco/management/api/v1/document/{id}/validate',\n            path: {\n                id: data.id\n            },\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @param data.skip\n     * @param data.take\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getDocumentAreReferenced(data: $OpenApiTs['/umbraco/management/api/v1/document/are-referenced']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/document/are-referenced']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/document/are-referenced',\n            query: {\n                id: data.id,\n                skip: data.skip,\n                take: data.take\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getDocumentConfiguration(): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/document/configuration']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/document/configuration',\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.requestBody\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static putDocumentSort(data: $OpenApiTs['/umbraco/management/api/v1/document/sort']['put']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/document/sort']['put']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'PUT',\n            url: '/umbraco/management/api/v1/document/sort',\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getDocumentUrls(data: $OpenApiTs['/umbraco/management/api/v1/document/urls']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/document/urls']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/document/urls',\n            query: {\n                id: data.id\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.requestBody\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static postDocumentValidate(data: $OpenApiTs['/umbraco/management/api/v1/document/validate']['post']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/document/validate']['post']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/document/validate',\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getItemDocument(data: $OpenApiTs['/umbraco/management/api/v1/item/document']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/item/document']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/item/document',\n            query: {\n                id: data.id\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.query\n     * @param data.skip\n     * @param data.take\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getItemDocumentSearch(data: $OpenApiTs['/umbraco/management/api/v1/item/document/search']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/item/document/search']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/item/document/search',\n            query: {\n                query: data.query,\n                skip: data.skip,\n                take: data.take\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token'\n            }\n        });\n    }\n    \n    /**\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static deleteRecycleBinDocument(): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/recycle-bin/document']['delete']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'DELETE',\n            url: '/umbraco/management/api/v1/recycle-bin/document',\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static deleteRecycleBinDocumentById(data: $OpenApiTs['/umbraco/management/api/v1/recycle-bin/document/{id}']['delete']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/recycle-bin/document/{id}']['delete']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'DELETE',\n            url: '/umbraco/management/api/v1/recycle-bin/document/{id}',\n            path: {\n                id: data.id\n            },\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getRecycleBinDocumentByIdOriginalParent(data: $OpenApiTs['/umbraco/management/api/v1/recycle-bin/document/{id}/original-parent']['get']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/recycle-bin/document/{id}/original-parent']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/recycle-bin/document/{id}/original-parent',\n            path: {\n                id: data.id\n            },\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @param data.requestBody\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static putRecycleBinDocumentByIdRestore(data: $OpenApiTs['/umbraco/management/api/v1/recycle-bin/document/{id}/restore']['put']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/recycle-bin/document/{id}/restore']['put']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'PUT',\n            url: '/umbraco/management/api/v1/recycle-bin/document/{id}/restore',\n            path: {\n                id: data.id\n            },\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.parentId\n     * @param data.skip\n     * @param data.take\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getRecycleBinDocumentChildren(data: $OpenApiTs['/umbraco/management/api/v1/recycle-bin/document/children']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/recycle-bin/document/children']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/recycle-bin/document/children',\n            query: {\n                parentId: data.parentId,\n                skip: data.skip,\n                take: data.take\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.skip\n     * @param data.take\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getRecycleBinDocumentRoot(data: $OpenApiTs['/umbraco/management/api/v1/recycle-bin/document/root']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/recycle-bin/document/root']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/recycle-bin/document/root',\n            query: {\n                skip: data.skip,\n                take: data.take\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.descendantId\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getTreeDocumentAncestors(data: $OpenApiTs['/umbraco/management/api/v1/tree/document/ancestors']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/tree/document/ancestors']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/tree/document/ancestors',\n            query: {\n                descendantId: data.descendantId\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.parentId\n     * @param data.skip\n     * @param data.take\n     * @param data.dataTypeId\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getTreeDocumentChildren(data: $OpenApiTs['/umbraco/management/api/v1/tree/document/children']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/tree/document/children']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/tree/document/children',\n            query: {\n                parentId: data.parentId,\n                skip: data.skip,\n                take: data.take,\n                dataTypeId: data.dataTypeId\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.skip\n     * @param data.take\n     * @param data.dataTypeId\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getTreeDocumentRoot(data: $OpenApiTs['/umbraco/management/api/v1/tree/document/root']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/tree/document/root']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/tree/document/root',\n            query: {\n                skip: data.skip,\n                take: data.take,\n                dataTypeId: data.dataTypeId\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n}\n\nexport class DynamicRootService {\n    /**\n     * @param data The data for the request.\n     * @param data.requestBody\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static postDynamicRootQuery(data: $OpenApiTs['/umbraco/management/api/v1/dynamic-root/query']['post']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/dynamic-root/query']['post']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/dynamic-root/query',\n            body: data.requestBody,\n            mediaType: 'application/json',\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static getDynamicRootSteps(): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/dynamic-root/steps']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/dynamic-root/steps',\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n}\n\nexport class GodModeService {\n    /**\n     * @param data The data for the request.\n     * @param data.cache\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static postUmbracoManagementApiV1GodModeClearUmbracoCache(data: $OpenApiTs['/umbraco/management/api/v1/god-mode/ClearUmbracoCache']['post']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/god-mode/ClearUmbracoCache']['post']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/god-mode/ClearUmbracoCache',\n            query: {\n                cache: data.cache\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static postUmbracoManagementApiV1GodModeCopyDataType(data: $OpenApiTs['/umbraco/management/api/v1/god-mode/CopyDataType']['post']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/god-mode/CopyDataType']['post']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/god-mode/CopyDataType',\n            query: {\n                id: data.id\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static postUmbracoManagementApiV1GodModeDeleteTag(data: $OpenApiTs['/umbraco/management/api/v1/god-mode/DeleteTag']['post']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/god-mode/DeleteTag']['post']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/god-mode/DeleteTag',\n            query: {\n                id: data.id\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @returns number OK\n     * @throws ApiError\n     */\n    public static postUmbracoManagementApiV1GodModeFixTemplateMasters(): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/god-mode/FixTemplateMasters']['post']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/god-mode/FixTemplateMasters',\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getUmbracoManagementApiV1GodModeGetApiControllers(): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/god-mode/GetApiControllers']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/god-mode/GetApiControllers',\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getUmbracoManagementApiV1GodModeGetAssemblies(): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/god-mode/GetAssemblies']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/god-mode/GetAssemblies',\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getUmbracoManagementApiV1GodModeGetAssembliesWithInterfaces(): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/god-mode/GetAssembliesWithInterfaces']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/god-mode/GetAssembliesWithInterfaces',\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getUmbracoManagementApiV1GodModeGetComposers(): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/god-mode/GetComposers']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/god-mode/GetComposers',\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getUmbracoManagementApiV1GodModeGetCompositions(): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/god-mode/GetCompositions']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/god-mode/GetCompositions',\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getUmbracoManagementApiV1GodModeGetConfig(): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/god-mode/GetConfig']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/god-mode/GetConfig',\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getUmbracoManagementApiV1GodModeGetContentFinders(): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/god-mode/GetContentFinders']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/god-mode/GetContentFinders',\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.page\n     * @param data.pageSize\n     * @param data.name\n     * @param data.alias\n     * @param data.creatorId\n     * @param data.id\n     * @param data.level\n     * @param data.trashed\n     * @param data.updaterId\n     * @param data.languageId\n     * @param data.orderBy\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getUmbracoManagementApiV1GodModeGetContentPaged(data: $OpenApiTs['/umbraco/management/api/v1/god-mode/GetContentPaged']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/god-mode/GetContentPaged']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/god-mode/GetContentPaged',\n            query: {\n                page: data.page,\n                pageSize: data.pageSize,\n                name: data.name,\n                alias: data.alias,\n                creatorId: data.creatorId,\n                id: data.id,\n                level: data.level,\n                trashed: data.trashed,\n                updaterId: data.updaterId,\n                languageId: data.languageId,\n                orderBy: data.orderBy\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static getUmbracoManagementApiV1GodModeGetContentTypeAliases(): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/god-mode/GetContentTypeAliases']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/god-mode/GetContentTypeAliases',\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getUmbracoManagementApiV1GodModeGetContentTypeMap(): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/god-mode/GetContentTypeMap']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/god-mode/GetContentTypeMap',\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @param data.orderBy\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getUmbracoManagementApiV1GodModeGetContentUsageData(data: $OpenApiTs['/umbraco/management/api/v1/god-mode/GetContentUsageData']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/god-mode/GetContentUsageData']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/god-mode/GetContentUsageData',\n            query: {\n                id: data.id,\n                orderBy: data.orderBy\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getUmbracoManagementApiV1GodModeGetDataTypes(): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/god-mode/GetDataTypes']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/god-mode/GetDataTypes',\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getUmbracoManagementApiV1GodModeGetDataTypesStatus(): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/god-mode/GetDataTypesStatus']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/god-mode/GetDataTypesStatus',\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getUmbracoManagementApiV1GodModeGetEnvironmentDiagnostics(): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/god-mode/GetEnvironmentDiagnostics']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/god-mode/GetEnvironmentDiagnostics',\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.assembly\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getUmbracoManagementApiV1GodModeGetInterfacesFrom(data: $OpenApiTs['/umbraco/management/api/v1/god-mode/GetInterfacesFrom']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/god-mode/GetInterfacesFrom']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/god-mode/GetInterfacesFrom',\n            query: {\n                assembly: data.assembly\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getUmbracoManagementApiV1GodModeGetLanguages(): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/god-mode/GetLanguages']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/god-mode/GetLanguages',\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.page\n     * @param data.pageSize\n     * @param data.name\n     * @param data.id\n     * @param data.mediaTypeId\n     * @param data.orderBy\n     * @param data.orderByDir\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getUmbracoManagementApiV1GodModeGetMedia(data: $OpenApiTs['/umbraco/management/api/v1/god-mode/GetMedia']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/god-mode/GetMedia']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/god-mode/GetMedia',\n            query: {\n                page: data.page,\n                pageSize: data.pageSize,\n                name: data.name,\n                id: data.id,\n                mediaTypeId: data.mediaTypeId,\n                orderBy: data.orderBy,\n                orderByDir: data.orderByDir\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getUmbracoManagementApiV1GodModeGetMediaTypes(): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/god-mode/GetMediaTypes']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/god-mode/GetMediaTypes',\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getUmbracoManagementApiV1GodModeGetMemberGroups(): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/god-mode/GetMemberGroups']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/god-mode/GetMemberGroups',\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.page\n     * @param data.pageSize\n     * @param data.groupId\n     * @param data.search\n     * @param data.orderBy\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getUmbracoManagementApiV1GodModeGetMembersPaged(data: $OpenApiTs['/umbraco/management/api/v1/god-mode/GetMembersPaged']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/god-mode/GetMembersPaged']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/god-mode/GetMembersPaged',\n            query: {\n                page: data.page,\n                pageSize: data.pageSize,\n                groupId: data.groupId,\n                search: data.search,\n                orderBy: data.orderBy\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getUmbracoManagementApiV1GodModeGetNonMsAssemblies(): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/god-mode/GetNonMsAssemblies']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/god-mode/GetNonMsAssemblies',\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getUmbracoManagementApiV1GodModeGetNuCacheItem(data: $OpenApiTs['/umbraco/management/api/v1/god-mode/GetNuCacheItem']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/god-mode/GetNuCacheItem']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/god-mode/GetNuCacheItem',\n            query: {\n                id: data.id\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static getUmbracoManagementApiV1GodModeGetNuCacheType(): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/god-mode/GetNuCacheType']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/god-mode/GetNuCacheType',\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getUmbracoManagementApiV1GodModeGetOrphanedTags(): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/god-mode/GetOrphanedTags']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/god-mode/GetOrphanedTags',\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getUmbracoManagementApiV1GodModeGetPropertyEditors(): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/god-mode/GetPropertyEditors']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/god-mode/GetPropertyEditors',\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static getUmbracoManagementApiV1GodModeGetPropertyGroups(): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/god-mode/GetPropertyGroups']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/god-mode/GetPropertyGroups',\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getUmbracoManagementApiV1GodModeGetPropertyValueConverters(): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/god-mode/GetPropertyValueConverters']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/god-mode/GetPropertyValueConverters',\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getUmbracoManagementApiV1GodModeGetPublishedContentModels(): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/god-mode/GetPublishedContentModels']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/god-mode/GetPublishedContentModels',\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getUmbracoManagementApiV1GodModeGetRegisteredServices(): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/god-mode/GetRegisteredServices']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/god-mode/GetRegisteredServices',\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getUmbracoManagementApiV1GodModeGetRenderMvcControllers(): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/god-mode/GetRenderMvcControllers']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/god-mode/GetRenderMvcControllers',\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static getUmbracoManagementApiV1GodModeGetStandardContentTypeAliases(): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/god-mode/GetStandardContentTypeAliases']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/god-mode/GetStandardContentTypeAliases',\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getUmbracoManagementApiV1GodModeGetSurfaceControllers(): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/god-mode/GetSurfaceControllers']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/god-mode/GetSurfaceControllers',\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getUmbracoManagementApiV1GodModeGetTagHelpers(): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/god-mode/GetTagHelpers']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/god-mode/GetTagHelpers',\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getUmbracoManagementApiV1GodModeGetTagMapping(): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/god-mode/GetTagMapping']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/god-mode/GetTagMapping',\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getUmbracoManagementApiV1GodModeGetTemplates(): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/god-mode/GetTemplates']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/god-mode/GetTemplates',\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static getUmbracoManagementApiV1GodModeGetTemplateUrlsToPing(): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/god-mode/GetTemplateUrlsToPing']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/god-mode/GetTemplateUrlsToPing',\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.baseType\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getUmbracoManagementApiV1GodModeGetTypesAssignableFrom(data: $OpenApiTs['/umbraco/management/api/v1/god-mode/GetTypesAssignableFrom']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/god-mode/GetTypesAssignableFrom']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/god-mode/GetTypesAssignableFrom',\n            query: {\n                baseType: data.baseType\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.assembly\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getUmbracoManagementApiV1GodModeGetTypesFrom(data: $OpenApiTs['/umbraco/management/api/v1/god-mode/GetTypesFrom']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/god-mode/GetTypesFrom']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/god-mode/GetTypesFrom',\n            query: {\n                assembly: data.assembly\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getUmbracoManagementApiV1GodModeGetUmbracoAssemblies(): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/god-mode/GetUmbracoAssemblies']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/god-mode/GetUmbracoAssemblies',\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getUmbracoManagementApiV1GodModeGetUrlProviders(): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/god-mode/GetUrlProviders']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/god-mode/GetUrlProviders',\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.culture\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static getUmbracoManagementApiV1GodModeGetUrlsToPing(data: $OpenApiTs['/umbraco/management/api/v1/god-mode/GetUrlsToPing']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/god-mode/GetUrlsToPing']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/god-mode/GetUrlsToPing',\n            query: {\n                culture: data.culture\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getUmbracoManagementApiV1GodModeGetViewComponents(): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/god-mode/GetViewComponents']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/god-mode/GetViewComponents',\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static postUmbracoManagementApiV1GodModePurgeMediaCache(): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/god-mode/PurgeMediaCache']['post']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/god-mode/PurgeMediaCache',\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static postUmbracoManagementApiV1GodModeRestartAppPool(): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/god-mode/RestartAppPool']['post']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/god-mode/RestartAppPool',\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n}\n\nexport class HealthCheckService {\n    /**\n     * @param data The data for the request.\n     * @param data.skip\n     * @param data.take\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getHealthCheckGroup(data: $OpenApiTs['/umbraco/management/api/v1/health-check-group']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/health-check-group']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/health-check-group',\n            query: {\n                skip: data.skip,\n                take: data.take\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.name\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getHealthCheckGroupByName(data: $OpenApiTs['/umbraco/management/api/v1/health-check-group/{name}']['get']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/health-check-group/{name}']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/health-check-group/{name}',\n            path: {\n                name: data.name\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.name\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static postHealthCheckGroupByNameCheck(data: $OpenApiTs['/umbraco/management/api/v1/health-check-group/{name}/check']['post']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/health-check-group/{name}/check']['post']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/health-check-group/{name}/check',\n            path: {\n                name: data.name\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.requestBody\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static postHealthCheckExecuteAction(data: $OpenApiTs['/umbraco/management/api/v1/health-check/execute-action']['post']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/health-check/execute-action']['post']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/health-check/execute-action',\n            body: data.requestBody,\n            mediaType: 'application/json',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n}\n\nexport class HelpService {\n    /**\n     * @param data The data for the request.\n     * @param data.section\n     * @param data.tree\n     * @param data.skip\n     * @param data.take\n     * @param data.baseUrl\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getHelp(data: $OpenApiTs['/umbraco/management/api/v1/help']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/help']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/help',\n            query: {\n                section: data.section,\n                tree: data.tree,\n                skip: data.skip,\n                take: data.take,\n                baseUrl: data.baseUrl\n            },\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token'\n            }\n        });\n    }\n    \n}\n\nexport class ImagingService {\n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @param data.height\n     * @param data.width\n     * @param data.mode\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getImagingResizeUrls(data: $OpenApiTs['/umbraco/management/api/v1/imaging/resize/urls']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/imaging/resize/urls']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/imaging/resize/urls',\n            query: {\n                id: data.id,\n                height: data.height,\n                width: data.width,\n                mode: data.mode\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n}\n\nexport class ImportService {\n    /**\n     * @param data The data for the request.\n     * @param data.temporaryFileId\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getImportAnalyze(data: $OpenApiTs['/umbraco/management/api/v1/import/analyze']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/import/analyze']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/import/analyze',\n            query: {\n                temporaryFileId: data.temporaryFileId\n            },\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n}\n\nexport class IndexerService {\n    /**\n     * @param data The data for the request.\n     * @param data.skip\n     * @param data.take\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getIndexer(data: $OpenApiTs['/umbraco/management/api/v1/indexer']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/indexer']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/indexer',\n            query: {\n                skip: data.skip,\n                take: data.take\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.indexName\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getIndexerByIndexName(data: $OpenApiTs['/umbraco/management/api/v1/indexer/{indexName}']['get']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/indexer/{indexName}']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/indexer/{indexName}',\n            path: {\n                indexName: data.indexName\n            },\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.indexName\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static postIndexerByIndexNameRebuild(data: $OpenApiTs['/umbraco/management/api/v1/indexer/{indexName}/rebuild']['post']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/indexer/{indexName}/rebuild']['post']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/indexer/{indexName}/rebuild',\n            path: {\n                indexName: data.indexName\n            },\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                404: 'Not Found',\n                409: 'Conflict'\n            }\n        });\n    }\n    \n}\n\nexport class InstallService {\n    /**\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getInstallSettings(): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/install/settings']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/install/settings',\n            errors: {\n                428: 'Precondition Required'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.requestBody\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static postInstallSetup(data: $OpenApiTs['/umbraco/management/api/v1/install/setup']['post']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/install/setup']['post']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/install/setup',\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                428: 'Precondition Required'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.requestBody\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static postInstallValidateDatabase(data: $OpenApiTs['/umbraco/management/api/v1/install/validate-database']['post']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/install/validate-database']['post']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/install/validate-database',\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request'\n            }\n        });\n    }\n    \n}\n\nexport class LanguageService {\n    /**\n     * @param data The data for the request.\n     * @param data.isoCode\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getItemLanguage(data: $OpenApiTs['/umbraco/management/api/v1/item/language']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/item/language']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/item/language',\n            query: {\n                isoCode: data.isoCode\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token'\n            }\n        });\n    }\n    \n    /**\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getItemLanguageDefault(): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/item/language/default']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/item/language/default',\n            errors: {\n                401: 'The resource is protected and requires an authentication token'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.skip\n     * @param data.take\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getLanguage(data: $OpenApiTs['/umbraco/management/api/v1/language']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/language']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/language',\n            query: {\n                skip: data.skip,\n                take: data.take\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.requestBody\n     * @returns string Created\n     * @throws ApiError\n     */\n    public static postLanguage(data: $OpenApiTs['/umbraco/management/api/v1/language']['post']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/language']['post']['res'][201]> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/language',\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Generated-Resource',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.isoCode\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getLanguageByIsoCode(data: $OpenApiTs['/umbraco/management/api/v1/language/{isoCode}']['get']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/language/{isoCode}']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/language/{isoCode}',\n            path: {\n                isoCode: data.isoCode\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.isoCode\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static deleteLanguageByIsoCode(data: $OpenApiTs['/umbraco/management/api/v1/language/{isoCode}']['delete']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/language/{isoCode}']['delete']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'DELETE',\n            url: '/umbraco/management/api/v1/language/{isoCode}',\n            path: {\n                isoCode: data.isoCode\n            },\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.isoCode\n     * @param data.requestBody\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static putLanguageByIsoCode(data: $OpenApiTs['/umbraco/management/api/v1/language/{isoCode}']['put']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/language/{isoCode}']['put']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'PUT',\n            url: '/umbraco/management/api/v1/language/{isoCode}',\n            path: {\n                isoCode: data.isoCode\n            },\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n}\n\nexport class LogViewerService {\n    /**\n     * @param data The data for the request.\n     * @param data.skip\n     * @param data.take\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getLogViewerLevel(data: $OpenApiTs['/umbraco/management/api/v1/log-viewer/level']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/log-viewer/level']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/log-viewer/level',\n            query: {\n                skip: data.skip,\n                take: data.take\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.startDate\n     * @param data.endDate\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getLogViewerLevelCount(data: $OpenApiTs['/umbraco/management/api/v1/log-viewer/level-count']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/log-viewer/level-count']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/log-viewer/level-count',\n            query: {\n                startDate: data.startDate,\n                endDate: data.endDate\n            },\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.skip\n     * @param data.take\n     * @param data.orderDirection\n     * @param data.filterExpression\n     * @param data.logLevel\n     * @param data.startDate\n     * @param data.endDate\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getLogViewerLog(data: $OpenApiTs['/umbraco/management/api/v1/log-viewer/log']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/log-viewer/log']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/log-viewer/log',\n            query: {\n                skip: data.skip,\n                take: data.take,\n                orderDirection: data.orderDirection,\n                filterExpression: data.filterExpression,\n                logLevel: data.logLevel,\n                startDate: data.startDate,\n                endDate: data.endDate\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.skip\n     * @param data.take\n     * @param data.startDate\n     * @param data.endDate\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getLogViewerMessageTemplate(data: $OpenApiTs['/umbraco/management/api/v1/log-viewer/message-template']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/log-viewer/message-template']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/log-viewer/message-template',\n            query: {\n                skip: data.skip,\n                take: data.take,\n                startDate: data.startDate,\n                endDate: data.endDate\n            },\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.skip\n     * @param data.take\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getLogViewerSavedSearch(data: $OpenApiTs['/umbraco/management/api/v1/log-viewer/saved-search']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/log-viewer/saved-search']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/log-viewer/saved-search',\n            query: {\n                skip: data.skip,\n                take: data.take\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.requestBody\n     * @returns string Created\n     * @throws ApiError\n     */\n    public static postLogViewerSavedSearch(data: $OpenApiTs['/umbraco/management/api/v1/log-viewer/saved-search']['post']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/log-viewer/saved-search']['post']['res'][201]> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/log-viewer/saved-search',\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Generated-Resource',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.name\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getLogViewerSavedSearchByName(data: $OpenApiTs['/umbraco/management/api/v1/log-viewer/saved-search/{name}']['get']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/log-viewer/saved-search/{name}']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/log-viewer/saved-search/{name}',\n            path: {\n                name: data.name\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.name\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static deleteLogViewerSavedSearchByName(data: $OpenApiTs['/umbraco/management/api/v1/log-viewer/saved-search/{name}']['delete']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/log-viewer/saved-search/{name}']['delete']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'DELETE',\n            url: '/umbraco/management/api/v1/log-viewer/saved-search/{name}',\n            path: {\n                name: data.name\n            },\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.startDate\n     * @param data.endDate\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getLogViewerValidateLogsSize(data: $OpenApiTs['/umbraco/management/api/v1/log-viewer/validate-logs-size']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/log-viewer/validate-logs-size']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/log-viewer/validate-logs-size',\n            query: {\n                startDate: data.startDate,\n                endDate: data.endDate\n            },\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n}\n\nexport class ManifestService {\n    /**\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getManifestManifest(): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/manifest/manifest']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/manifest/manifest',\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getManifestManifestPrivate(): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/manifest/manifest/private']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/manifest/manifest/private',\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getManifestManifestPublic(): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/manifest/manifest/public']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/manifest/manifest/public'\n        });\n    }\n    \n}\n\nexport class MediaTypeService {\n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getItemMediaType(data: $OpenApiTs['/umbraco/management/api/v1/item/media-type']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/item/media-type']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/item/media-type',\n            query: {\n                id: data.id\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.fileExtension\n     * @param data.skip\n     * @param data.take\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getItemMediaTypeAllowed(data: $OpenApiTs['/umbraco/management/api/v1/item/media-type/allowed']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/item/media-type/allowed']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/item/media-type/allowed',\n            query: {\n                fileExtension: data.fileExtension,\n                skip: data.skip,\n                take: data.take\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.skip\n     * @param data.take\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getItemMediaTypeFolders(data: $OpenApiTs['/umbraco/management/api/v1/item/media-type/folders']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/item/media-type/folders']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/item/media-type/folders',\n            query: {\n                skip: data.skip,\n                take: data.take\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.query\n     * @param data.skip\n     * @param data.take\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getItemMediaTypeSearch(data: $OpenApiTs['/umbraco/management/api/v1/item/media-type/search']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/item/media-type/search']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/item/media-type/search',\n            query: {\n                query: data.query,\n                skip: data.skip,\n                take: data.take\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.requestBody\n     * @returns string Created\n     * @throws ApiError\n     */\n    public static postMediaType(data: $OpenApiTs['/umbraco/management/api/v1/media-type']['post']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/media-type']['post']['res'][201]> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/media-type',\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Generated-Resource',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getMediaTypeById(data: $OpenApiTs['/umbraco/management/api/v1/media-type/{id}']['get']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/media-type/{id}']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/media-type/{id}',\n            path: {\n                id: data.id\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static deleteMediaTypeById(data: $OpenApiTs['/umbraco/management/api/v1/media-type/{id}']['delete']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/media-type/{id}']['delete']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'DELETE',\n            url: '/umbraco/management/api/v1/media-type/{id}',\n            path: {\n                id: data.id\n            },\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @param data.requestBody\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static putMediaTypeById(data: $OpenApiTs['/umbraco/management/api/v1/media-type/{id}']['put']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/media-type/{id}']['put']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'PUT',\n            url: '/umbraco/management/api/v1/media-type/{id}',\n            path: {\n                id: data.id\n            },\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @param data.skip\n     * @param data.take\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getMediaTypeByIdAllowedChildren(data: $OpenApiTs['/umbraco/management/api/v1/media-type/{id}/allowed-children']['get']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/media-type/{id}/allowed-children']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/media-type/{id}/allowed-children',\n            path: {\n                id: data.id\n            },\n            query: {\n                skip: data.skip,\n                take: data.take\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getMediaTypeByIdCompositionReferences(data: $OpenApiTs['/umbraco/management/api/v1/media-type/{id}/composition-references']['get']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/media-type/{id}/composition-references']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/media-type/{id}/composition-references',\n            path: {\n                id: data.id\n            },\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @param data.requestBody\n     * @returns string Created\n     * @throws ApiError\n     */\n    public static postMediaTypeByIdCopy(data: $OpenApiTs['/umbraco/management/api/v1/media-type/{id}/copy']['post']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/media-type/{id}/copy']['post']['res'][201]> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/media-type/{id}/copy',\n            path: {\n                id: data.id\n            },\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Generated-Resource',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getMediaTypeByIdExport(data: $OpenApiTs['/umbraco/management/api/v1/media-type/{id}/export']['get']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/media-type/{id}/export']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/media-type/{id}/export',\n            path: {\n                id: data.id\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @param data.requestBody\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static putMediaTypeByIdImport(data: $OpenApiTs['/umbraco/management/api/v1/media-type/{id}/import']['put']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/media-type/{id}/import']['put']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'PUT',\n            url: '/umbraco/management/api/v1/media-type/{id}/import',\n            path: {\n                id: data.id\n            },\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @param data.requestBody\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static putMediaTypeByIdMove(data: $OpenApiTs['/umbraco/management/api/v1/media-type/{id}/move']['put']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/media-type/{id}/move']['put']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'PUT',\n            url: '/umbraco/management/api/v1/media-type/{id}/move',\n            path: {\n                id: data.id\n            },\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.skip\n     * @param data.take\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getMediaTypeAllowedAtRoot(data: $OpenApiTs['/umbraco/management/api/v1/media-type/allowed-at-root']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/media-type/allowed-at-root']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/media-type/allowed-at-root',\n            query: {\n                skip: data.skip,\n                take: data.take\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.requestBody\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static postMediaTypeAvailableCompositions(data: $OpenApiTs['/umbraco/management/api/v1/media-type/available-compositions']['post']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/media-type/available-compositions']['post']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/media-type/available-compositions',\n            body: data.requestBody,\n            mediaType: 'application/json',\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.requestBody\n     * @returns string Created\n     * @throws ApiError\n     */\n    public static postMediaTypeFolder(data: $OpenApiTs['/umbraco/management/api/v1/media-type/folder']['post']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/media-type/folder']['post']['res'][201]> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/media-type/folder',\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Generated-Resource',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getMediaTypeFolderById(data: $OpenApiTs['/umbraco/management/api/v1/media-type/folder/{id}']['get']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/media-type/folder/{id}']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/media-type/folder/{id}',\n            path: {\n                id: data.id\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static deleteMediaTypeFolderById(data: $OpenApiTs['/umbraco/management/api/v1/media-type/folder/{id}']['delete']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/media-type/folder/{id}']['delete']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'DELETE',\n            url: '/umbraco/management/api/v1/media-type/folder/{id}',\n            path: {\n                id: data.id\n            },\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @param data.requestBody\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static putMediaTypeFolderById(data: $OpenApiTs['/umbraco/management/api/v1/media-type/folder/{id}']['put']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/media-type/folder/{id}']['put']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'PUT',\n            url: '/umbraco/management/api/v1/media-type/folder/{id}',\n            path: {\n                id: data.id\n            },\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.requestBody\n     * @returns string Created\n     * @throws ApiError\n     */\n    public static postMediaTypeImport(data: $OpenApiTs['/umbraco/management/api/v1/media-type/import']['post']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/media-type/import']['post']['res'][201]> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/media-type/import',\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Generated-Resource',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.descendantId\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getTreeMediaTypeAncestors(data: $OpenApiTs['/umbraco/management/api/v1/tree/media-type/ancestors']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/tree/media-type/ancestors']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/tree/media-type/ancestors',\n            query: {\n                descendantId: data.descendantId\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.parentId\n     * @param data.skip\n     * @param data.take\n     * @param data.foldersOnly\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getTreeMediaTypeChildren(data: $OpenApiTs['/umbraco/management/api/v1/tree/media-type/children']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/tree/media-type/children']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/tree/media-type/children',\n            query: {\n                parentId: data.parentId,\n                skip: data.skip,\n                take: data.take,\n                foldersOnly: data.foldersOnly\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.skip\n     * @param data.take\n     * @param data.foldersOnly\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getTreeMediaTypeRoot(data: $OpenApiTs['/umbraco/management/api/v1/tree/media-type/root']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/tree/media-type/root']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/tree/media-type/root',\n            query: {\n                skip: data.skip,\n                take: data.take,\n                foldersOnly: data.foldersOnly\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n}\n\nexport class MediaService {\n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @param data.dataTypeId\n     * @param data.orderBy\n     * @param data.orderDirection\n     * @param data.filter\n     * @param data.skip\n     * @param data.take\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getCollectionMedia(data: $OpenApiTs['/umbraco/management/api/v1/collection/media']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/collection/media']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/collection/media',\n            query: {\n                id: data.id,\n                dataTypeId: data.dataTypeId,\n                orderBy: data.orderBy,\n                orderDirection: data.orderDirection,\n                filter: data.filter,\n                skip: data.skip,\n                take: data.take\n            },\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getItemMedia(data: $OpenApiTs['/umbraco/management/api/v1/item/media']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/item/media']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/item/media',\n            query: {\n                id: data.id\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.query\n     * @param data.skip\n     * @param data.take\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getItemMediaSearch(data: $OpenApiTs['/umbraco/management/api/v1/item/media/search']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/item/media/search']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/item/media/search',\n            query: {\n                query: data.query,\n                skip: data.skip,\n                take: data.take\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.requestBody\n     * @returns string Created\n     * @throws ApiError\n     */\n    public static postMedia(data: $OpenApiTs['/umbraco/management/api/v1/media']['post']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/media']['post']['res'][201]> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/media',\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Generated-Resource',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getMediaById(data: $OpenApiTs['/umbraco/management/api/v1/media/{id}']['get']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/media/{id}']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/media/{id}',\n            path: {\n                id: data.id\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static deleteMediaById(data: $OpenApiTs['/umbraco/management/api/v1/media/{id}']['delete']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/media/{id}']['delete']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'DELETE',\n            url: '/umbraco/management/api/v1/media/{id}',\n            path: {\n                id: data.id\n            },\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @param data.requestBody\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static putMediaById(data: $OpenApiTs['/umbraco/management/api/v1/media/{id}']['put']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/media/{id}']['put']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'PUT',\n            url: '/umbraco/management/api/v1/media/{id}',\n            path: {\n                id: data.id\n            },\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @param data.orderDirection\n     * @param data.sinceDate\n     * @param data.skip\n     * @param data.take\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getMediaByIdAuditLog(data: $OpenApiTs['/umbraco/management/api/v1/media/{id}/audit-log']['get']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/media/{id}/audit-log']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/media/{id}/audit-log',\n            path: {\n                id: data.id\n            },\n            query: {\n                orderDirection: data.orderDirection,\n                sinceDate: data.sinceDate,\n                skip: data.skip,\n                take: data.take\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @param data.requestBody\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static putMediaByIdMove(data: $OpenApiTs['/umbraco/management/api/v1/media/{id}/move']['put']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/media/{id}/move']['put']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'PUT',\n            url: '/umbraco/management/api/v1/media/{id}/move',\n            path: {\n                id: data.id\n            },\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static putMediaByIdMoveToRecycleBin(data: $OpenApiTs['/umbraco/management/api/v1/media/{id}/move-to-recycle-bin']['put']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/media/{id}/move-to-recycle-bin']['put']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'PUT',\n            url: '/umbraco/management/api/v1/media/{id}/move-to-recycle-bin',\n            path: {\n                id: data.id\n            },\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @param data.skip\n     * @param data.take\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getMediaByIdReferencedBy(data: $OpenApiTs['/umbraco/management/api/v1/media/{id}/referenced-by']['get']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/media/{id}/referenced-by']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/media/{id}/referenced-by',\n            path: {\n                id: data.id\n            },\n            query: {\n                skip: data.skip,\n                take: data.take\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @param data.skip\n     * @param data.take\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getMediaByIdReferencedDescendants(data: $OpenApiTs['/umbraco/management/api/v1/media/{id}/referenced-descendants']['get']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/media/{id}/referenced-descendants']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/media/{id}/referenced-descendants',\n            path: {\n                id: data.id\n            },\n            query: {\n                skip: data.skip,\n                take: data.take\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @param data.requestBody\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static putMediaByIdValidate(data: $OpenApiTs['/umbraco/management/api/v1/media/{id}/validate']['put']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/media/{id}/validate']['put']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'PUT',\n            url: '/umbraco/management/api/v1/media/{id}/validate',\n            path: {\n                id: data.id\n            },\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @param data.skip\n     * @param data.take\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getMediaAreReferenced(data: $OpenApiTs['/umbraco/management/api/v1/media/are-referenced']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/media/are-referenced']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/media/are-referenced',\n            query: {\n                id: data.id,\n                skip: data.skip,\n                take: data.take\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getMediaConfiguration(): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/media/configuration']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/media/configuration',\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.requestBody\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static putMediaSort(data: $OpenApiTs['/umbraco/management/api/v1/media/sort']['put']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/media/sort']['put']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'PUT',\n            url: '/umbraco/management/api/v1/media/sort',\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getMediaUrls(data: $OpenApiTs['/umbraco/management/api/v1/media/urls']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/media/urls']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/media/urls',\n            query: {\n                id: data.id\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.requestBody\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static postMediaValidate(data: $OpenApiTs['/umbraco/management/api/v1/media/validate']['post']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/media/validate']['post']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/media/validate',\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static deleteRecycleBinMedia(): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/recycle-bin/media']['delete']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'DELETE',\n            url: '/umbraco/management/api/v1/recycle-bin/media',\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static deleteRecycleBinMediaById(data: $OpenApiTs['/umbraco/management/api/v1/recycle-bin/media/{id}']['delete']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/recycle-bin/media/{id}']['delete']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'DELETE',\n            url: '/umbraco/management/api/v1/recycle-bin/media/{id}',\n            path: {\n                id: data.id\n            },\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getRecycleBinMediaByIdOriginalParent(data: $OpenApiTs['/umbraco/management/api/v1/recycle-bin/media/{id}/original-parent']['get']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/recycle-bin/media/{id}/original-parent']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/recycle-bin/media/{id}/original-parent',\n            path: {\n                id: data.id\n            },\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @param data.requestBody\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static putRecycleBinMediaByIdRestore(data: $OpenApiTs['/umbraco/management/api/v1/recycle-bin/media/{id}/restore']['put']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/recycle-bin/media/{id}/restore']['put']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'PUT',\n            url: '/umbraco/management/api/v1/recycle-bin/media/{id}/restore',\n            path: {\n                id: data.id\n            },\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.parentId\n     * @param data.skip\n     * @param data.take\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getRecycleBinMediaChildren(data: $OpenApiTs['/umbraco/management/api/v1/recycle-bin/media/children']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/recycle-bin/media/children']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/recycle-bin/media/children',\n            query: {\n                parentId: data.parentId,\n                skip: data.skip,\n                take: data.take\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.skip\n     * @param data.take\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getRecycleBinMediaRoot(data: $OpenApiTs['/umbraco/management/api/v1/recycle-bin/media/root']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/recycle-bin/media/root']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/recycle-bin/media/root',\n            query: {\n                skip: data.skip,\n                take: data.take\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.descendantId\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getTreeMediaAncestors(data: $OpenApiTs['/umbraco/management/api/v1/tree/media/ancestors']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/tree/media/ancestors']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/tree/media/ancestors',\n            query: {\n                descendantId: data.descendantId\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.parentId\n     * @param data.skip\n     * @param data.take\n     * @param data.dataTypeId\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getTreeMediaChildren(data: $OpenApiTs['/umbraco/management/api/v1/tree/media/children']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/tree/media/children']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/tree/media/children',\n            query: {\n                parentId: data.parentId,\n                skip: data.skip,\n                take: data.take,\n                dataTypeId: data.dataTypeId\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.skip\n     * @param data.take\n     * @param data.dataTypeId\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getTreeMediaRoot(data: $OpenApiTs['/umbraco/management/api/v1/tree/media/root']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/tree/media/root']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/tree/media/root',\n            query: {\n                skip: data.skip,\n                take: data.take,\n                dataTypeId: data.dataTypeId\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n}\n\nexport class MemberGroupService {\n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getItemMemberGroup(data: $OpenApiTs['/umbraco/management/api/v1/item/member-group']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/item/member-group']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/item/member-group',\n            query: {\n                id: data.id\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.skip\n     * @param data.take\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getMemberGroup(data: $OpenApiTs['/umbraco/management/api/v1/member-group']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/member-group']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/member-group',\n            query: {\n                skip: data.skip,\n                take: data.take\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.requestBody\n     * @returns string Created\n     * @throws ApiError\n     */\n    public static postMemberGroup(data: $OpenApiTs['/umbraco/management/api/v1/member-group']['post']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/member-group']['post']['res'][201]> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/member-group',\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Generated-Resource',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getMemberGroupById(data: $OpenApiTs['/umbraco/management/api/v1/member-group/{id}']['get']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/member-group/{id}']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/member-group/{id}',\n            path: {\n                id: data.id\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static deleteMemberGroupById(data: $OpenApiTs['/umbraco/management/api/v1/member-group/{id}']['delete']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/member-group/{id}']['delete']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'DELETE',\n            url: '/umbraco/management/api/v1/member-group/{id}',\n            path: {\n                id: data.id\n            },\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @param data.requestBody\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static putMemberGroupById(data: $OpenApiTs['/umbraco/management/api/v1/member-group/{id}']['put']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/member-group/{id}']['put']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'PUT',\n            url: '/umbraco/management/api/v1/member-group/{id}',\n            path: {\n                id: data.id\n            },\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.skip\n     * @param data.take\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getTreeMemberGroupRoot(data: $OpenApiTs['/umbraco/management/api/v1/tree/member-group/root']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/tree/member-group/root']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/tree/member-group/root',\n            query: {\n                skip: data.skip,\n                take: data.take\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n}\n\nexport class MemberTypeService {\n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getItemMemberType(data: $OpenApiTs['/umbraco/management/api/v1/item/member-type']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/item/member-type']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/item/member-type',\n            query: {\n                id: data.id\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.query\n     * @param data.skip\n     * @param data.take\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getItemMemberTypeSearch(data: $OpenApiTs['/umbraco/management/api/v1/item/member-type/search']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/item/member-type/search']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/item/member-type/search',\n            query: {\n                query: data.query,\n                skip: data.skip,\n                take: data.take\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.requestBody\n     * @returns string Created\n     * @throws ApiError\n     */\n    public static postMemberType(data: $OpenApiTs['/umbraco/management/api/v1/member-type']['post']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/member-type']['post']['res'][201]> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/member-type',\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Generated-Resource',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getMemberTypeById(data: $OpenApiTs['/umbraco/management/api/v1/member-type/{id}']['get']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/member-type/{id}']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/member-type/{id}',\n            path: {\n                id: data.id\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static deleteMemberTypeById(data: $OpenApiTs['/umbraco/management/api/v1/member-type/{id}']['delete']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/member-type/{id}']['delete']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'DELETE',\n            url: '/umbraco/management/api/v1/member-type/{id}',\n            path: {\n                id: data.id\n            },\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @param data.requestBody\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static putMemberTypeById(data: $OpenApiTs['/umbraco/management/api/v1/member-type/{id}']['put']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/member-type/{id}']['put']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'PUT',\n            url: '/umbraco/management/api/v1/member-type/{id}',\n            path: {\n                id: data.id\n            },\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getMemberTypeByIdCompositionReferences(data: $OpenApiTs['/umbraco/management/api/v1/member-type/{id}/composition-references']['get']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/member-type/{id}/composition-references']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/member-type/{id}/composition-references',\n            path: {\n                id: data.id\n            },\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns string Created\n     * @throws ApiError\n     */\n    public static postMemberTypeByIdCopy(data: $OpenApiTs['/umbraco/management/api/v1/member-type/{id}/copy']['post']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/member-type/{id}/copy']['post']['res'][201]> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/member-type/{id}/copy',\n            path: {\n                id: data.id\n            },\n            responseHeader: 'Umb-Generated-Resource',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.requestBody\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static postMemberTypeAvailableCompositions(data: $OpenApiTs['/umbraco/management/api/v1/member-type/available-compositions']['post']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/member-type/available-compositions']['post']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/member-type/available-compositions',\n            body: data.requestBody,\n            mediaType: 'application/json',\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.skip\n     * @param data.take\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getTreeMemberTypeRoot(data: $OpenApiTs['/umbraco/management/api/v1/tree/member-type/root']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/tree/member-type/root']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/tree/member-type/root',\n            query: {\n                skip: data.skip,\n                take: data.take\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n}\n\nexport class MemberService {\n    /**\n     * @param data The data for the request.\n     * @param data.memberTypeId\n     * @param data.memberGroupName\n     * @param data.isApproved\n     * @param data.isLockedOut\n     * @param data.orderBy\n     * @param data.orderDirection\n     * @param data.filter\n     * @param data.skip\n     * @param data.take\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getFilterMember(data: $OpenApiTs['/umbraco/management/api/v1/filter/member']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/filter/member']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/filter/member',\n            query: {\n                memberTypeId: data.memberTypeId,\n                memberGroupName: data.memberGroupName,\n                isApproved: data.isApproved,\n                isLockedOut: data.isLockedOut,\n                orderBy: data.orderBy,\n                orderDirection: data.orderDirection,\n                filter: data.filter,\n                skip: data.skip,\n                take: data.take\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getItemMember(data: $OpenApiTs['/umbraco/management/api/v1/item/member']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/item/member']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/item/member',\n            query: {\n                id: data.id\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.query\n     * @param data.skip\n     * @param data.take\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getItemMemberSearch(data: $OpenApiTs['/umbraco/management/api/v1/item/member/search']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/item/member/search']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/item/member/search',\n            query: {\n                query: data.query,\n                skip: data.skip,\n                take: data.take\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.requestBody\n     * @returns string Created\n     * @throws ApiError\n     */\n    public static postMember(data: $OpenApiTs['/umbraco/management/api/v1/member']['post']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/member']['post']['res'][201]> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/member',\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Generated-Resource',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getMemberById(data: $OpenApiTs['/umbraco/management/api/v1/member/{id}']['get']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/member/{id}']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/member/{id}',\n            path: {\n                id: data.id\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static deleteMemberById(data: $OpenApiTs['/umbraco/management/api/v1/member/{id}']['delete']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/member/{id}']['delete']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'DELETE',\n            url: '/umbraco/management/api/v1/member/{id}',\n            path: {\n                id: data.id\n            },\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @param data.requestBody\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static putMemberById(data: $OpenApiTs['/umbraco/management/api/v1/member/{id}']['put']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/member/{id}']['put']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'PUT',\n            url: '/umbraco/management/api/v1/member/{id}',\n            path: {\n                id: data.id\n            },\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @param data.requestBody\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static putMemberByIdValidate(data: $OpenApiTs['/umbraco/management/api/v1/member/{id}/validate']['put']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/member/{id}/validate']['put']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'PUT',\n            url: '/umbraco/management/api/v1/member/{id}/validate',\n            path: {\n                id: data.id\n            },\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getMemberConfiguration(): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/member/configuration']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/member/configuration',\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.requestBody\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static postMemberValidate(data: $OpenApiTs['/umbraco/management/api/v1/member/validate']['post']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/member/validate']['post']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/member/validate',\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n}\n\nexport class ModelsBuilderService {\n    /**\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static postModelsBuilderBuild(): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/models-builder/build']['post']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/models-builder/build',\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                428: 'Precondition Required'\n            }\n        });\n    }\n    \n    /**\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getModelsBuilderDashboard(): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/models-builder/dashboard']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/models-builder/dashboard',\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getModelsBuilderStatus(): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/models-builder/status']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/models-builder/status',\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n}\n\nexport class ObjectTypesService {\n    /**\n     * @param data The data for the request.\n     * @param data.skip\n     * @param data.take\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getObjectTypes(data: $OpenApiTs['/umbraco/management/api/v1/object-types']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/object-types']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/object-types',\n            query: {\n                skip: data.skip,\n                take: data.take\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token'\n            }\n        });\n    }\n    \n}\n\nexport class OEmbedService {\n    /**\n     * @param data The data for the request.\n     * @param data.url\n     * @param data.maxWidth\n     * @param data.maxHeight\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getOembedQuery(data: $OpenApiTs['/umbraco/management/api/v1/oembed/query']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/oembed/query']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/oembed/query',\n            query: {\n                url: data.url,\n                maxWidth: data.maxWidth,\n                maxHeight: data.maxHeight\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n}\n\nexport class PackageService {\n    /**\n     * @param data The data for the request.\n     * @param data.name\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static postPackageByNameRunMigration(data: $OpenApiTs['/umbraco/management/api/v1/package/{name}/run-migration']['post']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/package/{name}/run-migration']['post']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/package/{name}/run-migration',\n            path: {\n                name: data.name\n            },\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found',\n                409: 'Conflict'\n            }\n        });\n    }\n    \n    /**\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getPackageConfiguration(): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/package/configuration']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/package/configuration',\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.skip\n     * @param data.take\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getPackageCreated(data: $OpenApiTs['/umbraco/management/api/v1/package/created']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/package/created']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/package/created',\n            query: {\n                skip: data.skip,\n                take: data.take\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.requestBody\n     * @returns string Created\n     * @throws ApiError\n     */\n    public static postPackageCreated(data: $OpenApiTs['/umbraco/management/api/v1/package/created']['post']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/package/created']['post']['res'][201]> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/package/created',\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Generated-Resource',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getPackageCreatedById(data: $OpenApiTs['/umbraco/management/api/v1/package/created/{id}']['get']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/package/created/{id}']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/package/created/{id}',\n            path: {\n                id: data.id\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static deletePackageCreatedById(data: $OpenApiTs['/umbraco/management/api/v1/package/created/{id}']['delete']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/package/created/{id}']['delete']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'DELETE',\n            url: '/umbraco/management/api/v1/package/created/{id}',\n            path: {\n                id: data.id\n            },\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @param data.requestBody\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static putPackageCreatedById(data: $OpenApiTs['/umbraco/management/api/v1/package/created/{id}']['put']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/package/created/{id}']['put']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'PUT',\n            url: '/umbraco/management/api/v1/package/created/{id}',\n            path: {\n                id: data.id\n            },\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getPackageCreatedByIdDownload(data: $OpenApiTs['/umbraco/management/api/v1/package/created/{id}/download']['get']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/package/created/{id}/download']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/package/created/{id}/download',\n            path: {\n                id: data.id\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.skip\n     * @param data.take\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getPackageMigrationStatus(data: $OpenApiTs['/umbraco/management/api/v1/package/migration-status']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/package/migration-status']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/package/migration-status',\n            query: {\n                skip: data.skip,\n                take: data.take\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n}\n\nexport class PartialViewService {\n    /**\n     * @param data The data for the request.\n     * @param data.path\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getItemPartialView(data: $OpenApiTs['/umbraco/management/api/v1/item/partial-view']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/item/partial-view']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/item/partial-view',\n            query: {\n                path: data.path\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.requestBody\n     * @returns string Created\n     * @throws ApiError\n     */\n    public static postPartialView(data: $OpenApiTs['/umbraco/management/api/v1/partial-view']['post']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/partial-view']['post']['res'][201]> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/partial-view',\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Generated-Resource',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.path\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getPartialViewByPath(data: $OpenApiTs['/umbraco/management/api/v1/partial-view/{path}']['get']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/partial-view/{path}']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/partial-view/{path}',\n            path: {\n                path: data.path\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.path\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static deletePartialViewByPath(data: $OpenApiTs['/umbraco/management/api/v1/partial-view/{path}']['delete']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/partial-view/{path}']['delete']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'DELETE',\n            url: '/umbraco/management/api/v1/partial-view/{path}',\n            path: {\n                path: data.path\n            },\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.path\n     * @param data.requestBody\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static putPartialViewByPath(data: $OpenApiTs['/umbraco/management/api/v1/partial-view/{path}']['put']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/partial-view/{path}']['put']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'PUT',\n            url: '/umbraco/management/api/v1/partial-view/{path}',\n            path: {\n                path: data.path\n            },\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.path\n     * @param data.requestBody\n     * @returns string Created\n     * @throws ApiError\n     */\n    public static putPartialViewByPathRename(data: $OpenApiTs['/umbraco/management/api/v1/partial-view/{path}/rename']['put']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/partial-view/{path}/rename']['put']['res'][201]> {\n        return __request(OpenAPI, {\n            method: 'PUT',\n            url: '/umbraco/management/api/v1/partial-view/{path}/rename',\n            path: {\n                path: data.path\n            },\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Generated-Resource',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.requestBody\n     * @returns string Created\n     * @throws ApiError\n     */\n    public static postPartialViewFolder(data: $OpenApiTs['/umbraco/management/api/v1/partial-view/folder']['post']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/partial-view/folder']['post']['res'][201]> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/partial-view/folder',\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Generated-Resource',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.path\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getPartialViewFolderByPath(data: $OpenApiTs['/umbraco/management/api/v1/partial-view/folder/{path}']['get']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/partial-view/folder/{path}']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/partial-view/folder/{path}',\n            path: {\n                path: data.path\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.path\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static deletePartialViewFolderByPath(data: $OpenApiTs['/umbraco/management/api/v1/partial-view/folder/{path}']['delete']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/partial-view/folder/{path}']['delete']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'DELETE',\n            url: '/umbraco/management/api/v1/partial-view/folder/{path}',\n            path: {\n                path: data.path\n            },\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.skip\n     * @param data.take\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getPartialViewSnippet(data: $OpenApiTs['/umbraco/management/api/v1/partial-view/snippet']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/partial-view/snippet']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/partial-view/snippet',\n            query: {\n                skip: data.skip,\n                take: data.take\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getPartialViewSnippetById(data: $OpenApiTs['/umbraco/management/api/v1/partial-view/snippet/{id}']['get']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/partial-view/snippet/{id}']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/partial-view/snippet/{id}',\n            path: {\n                id: data.id\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.descendantPath\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getTreePartialViewAncestors(data: $OpenApiTs['/umbraco/management/api/v1/tree/partial-view/ancestors']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/tree/partial-view/ancestors']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/tree/partial-view/ancestors',\n            query: {\n                descendantPath: data.descendantPath\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.parentPath\n     * @param data.skip\n     * @param data.take\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getTreePartialViewChildren(data: $OpenApiTs['/umbraco/management/api/v1/tree/partial-view/children']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/tree/partial-view/children']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/tree/partial-view/children',\n            query: {\n                parentPath: data.parentPath,\n                skip: data.skip,\n                take: data.take\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.skip\n     * @param data.take\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getTreePartialViewRoot(data: $OpenApiTs['/umbraco/management/api/v1/tree/partial-view/root']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/tree/partial-view/root']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/tree/partial-view/root',\n            query: {\n                skip: data.skip,\n                take: data.take\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n}\n\nexport class PreviewService {\n    /**\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static deletePreview(): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/preview']['delete']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'DELETE',\n            url: '/umbraco/management/api/v1/preview',\n            responseHeader: 'Umb-Notifications'\n        });\n    }\n    \n    /**\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static postPreview(): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/preview']['post']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/preview',\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                401: 'The resource is protected and requires an authentication token'\n            }\n        });\n    }\n    \n}\n\nexport class ProfilingService {\n    /**\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getProfilingStatus(): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/profiling/status']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/profiling/status',\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.requestBody\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static putProfilingStatus(data: $OpenApiTs['/umbraco/management/api/v1/profiling/status']['put']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/profiling/status']['put']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'PUT',\n            url: '/umbraco/management/api/v1/profiling/status',\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n}\n\nexport class PropertyTypeService {\n    /**\n     * @param data The data for the request.\n     * @param data.contentTypeId\n     * @param data.propertyAlias\n     * @returns boolean OK\n     * @throws ApiError\n     */\n    public static getPropertyTypeIsUsed(data: $OpenApiTs['/umbraco/management/api/v1/property-type/is-used']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/property-type/is-used']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/property-type/is-used',\n            query: {\n                contentTypeId: data.contentTypeId,\n                propertyAlias: data.propertyAlias\n            },\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n}\n\nexport class PublishedCacheService {\n    /**\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static postPublishedCacheCollect(): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/published-cache/collect']['post']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/published-cache/collect',\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                401: 'The resource is protected and requires an authentication token'\n            }\n        });\n    }\n    \n    /**\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static postPublishedCacheRebuild(): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/published-cache/rebuild']['post']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/published-cache/rebuild',\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                401: 'The resource is protected and requires an authentication token'\n            }\n        });\n    }\n    \n    /**\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static postPublishedCacheReload(): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/published-cache/reload']['post']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/published-cache/reload',\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                401: 'The resource is protected and requires an authentication token'\n            }\n        });\n    }\n    \n    /**\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static getPublishedCacheStatus(): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/published-cache/status']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/published-cache/status',\n            errors: {\n                401: 'The resource is protected and requires an authentication token'\n            }\n        });\n    }\n    \n}\n\nexport class RedirectManagementService {\n    /**\n     * @param data The data for the request.\n     * @param data.filter\n     * @param data.skip\n     * @param data.take\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getRedirectManagement(data: $OpenApiTs['/umbraco/management/api/v1/redirect-management']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/redirect-management']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/redirect-management',\n            query: {\n                filter: data.filter,\n                skip: data.skip,\n                take: data.take\n            },\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @param data.skip\n     * @param data.take\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getRedirectManagementById(data: $OpenApiTs['/umbraco/management/api/v1/redirect-management/{id}']['get']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/redirect-management/{id}']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/redirect-management/{id}',\n            path: {\n                id: data.id\n            },\n            query: {\n                skip: data.skip,\n                take: data.take\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static deleteRedirectManagementById(data: $OpenApiTs['/umbraco/management/api/v1/redirect-management/{id}']['delete']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/redirect-management/{id}']['delete']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'DELETE',\n            url: '/umbraco/management/api/v1/redirect-management/{id}',\n            path: {\n                id: data.id\n            },\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getRedirectManagementStatus(): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/redirect-management/status']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/redirect-management/status',\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.status\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static postRedirectManagementStatus(data: $OpenApiTs['/umbraco/management/api/v1/redirect-management/status']['post']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/redirect-management/status']['post']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/redirect-management/status',\n            query: {\n                status: data.status\n            },\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n}\n\nexport class RelationTypeService {\n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getItemRelationType(data: $OpenApiTs['/umbraco/management/api/v1/item/relation-type']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/item/relation-type']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/item/relation-type',\n            query: {\n                id: data.id\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.skip\n     * @param data.take\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getRelationType(data: $OpenApiTs['/umbraco/management/api/v1/relation-type']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/relation-type']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/relation-type',\n            query: {\n                skip: data.skip,\n                take: data.take\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getRelationTypeById(data: $OpenApiTs['/umbraco/management/api/v1/relation-type/{id}']['get']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/relation-type/{id}']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/relation-type/{id}',\n            path: {\n                id: data.id\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n}\n\nexport class RelationService {\n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @param data.skip\n     * @param data.take\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getRelationTypeById(data: $OpenApiTs['/umbraco/management/api/v1/relation/type/{id}']['get']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/relation/type/{id}']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/relation/type/{id}',\n            path: {\n                id: data.id\n            },\n            query: {\n                skip: data.skip,\n                take: data.take\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n}\n\nexport class ScriptService {\n    /**\n     * @param data The data for the request.\n     * @param data.path\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getItemScript(data: $OpenApiTs['/umbraco/management/api/v1/item/script']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/item/script']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/item/script',\n            query: {\n                path: data.path\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.requestBody\n     * @returns string Created\n     * @throws ApiError\n     */\n    public static postScript(data: $OpenApiTs['/umbraco/management/api/v1/script']['post']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/script']['post']['res'][201]> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/script',\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Generated-Resource',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.path\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getScriptByPath(data: $OpenApiTs['/umbraco/management/api/v1/script/{path}']['get']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/script/{path}']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/script/{path}',\n            path: {\n                path: data.path\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.path\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static deleteScriptByPath(data: $OpenApiTs['/umbraco/management/api/v1/script/{path}']['delete']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/script/{path}']['delete']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'DELETE',\n            url: '/umbraco/management/api/v1/script/{path}',\n            path: {\n                path: data.path\n            },\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.path\n     * @param data.requestBody\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static putScriptByPath(data: $OpenApiTs['/umbraco/management/api/v1/script/{path}']['put']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/script/{path}']['put']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'PUT',\n            url: '/umbraco/management/api/v1/script/{path}',\n            path: {\n                path: data.path\n            },\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.path\n     * @param data.requestBody\n     * @returns string Created\n     * @throws ApiError\n     */\n    public static putScriptByPathRename(data: $OpenApiTs['/umbraco/management/api/v1/script/{path}/rename']['put']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/script/{path}/rename']['put']['res'][201]> {\n        return __request(OpenAPI, {\n            method: 'PUT',\n            url: '/umbraco/management/api/v1/script/{path}/rename',\n            path: {\n                path: data.path\n            },\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Generated-Resource',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.requestBody\n     * @returns string Created\n     * @throws ApiError\n     */\n    public static postScriptFolder(data: $OpenApiTs['/umbraco/management/api/v1/script/folder']['post']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/script/folder']['post']['res'][201]> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/script/folder',\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Generated-Resource',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.path\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getScriptFolderByPath(data: $OpenApiTs['/umbraco/management/api/v1/script/folder/{path}']['get']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/script/folder/{path}']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/script/folder/{path}',\n            path: {\n                path: data.path\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.path\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static deleteScriptFolderByPath(data: $OpenApiTs['/umbraco/management/api/v1/script/folder/{path}']['delete']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/script/folder/{path}']['delete']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'DELETE',\n            url: '/umbraco/management/api/v1/script/folder/{path}',\n            path: {\n                path: data.path\n            },\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.descendantPath\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getTreeScriptAncestors(data: $OpenApiTs['/umbraco/management/api/v1/tree/script/ancestors']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/tree/script/ancestors']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/tree/script/ancestors',\n            query: {\n                descendantPath: data.descendantPath\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.parentPath\n     * @param data.skip\n     * @param data.take\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getTreeScriptChildren(data: $OpenApiTs['/umbraco/management/api/v1/tree/script/children']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/tree/script/children']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/tree/script/children',\n            query: {\n                parentPath: data.parentPath,\n                skip: data.skip,\n                take: data.take\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.skip\n     * @param data.take\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getTreeScriptRoot(data: $OpenApiTs['/umbraco/management/api/v1/tree/script/root']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/tree/script/root']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/tree/script/root',\n            query: {\n                skip: data.skip,\n                take: data.take\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n}\n\nexport class SearcherService {\n    /**\n     * @param data The data for the request.\n     * @param data.skip\n     * @param data.take\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getSearcher(data: $OpenApiTs['/umbraco/management/api/v1/searcher']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/searcher']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/searcher',\n            query: {\n                skip: data.skip,\n                take: data.take\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.searcherName\n     * @param data.term\n     * @param data.skip\n     * @param data.take\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getSearcherBySearcherNameQuery(data: $OpenApiTs['/umbraco/management/api/v1/searcher/{searcherName}/query']['get']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/searcher/{searcherName}/query']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/searcher/{searcherName}/query',\n            path: {\n                searcherName: data.searcherName\n            },\n            query: {\n                term: data.term,\n                skip: data.skip,\n                take: data.take\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n}\n\nexport class SecurityService {\n    /**\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getSecurityConfiguration(): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/security/configuration']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/security/configuration',\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.requestBody\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static postSecurityForgotPassword(data: $OpenApiTs['/umbraco/management/api/v1/security/forgot-password']['post']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/security/forgot-password']['post']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/security/forgot-password',\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.requestBody\n     * @returns string No Content\n     * @throws ApiError\n     */\n    public static postSecurityForgotPasswordReset(data: $OpenApiTs['/umbraco/management/api/v1/security/forgot-password/reset']['post']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/security/forgot-password/reset']['post']['res'][204]> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/security/forgot-password/reset',\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.requestBody\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static postSecurityForgotPasswordVerify(data: $OpenApiTs['/umbraco/management/api/v1/security/forgot-password/verify']['post']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/security/forgot-password/verify']['post']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/security/forgot-password/verify',\n            body: data.requestBody,\n            mediaType: 'application/json',\n            errors: {\n                400: 'Bad Request',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n}\n\nexport class SegmentService {\n    /**\n     * @param data The data for the request.\n     * @param data.skip\n     * @param data.take\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getSegment(data: $OpenApiTs['/umbraco/management/api/v1/segment']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/segment']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/segment',\n            query: {\n                skip: data.skip,\n                take: data.take\n            },\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n}\n\nexport class ServerService {\n    /**\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getServerConfiguration(): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/server/configuration']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/server/configuration',\n            errors: {\n                401: 'The resource is protected and requires an authentication token'\n            }\n        });\n    }\n    \n    /**\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getServerInformation(): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/server/information']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/server/information',\n            errors: {\n                401: 'The resource is protected and requires an authentication token'\n            }\n        });\n    }\n    \n    /**\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getServerStatus(): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/server/status']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/server/status',\n            errors: {\n                400: 'Bad Request'\n            }\n        });\n    }\n    \n    /**\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getServerTroubleshooting(): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/server/troubleshooting']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/server/troubleshooting',\n            errors: {\n                401: 'The resource is protected and requires an authentication token'\n            }\n        });\n    }\n    \n}\n\nexport class StaticFileService {\n    /**\n     * @param data The data for the request.\n     * @param data.path\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getItemStaticFile(data: $OpenApiTs['/umbraco/management/api/v1/item/static-file']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/item/static-file']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/item/static-file',\n            query: {\n                path: data.path\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.descendantPath\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getTreeStaticFileAncestors(data: $OpenApiTs['/umbraco/management/api/v1/tree/static-file/ancestors']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/tree/static-file/ancestors']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/tree/static-file/ancestors',\n            query: {\n                descendantPath: data.descendantPath\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.parentPath\n     * @param data.skip\n     * @param data.take\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getTreeStaticFileChildren(data: $OpenApiTs['/umbraco/management/api/v1/tree/static-file/children']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/tree/static-file/children']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/tree/static-file/children',\n            query: {\n                parentPath: data.parentPath,\n                skip: data.skip,\n                take: data.take\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.skip\n     * @param data.take\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getTreeStaticFileRoot(data: $OpenApiTs['/umbraco/management/api/v1/tree/static-file/root']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/tree/static-file/root']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/tree/static-file/root',\n            query: {\n                skip: data.skip,\n                take: data.take\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token'\n            }\n        });\n    }\n    \n}\n\nexport class StylesheetService {\n    /**\n     * @param data The data for the request.\n     * @param data.path\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getItemStylesheet(data: $OpenApiTs['/umbraco/management/api/v1/item/stylesheet']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/item/stylesheet']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/item/stylesheet',\n            query: {\n                path: data.path\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.requestBody\n     * @returns string Created\n     * @throws ApiError\n     */\n    public static postStylesheet(data: $OpenApiTs['/umbraco/management/api/v1/stylesheet']['post']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/stylesheet']['post']['res'][201]> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/stylesheet',\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Generated-Resource',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.path\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getStylesheetByPath(data: $OpenApiTs['/umbraco/management/api/v1/stylesheet/{path}']['get']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/stylesheet/{path}']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/stylesheet/{path}',\n            path: {\n                path: data.path\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.path\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static deleteStylesheetByPath(data: $OpenApiTs['/umbraco/management/api/v1/stylesheet/{path}']['delete']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/stylesheet/{path}']['delete']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'DELETE',\n            url: '/umbraco/management/api/v1/stylesheet/{path}',\n            path: {\n                path: data.path\n            },\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.path\n     * @param data.requestBody\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static putStylesheetByPath(data: $OpenApiTs['/umbraco/management/api/v1/stylesheet/{path}']['put']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/stylesheet/{path}']['put']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'PUT',\n            url: '/umbraco/management/api/v1/stylesheet/{path}',\n            path: {\n                path: data.path\n            },\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.path\n     * @param data.requestBody\n     * @returns string Created\n     * @throws ApiError\n     */\n    public static putStylesheetByPathRename(data: $OpenApiTs['/umbraco/management/api/v1/stylesheet/{path}/rename']['put']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/stylesheet/{path}/rename']['put']['res'][201]> {\n        return __request(OpenAPI, {\n            method: 'PUT',\n            url: '/umbraco/management/api/v1/stylesheet/{path}/rename',\n            path: {\n                path: data.path\n            },\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Generated-Resource',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.requestBody\n     * @returns string Created\n     * @throws ApiError\n     */\n    public static postStylesheetFolder(data: $OpenApiTs['/umbraco/management/api/v1/stylesheet/folder']['post']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/stylesheet/folder']['post']['res'][201]> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/stylesheet/folder',\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Generated-Resource',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.path\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getStylesheetFolderByPath(data: $OpenApiTs['/umbraco/management/api/v1/stylesheet/folder/{path}']['get']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/stylesheet/folder/{path}']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/stylesheet/folder/{path}',\n            path: {\n                path: data.path\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.path\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static deleteStylesheetFolderByPath(data: $OpenApiTs['/umbraco/management/api/v1/stylesheet/folder/{path}']['delete']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/stylesheet/folder/{path}']['delete']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'DELETE',\n            url: '/umbraco/management/api/v1/stylesheet/folder/{path}',\n            path: {\n                path: data.path\n            },\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.descendantPath\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getTreeStylesheetAncestors(data: $OpenApiTs['/umbraco/management/api/v1/tree/stylesheet/ancestors']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/tree/stylesheet/ancestors']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/tree/stylesheet/ancestors',\n            query: {\n                descendantPath: data.descendantPath\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.parentPath\n     * @param data.skip\n     * @param data.take\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getTreeStylesheetChildren(data: $OpenApiTs['/umbraco/management/api/v1/tree/stylesheet/children']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/tree/stylesheet/children']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/tree/stylesheet/children',\n            query: {\n                parentPath: data.parentPath,\n                skip: data.skip,\n                take: data.take\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.skip\n     * @param data.take\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getTreeStylesheetRoot(data: $OpenApiTs['/umbraco/management/api/v1/tree/stylesheet/root']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/tree/stylesheet/root']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/tree/stylesheet/root',\n            query: {\n                skip: data.skip,\n                take: data.take\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n}\n\nexport class TagService {\n    /**\n     * @param data The data for the request.\n     * @param data.query\n     * @param data.tagGroup\n     * @param data.culture\n     * @param data.skip\n     * @param data.take\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getTag(data: $OpenApiTs['/umbraco/management/api/v1/tag']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/tag']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/tag',\n            query: {\n                query: data.query,\n                tagGroup: data.tagGroup,\n                culture: data.culture,\n                skip: data.skip,\n                take: data.take\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token'\n            }\n        });\n    }\n    \n}\n\nexport class TelemetryService {\n    /**\n     * @param data The data for the request.\n     * @param data.skip\n     * @param data.take\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getTelemetry(data: $OpenApiTs['/umbraco/management/api/v1/telemetry']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/telemetry']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/telemetry',\n            query: {\n                skip: data.skip,\n                take: data.take\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getTelemetryLevel(): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/telemetry/level']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/telemetry/level',\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.requestBody\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static postTelemetryLevel(data: $OpenApiTs['/umbraco/management/api/v1/telemetry/level']['post']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/telemetry/level']['post']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/telemetry/level',\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n}\n\nexport class TemplateService {\n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getItemTemplate(data: $OpenApiTs['/umbraco/management/api/v1/item/template']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/item/template']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/item/template',\n            query: {\n                id: data.id\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.query\n     * @param data.skip\n     * @param data.take\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getItemTemplateSearch(data: $OpenApiTs['/umbraco/management/api/v1/item/template/search']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/item/template/search']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/item/template/search',\n            query: {\n                query: data.query,\n                skip: data.skip,\n                take: data.take\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.requestBody\n     * @returns string Created\n     * @throws ApiError\n     */\n    public static postTemplate(data: $OpenApiTs['/umbraco/management/api/v1/template']['post']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/template']['post']['res'][201]> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/template',\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Generated-Resource',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getTemplateById(data: $OpenApiTs['/umbraco/management/api/v1/template/{id}']['get']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/template/{id}']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/template/{id}',\n            path: {\n                id: data.id\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static deleteTemplateById(data: $OpenApiTs['/umbraco/management/api/v1/template/{id}']['delete']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/template/{id}']['delete']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'DELETE',\n            url: '/umbraco/management/api/v1/template/{id}',\n            path: {\n                id: data.id\n            },\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @param data.requestBody\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static putTemplateById(data: $OpenApiTs['/umbraco/management/api/v1/template/{id}']['put']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/template/{id}']['put']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'PUT',\n            url: '/umbraco/management/api/v1/template/{id}',\n            path: {\n                id: data.id\n            },\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getTemplateConfiguration(): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/template/configuration']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/template/configuration',\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.requestBody\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static postTemplateQueryExecute(data: $OpenApiTs['/umbraco/management/api/v1/template/query/execute']['post']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/template/query/execute']['post']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/template/query/execute',\n            body: data.requestBody,\n            mediaType: 'application/json',\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getTemplateQuerySettings(): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/template/query/settings']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/template/query/settings',\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.descendantId\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getTreeTemplateAncestors(data: $OpenApiTs['/umbraco/management/api/v1/tree/template/ancestors']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/tree/template/ancestors']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/tree/template/ancestors',\n            query: {\n                descendantId: data.descendantId\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.parentId\n     * @param data.skip\n     * @param data.take\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getTreeTemplateChildren(data: $OpenApiTs['/umbraco/management/api/v1/tree/template/children']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/tree/template/children']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/tree/template/children',\n            query: {\n                parentId: data.parentId,\n                skip: data.skip,\n                take: data.take\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.skip\n     * @param data.take\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getTreeTemplateRoot(data: $OpenApiTs['/umbraco/management/api/v1/tree/template/root']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/tree/template/root']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/tree/template/root',\n            query: {\n                skip: data.skip,\n                take: data.take\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n}\n\nexport class TemporaryFileService {\n    /**\n     * @param data The data for the request.\n     * @param data.formData\n     * @returns string Created\n     * @throws ApiError\n     */\n    public static postTemporaryFile(data: $OpenApiTs['/umbraco/management/api/v1/temporary-file']['post']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/temporary-file']['post']['res'][201]> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/temporary-file',\n            formData: data.formData,\n            mediaType: 'multipart/form-data',\n            responseHeader: 'Umb-Generated-Resource',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getTemporaryFileById(data: $OpenApiTs['/umbraco/management/api/v1/temporary-file/{id}']['get']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/temporary-file/{id}']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/temporary-file/{id}',\n            path: {\n                id: data.id\n            },\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static deleteTemporaryFileById(data: $OpenApiTs['/umbraco/management/api/v1/temporary-file/{id}']['delete']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/temporary-file/{id}']['delete']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'DELETE',\n            url: '/umbraco/management/api/v1/temporary-file/{id}',\n            path: {\n                id: data.id\n            },\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getTemporaryFileConfiguration(): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/temporary-file/configuration']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/temporary-file/configuration',\n            errors: {\n                401: 'The resource is protected and requires an authentication token'\n            }\n        });\n    }\n    \n}\n\nexport class UpgradeService {\n    /**\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static postUpgradeAuthorize(): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/upgrade/authorize']['post']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/upgrade/authorize',\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                428: 'Precondition Required',\n                500: 'Internal Server Error'\n            }\n        });\n    }\n    \n    /**\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getUpgradeSettings(): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/upgrade/settings']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/upgrade/settings',\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                428: 'Precondition Required'\n            }\n        });\n    }\n    \n}\n\nexport class UserDataService {\n    /**\n     * @param data The data for the request.\n     * @param data.requestBody\n     * @returns string Created\n     * @throws ApiError\n     */\n    public static postUserData(data: $OpenApiTs['/umbraco/management/api/v1/user-data']['post']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/user-data']['post']['res'][201]> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/user-data',\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Generated-Resource',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.groups\n     * @param data.identifiers\n     * @param data.skip\n     * @param data.take\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getUserData(data: $OpenApiTs['/umbraco/management/api/v1/user-data']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/user-data']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/user-data',\n            query: {\n                groups: data.groups,\n                identifiers: data.identifiers,\n                skip: data.skip,\n                take: data.take\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.requestBody\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static putUserData(data: $OpenApiTs['/umbraco/management/api/v1/user-data']['put']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/user-data']['put']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'PUT',\n            url: '/umbraco/management/api/v1/user-data',\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getUserDataById(data: $OpenApiTs['/umbraco/management/api/v1/user-data/{id}']['get']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/user-data/{id}']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/user-data/{id}',\n            path: {\n                id: data.id\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n}\n\nexport class UserGroupService {\n    /**\n     * @param data The data for the request.\n     * @param data.skip\n     * @param data.take\n     * @param data.filter\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getFilterUserGroup(data: $OpenApiTs['/umbraco/management/api/v1/filter/user-group']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/filter/user-group']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/filter/user-group',\n            query: {\n                skip: data.skip,\n                take: data.take,\n                filter: data.filter\n            },\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getItemUserGroup(data: $OpenApiTs['/umbraco/management/api/v1/item/user-group']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/item/user-group']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/item/user-group',\n            query: {\n                id: data.id\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.requestBody\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static deleteUserGroup(data: $OpenApiTs['/umbraco/management/api/v1/user-group']['delete']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/user-group']['delete']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'DELETE',\n            url: '/umbraco/management/api/v1/user-group',\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.requestBody\n     * @returns string Created\n     * @throws ApiError\n     */\n    public static postUserGroup(data: $OpenApiTs['/umbraco/management/api/v1/user-group']['post']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/user-group']['post']['res'][201]> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/user-group',\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Generated-Resource',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.skip\n     * @param data.take\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getUserGroup(data: $OpenApiTs['/umbraco/management/api/v1/user-group']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/user-group']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/user-group',\n            query: {\n                skip: data.skip,\n                take: data.take\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getUserGroupById(data: $OpenApiTs['/umbraco/management/api/v1/user-group/{id}']['get']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/user-group/{id}']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/user-group/{id}',\n            path: {\n                id: data.id\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static deleteUserGroupById(data: $OpenApiTs['/umbraco/management/api/v1/user-group/{id}']['delete']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/user-group/{id}']['delete']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'DELETE',\n            url: '/umbraco/management/api/v1/user-group/{id}',\n            path: {\n                id: data.id\n            },\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @param data.requestBody\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static putUserGroupById(data: $OpenApiTs['/umbraco/management/api/v1/user-group/{id}']['put']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/user-group/{id}']['put']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'PUT',\n            url: '/umbraco/management/api/v1/user-group/{id}',\n            path: {\n                id: data.id\n            },\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @param data.requestBody\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static deleteUserGroupByIdUsers(data: $OpenApiTs['/umbraco/management/api/v1/user-group/{id}/users']['delete']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/user-group/{id}/users']['delete']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'DELETE',\n            url: '/umbraco/management/api/v1/user-group/{id}/users',\n            path: {\n                id: data.id\n            },\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @param data.requestBody\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static postUserGroupByIdUsers(data: $OpenApiTs['/umbraco/management/api/v1/user-group/{id}/users']['post']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/user-group/{id}/users']['post']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/user-group/{id}/users',\n            path: {\n                id: data.id\n            },\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n}\n\nexport class UserService {\n    /**\n     * @param data The data for the request.\n     * @param data.skip\n     * @param data.take\n     * @param data.orderBy\n     * @param data.orderDirection\n     * @param data.userGroupIds\n     * @param data.userStates\n     * @param data.filter\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getFilterUser(data: $OpenApiTs['/umbraco/management/api/v1/filter/user']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/filter/user']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/filter/user',\n            query: {\n                skip: data.skip,\n                take: data.take,\n                orderBy: data.orderBy,\n                orderDirection: data.orderDirection,\n                userGroupIds: data.userGroupIds,\n                userStates: data.userStates,\n                filter: data.filter\n            },\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getItemUser(data: $OpenApiTs['/umbraco/management/api/v1/item/user']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/item/user']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/item/user',\n            query: {\n                id: data.id\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.requestBody\n     * @returns string Created\n     * @throws ApiError\n     */\n    public static postUser(data: $OpenApiTs['/umbraco/management/api/v1/user']['post']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/user']['post']['res'][201]> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/user',\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Generated-Resource',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.requestBody\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static deleteUser(data: $OpenApiTs['/umbraco/management/api/v1/user']['delete']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/user']['delete']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'DELETE',\n            url: '/umbraco/management/api/v1/user',\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.skip\n     * @param data.take\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getUser(data: $OpenApiTs['/umbraco/management/api/v1/user']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/user']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/user',\n            query: {\n                skip: data.skip,\n                take: data.take\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getUserById(data: $OpenApiTs['/umbraco/management/api/v1/user/{id}']['get']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/user/{id}']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/user/{id}',\n            path: {\n                id: data.id\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static deleteUserById(data: $OpenApiTs['/umbraco/management/api/v1/user/{id}']['delete']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/user/{id}']['delete']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'DELETE',\n            url: '/umbraco/management/api/v1/user/{id}',\n            path: {\n                id: data.id\n            },\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @param data.requestBody\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static putUserById(data: $OpenApiTs['/umbraco/management/api/v1/user/{id}']['put']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/user/{id}']['put']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'PUT',\n            url: '/umbraco/management/api/v1/user/{id}',\n            path: {\n                id: data.id\n            },\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getUserById2Fa(data: $OpenApiTs['/umbraco/management/api/v1/user/{id}/2fa']['get']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/user/{id}/2fa']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/user/{id}/2fa',\n            path: {\n                id: data.id\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @param data.providerName\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static deleteUserById2FaByProviderName(data: $OpenApiTs['/umbraco/management/api/v1/user/{id}/2fa/{providerName}']['delete']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/user/{id}/2fa/{providerName}']['delete']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'DELETE',\n            url: '/umbraco/management/api/v1/user/{id}/2fa/{providerName}',\n            path: {\n                id: data.id,\n                providerName: data.providerName\n            },\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @param data.requestBody\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static postUserByIdChangePassword(data: $OpenApiTs['/umbraco/management/api/v1/user/{id}/change-password']['post']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/user/{id}/change-password']['post']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/user/{id}/change-password',\n            path: {\n                id: data.id\n            },\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static postUserByIdResetPassword(data: $OpenApiTs['/umbraco/management/api/v1/user/{id}/reset-password']['post']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/user/{id}/reset-password']['post']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/user/{id}/reset-password',\n            path: {\n                id: data.id\n            },\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static deleteUserAvatarById(data: $OpenApiTs['/umbraco/management/api/v1/user/avatar/{id}']['delete']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/user/avatar/{id}']['delete']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'DELETE',\n            url: '/umbraco/management/api/v1/user/avatar/{id}',\n            path: {\n                id: data.id\n            },\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @param data.requestBody\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static postUserAvatarById(data: $OpenApiTs['/umbraco/management/api/v1/user/avatar/{id}']['post']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/user/avatar/{id}']['post']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/user/avatar/{id}',\n            path: {\n                id: data.id\n            },\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getUserConfiguration(): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/user/configuration']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/user/configuration',\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getUserCurrent(): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/user/current']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/user/current',\n            errors: {\n                401: 'The resource is protected and requires an authentication token'\n            }\n        });\n    }\n    \n    /**\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getUserCurrent2Fa(): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/user/current/2fa']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/user/current/2fa',\n            errors: {\n                401: 'The resource is protected and requires an authentication token'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.providerName\n     * @param data.code\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static deleteUserCurrent2FaByProviderName(data: $OpenApiTs['/umbraco/management/api/v1/user/current/2fa/{providerName}']['delete']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/user/current/2fa/{providerName}']['delete']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'DELETE',\n            url: '/umbraco/management/api/v1/user/current/2fa/{providerName}',\n            path: {\n                providerName: data.providerName\n            },\n            query: {\n                code: data.code\n            },\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.providerName\n     * @param data.requestBody\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static postUserCurrent2FaByProviderName(data: $OpenApiTs['/umbraco/management/api/v1/user/current/2fa/{providerName}']['post']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/user/current/2fa/{providerName}']['post']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/user/current/2fa/{providerName}',\n            path: {\n                providerName: data.providerName\n            },\n            body: data.requestBody,\n            mediaType: 'application/json',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.providerName\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getUserCurrent2FaByProviderName(data: $OpenApiTs['/umbraco/management/api/v1/user/current/2fa/{providerName}']['get']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/user/current/2fa/{providerName}']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/user/current/2fa/{providerName}',\n            path: {\n                providerName: data.providerName\n            },\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.requestBody\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static postUserCurrentAvatar(data: $OpenApiTs['/umbraco/management/api/v1/user/current/avatar']['post']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/user/current/avatar']['post']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/user/current/avatar',\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.requestBody\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static postUserCurrentChangePassword(data: $OpenApiTs['/umbraco/management/api/v1/user/current/change-password']['post']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/user/current/change-password']['post']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/user/current/change-password',\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token'\n            }\n        });\n    }\n    \n    /**\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getUserCurrentConfiguration(): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/user/current/configuration']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/user/current/configuration',\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getUserCurrentLoginProviders(): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/user/current/login-providers']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/user/current/login-providers',\n            errors: {\n                401: 'The resource is protected and requires an authentication token'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getUserCurrentPermissions(data: $OpenApiTs['/umbraco/management/api/v1/user/current/permissions']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/user/current/permissions']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/user/current/permissions',\n            query: {\n                id: data.id\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getUserCurrentPermissionsDocument(data: $OpenApiTs['/umbraco/management/api/v1/user/current/permissions/document']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/user/current/permissions/document']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/user/current/permissions/document',\n            query: {\n                id: data.id\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getUserCurrentPermissionsMedia(data: $OpenApiTs['/umbraco/management/api/v1/user/current/permissions/media']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/user/current/permissions/media']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/user/current/permissions/media',\n            query: {\n                id: data.id\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.requestBody\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static postUserDisable(data: $OpenApiTs['/umbraco/management/api/v1/user/disable']['post']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/user/disable']['post']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/user/disable',\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.requestBody\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static postUserEnable(data: $OpenApiTs['/umbraco/management/api/v1/user/enable']['post']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/user/enable']['post']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/user/enable',\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.requestBody\n     * @returns string Created\n     * @throws ApiError\n     */\n    public static postUserInvite(data: $OpenApiTs['/umbraco/management/api/v1/user/invite']['post']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/user/invite']['post']['res'][201]> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/user/invite',\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Generated-Resource',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.requestBody\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static postUserInviteCreatePassword(data: $OpenApiTs['/umbraco/management/api/v1/user/invite/create-password']['post']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/user/invite/create-password']['post']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/user/invite/create-password',\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.requestBody\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static postUserInviteResend(data: $OpenApiTs['/umbraco/management/api/v1/user/invite/resend']['post']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/user/invite/resend']['post']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/user/invite/resend',\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.requestBody\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static postUserInviteVerify(data: $OpenApiTs['/umbraco/management/api/v1/user/invite/verify']['post']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/user/invite/verify']['post']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/user/invite/verify',\n            body: data.requestBody,\n            mediaType: 'application/json',\n            errors: {\n                400: 'Bad Request',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.requestBody\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static postUserSetUserGroups(data: $OpenApiTs['/umbraco/management/api/v1/user/set-user-groups']['post']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/user/set-user-groups']['post']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/user/set-user-groups',\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.requestBody\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static postUserUnlock(data: $OpenApiTs['/umbraco/management/api/v1/user/unlock']['post']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/user/unlock']['post']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/user/unlock',\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource'\n            }\n        });\n    }\n    \n}\n\nexport class WebhookService {\n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getItemWebhook(data: $OpenApiTs['/umbraco/management/api/v1/item/webhook']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/item/webhook']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/item/webhook',\n            query: {\n                id: data.id\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.skip\n     * @param data.take\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getWebhook(data: $OpenApiTs['/umbraco/management/api/v1/webhook']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/webhook']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/webhook',\n            query: {\n                skip: data.skip,\n                take: data.take\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.requestBody\n     * @returns string Created\n     * @throws ApiError\n     */\n    public static postWebhook(data: $OpenApiTs['/umbraco/management/api/v1/webhook']['post']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/webhook']['post']['res'][201]> {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/umbraco/management/api/v1/webhook',\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Generated-Resource',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getWebhookById(data: $OpenApiTs['/umbraco/management/api/v1/webhook/{id}']['get']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/webhook/{id}']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/webhook/{id}',\n            path: {\n                id: data.id\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static deleteWebhookById(data: $OpenApiTs['/umbraco/management/api/v1/webhook/{id}']['delete']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/webhook/{id}']['delete']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'DELETE',\n            url: '/umbraco/management/api/v1/webhook/{id}',\n            path: {\n                id: data.id\n            },\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.id\n     * @param data.requestBody\n     * @returns string OK\n     * @throws ApiError\n     */\n    public static putWebhookById(data: $OpenApiTs['/umbraco/management/api/v1/webhook/{id}']['put']['req']): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/webhook/{id}']['put']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'PUT',\n            url: '/umbraco/management/api/v1/webhook/{id}',\n            path: {\n                id: data.id\n            },\n            body: data.requestBody,\n            mediaType: 'application/json',\n            responseHeader: 'Umb-Notifications',\n            errors: {\n                400: 'Bad Request',\n                401: 'The resource is protected and requires an authentication token',\n                403: 'The authenticated user do not have access to this resource',\n                404: 'Not Found'\n            }\n        });\n    }\n    \n    /**\n     * @param data The data for the request.\n     * @param data.skip\n     * @param data.take\n     * @returns unknown OK\n     * @throws ApiError\n     */\n    public static getWebhookEvents(data: $OpenApiTs['/umbraco/management/api/v1/webhook/events']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/umbraco/management/api/v1/webhook/events']['get']['res'][200]> {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/umbraco/management/api/v1/webhook/events',\n            query: {\n                skip: data.skip,\n                take: data.take\n            },\n            errors: {\n                401: 'The resource is protected and requires an authentication token'\n            }\n        });\n    }\n    \n}","import { DirectionModel, DirectionModelEnum } from \"../api\";\n\nexport const sortTypeMapData = <T>(data: T[], sortBy: keyof T, sortDirection: DirectionModel) => {\n\n  if (sortBy && sortDirection) {\n    return data.sort((a: T, b: T) => {\n      const aValue = a[sortBy];\n      const bValue = b[sortBy];\n\n      if (aValue < bValue) {\n        return sortDirection === DirectionModelEnum.ASCENDING ? -1 : 1;\n      } else if (aValue > bValue) {\n        return sortDirection === DirectionModelEnum.ASCENDING ? 1 : -1;\n      } else {\n        return 0;\n      }\n    });\n  }\n\n  return data;\n\n}","import { UmbElementMixin } from \"@umbraco-cms/backoffice/element-api\";\nimport { LitElement, css, customElement, html, ifDefined, property, repeat, state } from \"@umbraco-cms/backoffice/external/lit\";\nimport { DirectionModel, DirectionModelEnum, GodModeService, TypeMap } from \"../api\";\nimport { tryExecuteAndNotify } from \"@umbraco-cms/backoffice/resources\";\nimport { UmbDataSourceResponse } from \"@umbraco-cms/backoffice/repository\";\nimport { UUIInputEvent, UUISelectEvent } from \"@umbraco-cms/backoffice/external/uui\";\nimport { sortTypeMapData } from \"../helpers/sort\";\n\n@customElement('godmode-reflection-browser')\nexport class GodModeReflectionBrowserElement extends UmbElementMixin(LitElement) {\n    @property({ type: String })\n    type?: string;\n\n    @state()\n    name?: string;\n\n    @state()\n    data?: TypeMap[] = undefined;\n\n    @state()\n    filteredData?: TypeMap[] = undefined;\n\n    @state()\n    searchName: string = '';\n\n    @state()\n    namespaces: Option[] = [];\n\n    @state()\n    selectedNamespace: string = '';\n\n    @state()\n    inherits: Option[] = [];\n\n    @state()\n    selectedInherits: string = '';\n\n    @state()\n    umbraco: Option[] = [{ name: 'Any', value: '', selected: true }, { name: 'Yes', value: 'yes' }, { name: 'No', value: 'no' }]\n\n    @state()\n    selectedUmbraco: string = '';\n\n    @state()\n    sortingDesc: boolean = false;\n\n    @state()\n    orderDirection: DirectionModel = DirectionModelEnum.ASCENDING;\n\n    @state()\n    orderBy: string = 'name';\n\n    constructor() {\n        super();\n    }\n\n    async connectedCallback() {\n        super.connectedCallback();\n        this.#init();\n    }\n\n    private _sortingHandler(column: keyof TypeMap) {\n      this.sortingDesc = this.orderBy === column ? !this.sortingDesc : false;\n      this.orderBy = column;\n\n      this.orderDirection = this.sortingDesc ? DirectionModelEnum.DESCENDING : DirectionModelEnum.ASCENDING;\n\n      if (this.data) {\n        this.data = sortTypeMapData<TypeMap>(this.data, column, this.orderDirection);\n        this.filteredData = structuredClone(this.data);\n      }\n    }\n\n    async #init() {\n        if (this.type) {\n            let response: UmbDataSourceResponse<TypeMap[]> = {};\n\n            if (this.type === \"surface\") {\n                this.name = \"Surface Controller Browser\";\n                response = await tryExecuteAndNotify(this, GodModeService.getUmbracoManagementApiV1GodModeGetSurfaceControllers());\n            }\n\n            if (this.type === \"api\") {\n                this.name = \"API Controller Browser\";\n                response = await tryExecuteAndNotify(this, GodModeService.getUmbracoManagementApiV1GodModeGetApiControllers());\n            }\n\n            if (this.type === \"render\") {\n                this.name = \"RenderMvc Controller Browser\";\n                response = await tryExecuteAndNotify(this, GodModeService.getUmbracoManagementApiV1GodModeGetRenderMvcControllers());\n            }\n\n            if (this.type === \"models\") {\n                this.name = \"Published Content Model Browser\";\n                response = await tryExecuteAndNotify(this, GodModeService.getUmbracoManagementApiV1GodModeGetPublishedContentModels());\n            }\n\n            if (this.type === \"composers\") {\n                this.name = \"Composer Browser\";\n                response = await tryExecuteAndNotify(this, GodModeService.getUmbracoManagementApiV1GodModeGetComposers());\n            }\n\n            if (this.type === \"converters\") {\n                this.name = \"Property Value Converter Browser\";\n                response = await tryExecuteAndNotify(this, GodModeService.getUmbracoManagementApiV1GodModeGetRenderMvcControllers());\n            }\n\n            if (this.type === \"components\") {\n                this.name = \"View Component Browser\";\n                response = await tryExecuteAndNotify(this, GodModeService.getUmbracoManagementApiV1GodModeGetViewComponents());\n            }\n\n            if (this.type === \"taghelpers\") {\n                this.name = \"Tag Helpers Browser\";\n                response = await tryExecuteAndNotify(this, GodModeService.getUmbracoManagementApiV1GodModeGetTagHelpers());\n            }\n\n            if (this.type === \"finders\") {\n                this.name = \"Content Finders Browser\";\n                response = await tryExecuteAndNotify(this, GodModeService.getUmbracoManagementApiV1GodModeGetContentFinders());\n            }\n\n            if (this.type === \"urlproviders\") {\n                this.name = \"URL Providers Browser\";\n                response = await tryExecuteAndNotify(this, GodModeService.getUmbracoManagementApiV1GodModeGetUrlProviders());\n            }\n\n            if (response) {\n                if (response.data) {\n                    this.data = response.data;\n                    this.filteredData = sortTypeMapData(structuredClone(this.data), 'name', this.orderDirection);\n                    \n                    let namespaces = [...new Set(this.data.map(x => x.namespace))];\n                    this.namespaces = namespaces.map(x => { return { name: x, value: x } });\n                    this.namespaces.unshift({ name: 'Any', value: '', selected: true });\n\n                    let inherits = [...new Set(this.data.map(x => x.baseType))];\n                    this.inherits = inherits.map(x => { return { name: x, value: x } });\n                    this.inherits.unshift({ name: 'Any', value: '', selected: true });\n                }\n            }\n        }\n    }\n\n    #setSearchName(event: UUIInputEvent) {\n        const value = event.target.value as string;\n        this.searchName = value;\n        this.#filterValues();\n    }\n\n    #setSelectedNamspace(event: UUISelectEvent) {\n        const value = event.target.value as string;\n        this.selectedNamespace = value;\n        this.#filterValues();\n    }\n\n    #setSelectedInherits(event: UUISelectEvent) {\n        const value = event.target.value as string;\n        this.selectedInherits = value;\n        this.#filterValues();\n    }\n\n    #setSelectedUmbraco(event: UUISelectEvent) {\n        const value = event.target.value as string;\n        this.selectedUmbraco = value;\n        this.#filterValues();\n    }\n\n    #filterValues() {\n        this.filteredData = structuredClone(this.data);\n\n        if (this.searchName !== '') {\n            this.filteredData = this.filteredData?.filter(x => x.name.toLowerCase().includes(this.searchName));\n        }\n\n        if (this.selectedNamespace !== '') {\n            this.filteredData = this.filteredData?.filter(x => x.namespace === this.selectedNamespace);\n        }\n\n        if (this.selectedInherits !== '') {\n            this.filteredData = this.filteredData?.filter(x => x.baseType === this.selectedInherits);\n        }\n\n        if (this.selectedUmbraco !== '') {\n            this.filteredData = this.filteredData?.filter(x => x.isUmbraco === (this.selectedUmbraco === 'Yes' ? true : false));\n        }\n    }\n\n    override render() {\n        return html`\n            <umb-body-layout>\n                <godmode-header name=${ifDefined(this.name)} slot=\"header\"></godmode-header>\n                <uui-box>\n                    <div class=\"grid\">\n                        <div>\n                            <uui-label>Search:</uui-label>\n                            <uui-input\n                                placeholder=\"Search names\"\n                                .value=${this.searchName}\n                                @input=${this.#setSearchName}>\n                            </uui-input>\n                        </div>\n                        <div>\n                            <uui-label>In Namespace:</uui-label>\n                            <uui-select\n                                .options=${this.namespaces}\n                                .value=${this.selectedNamespace}\n                                @change=${this.#setSelectedNamspace}>\n                            </uui-select>\n                        </div>\n                        <div>\n                            <uui-label>Inherits From:</uui-label>\n                            <uui-select\n                                .options=${this.inherits}\n                                .value=${this.selectedInherits}\n                                @change=${this.#setSelectedInherits}>\n                            </uui-select>\n                        </div>\n                        <div>\n                            <uui-label>Is Umbraco?</uui-label>\n                            <uui-select\n                                .options=${this.umbraco}\n                                .value=${this.selectedUmbraco}\n                                @change=${this.#setSelectedUmbraco}>\n                            </uui-select>\n                        </div>\n                    </div>\n                </uui-box>\n\n                <uui-box style=\"--uui-box-default-padding: 0;\">\n                    <uui-table>\n                        <uui-table-column></uui-table-column>\n                        <uui-table-column></uui-table-column>\n                        <uui-table-column></uui-table-column>\n                        <uui-table-column></uui-table-column>\n\n                        <uui-table-head>\n                            <uui-table-head-cell style=\"--uui-table-cell-padding: 0\">\n                              <button\n                                label=\"Name\"\n                                style=\"font-weight: 700;\"\n                                @click=${() => this._sortingHandler('name')}>\n                                Name\n                                <uui-symbol-sort\n                                  ?active=${this.orderBy === 'name'}\n                                  ?descending=${this.sortingDesc}>\n                                </uui-symbol-sort>\n                              </button>\n                            </uui-table-head-cell>\n                            <uui-table-head-cell style=\"--uui-table-cell-padding: 0\">\n                              <button\n                                label=\"Module\"\n                                style=\"font-weight: 700;\"\n                                @click=${() => this._sortingHandler('module')}>\n                                Module\n                                <uui-symbol-sort\n                                  ?active=${this.orderBy === 'module'}\n                                  ?descending=${this.sortingDesc}>\n                                </uui-symbol-sort>\n                              </button>\n                            </uui-table-head-cell>\n                            <uui-table-head-cell style=\"--uui-table-cell-padding: 0\">\n                              <button\n                                label=\"Base Type\"\n                                style=\"font-weight: 700;\"\n                                @click=${() => this._sortingHandler('baseType')}>\n                                Base Type\n                                <uui-symbol-sort\n                                  ?active=${this.orderBy === 'baseType'}\n                                  ?descending=${this.sortingDesc}>\n                                </uui-symbol-sort>\n                              </button>\n                            </uui-table-head-cell>\n                            <uui-table-head-cell style=\"--uui-table-cell-padding: 0\">\n                              <button\n                                label=\"Umbraco?\"\n                                style=\"font-weight: 700;\"\n                                @click=${() => this._sortingHandler('isUmbraco')}>\n                                Umbraco?\n                                <uui-symbol-sort\n                                  ?active=${this.orderBy === 'isUmbraco'}\n                                  ?descending=${this.sortingDesc}>\n                                </uui-symbol-sort>\n                              </button>\n                            </uui-table-head-cell>\n                        </uui-table-head>\n\n                        ${repeat(\n                            this.filteredData!,\n                            (data) => data.name,\n                            (data) =>\n                                html`\n                                    <uui-table-row>\n                                        <uui-table-cell>\n                                            <strong>${data.name}</strong>\n                                        </uui-table-cell>\n                                        <uui-table-cell>\n                                            <code>${data.module}</code>\n                                        </uui-table-cell>\n                                        <uui-table-cell>\n                                            ${data.baseType}\n                                        </uui-table-cell>\n                                        <uui-table-cell>\n                                            <div class=\"inline-flex\">\n                                                ${data.isUmbraco ? html`<uui-icon name=\"icon-checkbox\"></uui-icon> Yes` : html`<uui-icon name=\"icon-checkbox-empty\"></uui-icon> No`}\n                                            </div>\n                                        </uui-table-cell>\n                                    </uui-table-row>\n                                `\n                            )}\n                    </uui-table>\n                </uui-box>\n            </umb-body-layout>\n        `;\n    }\n\n    static styles = [\n        css`\n            .grid {\n                display: grid;\n                grid-template-columns: repeat(4, 1fr);\n                gap: 20px;\n\n                div {\n                    display: flex;\n                    flex-direction: column;\n                    align-items: flex-start;\n                }\n            }\n\n            uui-box {\n\t            margin-bottom: 20px;\n            }\n\n            .inline-flex {\n                display: inline-flex;\n                align-items: center;\n\n                uui-icon {\n                    margin-right: 6px;\n                }\n            }\n\n            uui-table-head-cell button {\n                padding: var(--uui-size-4) var(--uui-size-5);\n                background-color: transparent;\n                color: inherit;\n                border: none;\n                cursor: pointer;\n                font-family: var(--uui-font-family);\n                font-weight: inherit;\n                font-size: inherit;\n                display: inline-flex;\n                align-items: center;\n                justify-content: space-between;\n                width: 100%;\n            }\n        `\n    ]\n}\n\nexport default GodModeReflectionBrowserElement;","import type { ManifestTypes, ManifestWorkspace } from '@umbraco-cms/backoffice/extension-registry';\n\nconst workspace: ManifestWorkspace = {\n\ttype: 'workspace',\n\talias: 'Umb.Workspace.GodModeRoot',\n\tname: 'GodMode Root Workspace',\n\telement: () => import('./godmode-root-workspace.element'),\n\tmeta: {\n\t\tentityType: 'godmode-root',\n\t},\n};\n\nexport const manifests: Array<ManifestTypes> = [workspace];\n","import { ManifestTypes, ManifestWorkspaceView, ManifestWorkspaces } from '@umbraco-cms/backoffice/extension-registry';\n\nconst workspace: ManifestWorkspaces = {\n\ttype: 'workspace',\n\tkind: 'routable',\n\talias: 'Umb.Workspace.GodMode',\n\tname: 'God Mode Workspace',\n\tapi: () => import('./godmode-workspace.context'),\n\tmeta: {\t\t\n\t\tentityType: 'godmode',\n\t},\n};\n\nconst workspaceView: ManifestWorkspaceView = {\n\ttype: 'workspaceView',\n\talias: 'Umb.WorkspaceView.GodMode.View',\n\tname: 'God Mode Workspace View',\n\telement: () => import('./godmode-workspace-editor.element'),\n\tweight: 90,\n\tmeta: {\n\t\tlabel: 'View',\n\t\tpathname: 'browse',\n\t\ticon: 'edit'\n\t},\n\tconditions: [\n\t\t{\n\t\t\talias: 'Umb.Condition.WorkspaceAlias',\n\t\t\tmatch: workspace.alias\n\t\t}\n\t]\n};\n\nexport const manifests: Array<ManifestTypes> = [\n\tworkspace,\n\tworkspaceView\n];","import type { ManifestTypes, ManifestWorkspace } from '@umbraco-cms/backoffice/extension-registry';\n\nconst workspace: ManifestWorkspace = {\n  type: 'workspace',\n  alias: 'Umb.Workspace.GodModeFolder',\n  name: 'GodMode Folder Workspace',\n  element: () => import('./godmode-folder-workspace.element'),\n  meta: {\n    entityType: 'godmode-folder',\n  },\n};\n\nexport const manifests: Array<ManifestTypes> = [workspace];\n","import type { ManifestTypes } from '@umbraco-cms/backoffice/extension-registry';\n\nimport { manifests as godModeRootManifests } from './godmode-root/manifests';\nimport { manifests as godModeManifests } from './godmode/manifests';\nimport { manifests as godModeFolderManifests } from './godmode-folder/manifests';\n\nexport const manifests: Array<ManifestTypes> = [\n    ...godModeRootManifests,\n    ...godModeManifests,\n    ...godModeFolderManifests\n];\n","import type { ManifestTypes } from '@umbraco-cms/backoffice/extension-registry';\n\nexport const manifests: Array<ManifestTypes> = [\n    {\n        type: 'menuItem',\n        kind: 'tree',\n        alias: 'Umb.MenuItem.GodMode',\n        name: 'God Mode Menu Item',\n        weight: 100,\n        meta: {\n            label: 'God Mode',\n            icon: 'icon-sience',\n            entityType: 'godmode',\n            treeAlias: 'Umb.Tree.GodMode',\n            menus: ['Umb.Menu.AdvancedSettings'],\n        }\n    }\n];","import { ManifestRepository, ManifestTree, ManifestTreeItem, ManifestTreeStore, ManifestTypes } from \"@umbraco-cms/backoffice/extension-registry\";\nimport { GOD_MODE_TREE_STORE_ALIAS, GOD_MODE_TREE_REPOSITORY_ALIAS } from \"../constants\";\n\nconst treeRepository: ManifestRepository = {\n\ttype: 'repository',\n\talias: GOD_MODE_TREE_REPOSITORY_ALIAS,\n\tname: 'God Mode Tree Repository',\n\tapi: () => import('./godmode-tree.repository'),\n};\n\nconst treeStore: ManifestTreeStore = {\n\ttype: 'treeStore',\n\talias: GOD_MODE_TREE_STORE_ALIAS,\n\tname: 'God Mode Tree Store',\n\tapi: () => import('./godmode-tree.store'),\n};\n\nconst tree: ManifestTree = {\n\ttype: 'tree',\n\tkind: 'default',\n\talias: \"Umb.Tree.GodMode\",\n\tname: 'God Mode Tree',\n\tmeta: {\n\t\trepositoryAlias: \"Umb.Repository.GodMode.Tree\",\n\t}\n};\n\nconst treeItem: ManifestTreeItem = {\n\ttype: 'treeItem',\n\tkind: 'default',\n\talias: 'Umb.TreeItem.GodMode',\n\tname: 'God Mode Tree Item',\n\tforEntityTypes: ['godmode-root', 'godmode', 'godmode-folder'],\n};\n\nexport const manifests: Array<ManifestTypes> = [\n\ttreeRepository,\n\ttreeStore,\n\ttree,\n\ttreeItem\n];","import { UmbEntryPointOnInit } from '@umbraco-cms/backoffice/extension-api';\nimport { UMB_AUTH_CONTEXT } from '@umbraco-cms/backoffice/auth';\nimport { OpenAPI } from './api/core/OpenAPI.ts';\n\nexport { GOD_MODE_TREE_ALIAS, GOD_MODE_TREE_REPOSITORY_ALIAS, GOD_MODE_TREE_STORE_ALIAS } from './constants';\nexport * from './elements/godmode-header.element';\nexport * from './elements/godmode-reflection-browser.element';\n\nimport { manifests as workspaceManifests } from './workspace/manifests';\nimport { manifests as menuManifests } from './menu/manifests';\nimport { manifests as treeManifests } from './tree/manifests';\n\nexport const onInit: UmbEntryPointOnInit = (host, extensionRegistry) => {\n\n    extensionRegistry.registerMany([\n        ...workspaceManifests,\n        ...menuManifests,\n        ...treeManifests\n    ]);\n\n    host.consumeContext(UMB_AUTH_CONTEXT, async (auth) => {\n        if (!auth) return;\n\n        const umbOpenApi = auth.getOpenApiConfiguration();\n        OpenAPI.BASE = umbOpenApi.base;\n        OpenAPI.TOKEN = umbOpenApi.token;\n        OpenAPI.WITH_CREDENTIALS = umbOpenApi.withCredentials;\n        OpenAPI.CREDENTIALS = umbOpenApi.credentials;\n    });\n};\n"],"names":["Interceptors","fn","index","OpenAPI","GOD_MODE_TREE_REPOSITORY_ALIAS","GOD_MODE_TREE_STORE_ALIAS","GOD_MODE_TREE_ALIAS","GodModeHeaderElement","UmbElementMixin","LitElement","html","ifDefined","css","__decorateClass","property","customElement","DirectionModelEnum","ApiError","request","response","message","CancelError","CancelablePromise","executor","resolve","reject","onResolve","value","onReject","reason","onCancel","cancelHandler","onFulfilled","onRejected","onFinally","error","isString","isStringWithValue","isBlob","isFormData","base64","str","getQueryString","params","qs","append","key","encodePair","v","k","getUrl","config","options","encoder","path","substring","group","_a","url","getFormData","formData","process","resolver","getHeaders","token","username","password","additionalHeaders","headers","credentials","getRequestBody","_b","sendRequest","body","controller","getResponseHeader","responseHeader","content","getResponseBody","contentType","binaryTypes","type","catchErrorCodes","result","errorStatus","errorStatusText","errorBody","responseBody","GodModeService","data","__request","sortTypeMapData","sortBy","sortDirection","b","aValue","bValue","_init","init_fn","_setSearchName","setSearchName_fn","_setSelectedNamspace","setSelectedNamspace_fn","_setSelectedInherits","setSelectedInherits_fn","_setSelectedUmbraco","setSelectedUmbraco_fn","_filterValues","filterValues_fn","GodModeReflectionBrowserElement","__privateAdd","__privateMethod","column","repeat","tryExecuteAndNotify","namespaces","x","inherits","event","_c","_d","state","GodModeReflectionBrowserElement$1","workspace","manifests","workspaceView","godModeRootManifests","godModeManifests","godModeFolderManifests","treeRepository","treeStore","tree","treeItem","onInit","host","extensionRegistry","workspaceManifests","menuManifests","treeManifests","UMB_AUTH_CONTEXT","auth","umbOpenApi"],"mappings":"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"}