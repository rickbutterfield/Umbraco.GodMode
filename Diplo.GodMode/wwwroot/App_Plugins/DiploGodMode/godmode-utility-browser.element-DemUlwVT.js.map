{"version":3,"file":"godmode-utility-browser.element-DemUlwVT.js","sources":["../../../assets/src/workspace/godmode/views/godmode-utility-browser.element.ts"],"sourcesContent":["import { tryExecuteAndNotify } from '@umbraco-cms/backoffice/resources';\r\nimport { css, customElement, html, state } from \"@umbraco-cms/backoffice/external/lit\";\r\nimport { UmbLitElement } from \"@umbraco-cms/backoffice/lit-element\";\r\nimport { GodModeService } from '../../../api';\r\nimport { UMB_NOTIFICATION_CONTEXT, UmbNotificationContext } from '@umbraco-cms/backoffice/notification';\r\nimport { UmbLanguageCollectionRepository, UmbLanguageDetailModel } from '@umbraco-cms/backoffice/language';\r\nimport { UUISelectEvent } from '@umbraco-cms/backoffice/external/uui';\r\n\r\n@customElement('godmode-utility-browser')\r\nexport class GodModeUtilityBrowserElement extends UmbLitElement {\r\n    #notificationContext?: UmbNotificationContext;\r\n    #collectionRepository = new UmbLanguageCollectionRepository(this);\r\n\r\n    @state()\r\n    private _languages: Array<UmbLanguageDetailModel> = [];\r\n\r\n    @state()\r\n    private _cultures: Array<Option> = [];\r\n\r\n    @state()\r\n    private _selectedCulture: string = '';\r\n\r\n    @state()\r\n    warmingUp: boolean = false;\r\n\r\n    @state()\r\n    warmUpCurrentUrl: string = '';\r\n\r\n    @state()\r\n    warmUpCurrent: number = 1;\r\n\r\n    @state()\r\n    warmUpCount: number = 0;\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.consumeContext(UMB_NOTIFICATION_CONTEXT, (_instance) => {\r\n            this.#notificationContext = _instance;\r\n        });\r\n\r\n        this.#observeLanguages();\r\n    }\r\n\r\n    async #observeLanguages() {\r\n        const { data } = await this.#collectionRepository.requestCollection({});\r\n        \r\n        if (data) {\r\n            this._languages = data.items;\r\n\r\n            const cultures = this._languages.map(x => {\r\n                return { name: x.name, value: x.unique }\r\n            });\r\n\r\n            cultures.unshift({ name: 'No culture', value: '' });\r\n\r\n            this._cultures = cultures;\r\n        }\r\n    }\r\n\r\n    async clearUmbracoCache(cacheName: string) {\r\n        const { data } = await tryExecuteAndNotify(this, GodModeService.postUmbracoManagementApiV1GodModeClearUmbracoCache({ cache: cacheName }));\r\n\r\n        if (data) {\r\n            if (data.message) {\r\n                if (data.responseType === 'Error') {\r\n                    this.#notificationContext?.peek('danger', { data: { message: data.message } });\r\n                }\r\n                else if (data.responseType === 'Success') {\r\n                    this.#notificationContext?.peek('positive', { data: { message: data.message } });\r\n                }\r\n                else if (data.responseType === 'Warning') {\r\n                    this.#notificationContext?.peek('warning', { data: { message: data.message } });\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    async purgeMediaCache() {\r\n        if (window.confirm(\"This will attempt to delete all the cached image crops on disk in the TEMP/MediaCache. IO operations can sometimes fail. Are you sure?\")) {\r\n            const { data } = await tryExecuteAndNotify(this, GodModeService.postUmbracoManagementApiV1GodModePurgeMediaCache());\r\n\r\n            if (data) {\r\n                if (data.message) {\r\n                    if (data.responseType === 'Error') {\r\n                        this.#notificationContext?.peek('danger', { data: { message: data.message } });\r\n                    }\r\n                    else if (data.responseType === 'Success') {\r\n                        this.#notificationContext?.peek('positive', { data: { message: data.message } });\r\n                    }\r\n                    else if (data.responseType === 'Warning') {\r\n                        this.#notificationContext?.peek('warning', { data: { message: data.message } });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    async restartAppPool() {\r\n        if (window.confirm(\"This will take the site offline (and won't restart it). Are you really, really, really sure?\")) {\r\n            const { data } = await tryExecuteAndNotify(this, GodModeService.postUmbracoManagementApiV1GodModeRestartAppPool());\r\n\r\n            if (data) {\r\n                if (data.message) {\r\n                    if (data.responseType === 'Error') {\r\n                        this.#notificationContext?.peek('danger', { data: { message: data.message } });\r\n                    }\r\n                    else if (data.responseType === 'Success') {\r\n                        this.#notificationContext?.peek('positive', { data: { message: data.message } });\r\n                    }\r\n                    else if (data.responseType === 'Warning') {\r\n                        this.#notificationContext?.peek('warning', { data: { message: data.message } });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    async warmUpTemplates() {\r\n        const { data } = await tryExecuteAndNotify(this, GodModeService.getUmbracoManagementApiV1GodModeGetTemplateUrlsToPing());\r\n\r\n        if (data) {\r\n            await this._pingUrls(data);\r\n        }\r\n    }\r\n\r\n    async pingUrls() {\r\n        const { data } = await tryExecuteAndNotify(this, GodModeService.getUmbracoManagementApiV1GodModeGetUrlsToPing({ culture: this._selectedCulture }));\r\n\r\n        if (data) {\r\n            await this._pingUrls(data);\r\n        }\r\n    }\r\n\r\n    async _pingUrls(urls: string[]) {\r\n        this.warmingUp = true;\r\n        this.warmUpCount = urls.length;\r\n\r\n        if (this.warmUpCount === 0) {\r\n            this.#notificationContext?.peek('warning', { data: { message: \"THe URL list was empty...\" } });\r\n        }\r\n\r\n        urls.forEach(async url => {\r\n            this.warmingUp = true;\r\n            this.warmUpCurrentUrl = url;\r\n            const response = await fetch(url);\r\n\r\n            if (response.ok) {\r\n                this.warmUpCurrent++;\r\n            }\r\n            else {\r\n                this.warmUpCurrent++;\r\n            }\r\n\r\n            if (this.warmUpCurrent === this.warmUpCount) {\r\n                this.warmingUp = false;\r\n            }\r\n        });\r\n    }\r\n\r\n    #onSelect(event: UUISelectEvent) {\r\n        this._selectedCulture = event.target.value as string;\r\n    }\r\n\r\n    #renderWarmup() {\r\n        if (this.warmingUp) {\r\n            return html`\r\n                <uui-box>\r\n                    <uui-loader-bar animationDuration=\"1.5\" style=\"color: black\"></uui-loader-bar>\r\n                    <p>Warming up ${this.warmUpCurrent} of ${this.warmUpCount} - pinging URL: <a href=${this.warmUpCurrentUrl} target=\"_blank\">${this.warmUpCurrentUrl}</a></p>\r\n                </uui-box>\r\n            `;\r\n        }\r\n\r\n        else return html``;\r\n    }\r\n\r\n    render() {\r\n        return html`\r\n            <umb-body-layout>\r\n                <godmode-header name=\"Utility Browser\" slot=\"header\"></godmode-header>\r\n                <uui-box headline=\"Caches\">\r\n                    <div class=\"grid\">\r\n                        <div>\r\n                            <uui-button type=\"button\" look=\"primary\" color=\"warning\" label=\"Clear Request Cache\" @click=${() => this.clearUmbracoCache('Request')}>\r\n                                <uui-icon name=\"icon-delete\"></uui-icon> Clear Request Cache\r\n                            </uui-button>\r\n                        </div>\r\n\r\n                        <div>\r\n                            <uui-button type=\"button\" look=\"primary\" color=\"warning\" label=\"Clear Runtime Cache\" @click=${() => this.clearUmbracoCache('Runtime')}>\r\n                                <uui-icon name=\"icon-delete\"></uui-icon> Clear Runtime Cache\r\n                            </uui-button>\r\n                        </div>\r\n\r\n                        <div>\r\n                            <uui-button type=\"button\" look=\"primary\" color=\"warning\" label=\"Clear Isolated Cache\" @click=${() => this.clearUmbracoCache('Isolated')}>\r\n                                <uui-icon name=\"icon-delete\"></uui-icon> Clear Isolated Cache\r\n                            </uui-button>\r\n                        </div>\r\n\r\n                        <div>\r\n                            <uui-button type=\"button\" look=\"primary\" color=\"warning\" label=\"Clear Partial Cache\" @click=${() => this.clearUmbracoCache('Partial')}>\r\n                                <uui-icon name=\"icon-delete\"></uui-icon> Clear Partial Cache\r\n                            </uui-button>\r\n                        </div>\r\n\r\n                        <div>\r\n                            <uui-button type=\"button\" look=\"primary\" color=\"warning\" label=\"Clear Other Cache\" @click=${() => this.clearUmbracoCache('Other')}>\r\n                                <uui-icon name=\"icon-delete\"></uui-icon> Clear Other Cache\r\n                            </uui-button>\r\n                        </div>\r\n\r\n                        <div>\r\n                            <uui-button type=\"button\" look=\"primary\" color=\"danger\" label=\"Clear All Caches\" @click=${() => this.clearUmbracoCache('all')}>\r\n                                <uui-icon name=\"icon-delete\"></uui-icon> Clear All Caches\r\n                            </uui-button>\r\n                        </div>\r\n                    </div>\r\n                </uui-box>\r\n\r\n                <uui-box headline=\"TEMP Files\">\r\n                    <div class=\"grid\">\r\n                        <div>\r\n                            <uui-button type=\"button\" look=\"primary\" color=\"warning\" label=\"Purge Media Cache\" @click=${() => this.purgeMediaCache()}>\r\n                                <uui-icon name=\"icon-hard-drive\"></uui-icon> Purge Media Cache\r\n                            </uui-button>\r\n                        </div>\r\n                    </div>\r\n                </uui-box>\r\n\r\n                <uui-box headline=\"Application\">\r\n                    <div class=\"grid\">\r\n                        <div>\r\n                            <uui-button type=\"button\" look=\"primary\" color=\"danger\" label=\"Stop Application\" @click=${() => this.restartAppPool()}>\r\n                                <uui-icon name=\"icon-scull\"></uui-icon> Stop Application\r\n                            </uui-button>\r\n                        </div>\r\n                        <div>\r\n                            <uui-button type=\"button\" look=\"primary\" color=\"default\" label=\"Warm-Up Templates\" @click=${() => this.warmUpTemplates()}>\r\n                                <uui-icon name=\"icon-server\"></uui-icon> Warm-Up Templates\r\n                            </uui-button>\r\n                        </div>\r\n                        <div>\r\n                            <uui-button type=\"button\" look=\"primary\" color=\"default\" label=\"Ping URLs\" @click=${() => this.pingUrls()}>\r\n                                <uui-icon name=\"icon-server\"></uui-icon> Ping URLs\r\n                            </uui-button>\r\n                            <uui-select\r\n                                placeholder=\"No culture\"\r\n                                .options=${this._cultures}\r\n                                @change=${this.#onSelect}>\r\n                            </uui-select>\r\n                        </div>\r\n                    </div>\r\n                </uui-box>\r\n\r\n                ${this.#renderWarmup()}\r\n            </umb-body-layout>\r\n        `\r\n    }\r\n\r\n    static styles = [\r\n        css`\r\n            .grid {\r\n                display: grid;\r\n                grid-template-columns: repeat(3, 1fr);\r\n                gap: 20px;\r\n            }\r\n\r\n            uui-box {\r\n                margin-bottom: 20px;\r\n            }\r\n        `\r\n    ]\r\n}\r\n\r\nexport default GodModeUtilityBrowserElement;\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        'godmode-utility-browser': GodModeUtilityBrowserElement;\r\n    }\r\n}\r\n"],"names":["_notificationContext","_collectionRepository","_observeLanguages","observeLanguages_fn","_onSelect","onSelect_fn","_renderWarmup","renderWarmup_fn","GodModeUtilityBrowserElement","UmbLitElement","__privateAdd","UmbLanguageCollectionRepository","UMB_NOTIFICATION_CONTEXT","_instance","__privateSet","__privateMethod","cacheName","data","tryExecuteAndNotify","GodModeService","_a","__privateGet","_b","_c","urls","url","html","cultures","x","event","css","__decorateClass","state","customElement","GodModeUtilityBrowserElement$1"],"mappings":"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"}