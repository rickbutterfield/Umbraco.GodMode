{"version":3,"file":"index-CV1Q42C5.js","sources":["../../../assets/src/api/core/OpenAPI.ts","../../../assets/src/constants.ts","../../../assets/src/elements/godmode-header.element.ts","../../../assets/src/workspace/godmode-root/manifests.ts","../../../assets/src/workspace/godmode/manifests.ts","../../../assets/src/workspace/manifests.ts","../../../assets/src/menu/manifests.ts","../../../assets/src/tree/manifests.ts","../../../assets/src/index.ts"],"sourcesContent":["import type { ApiRequestOptions } from './ApiRequestOptions';\r\n\r\ntype Headers = Record<string, string>;\r\ntype Middleware<T> = (value: T) => T | Promise<T>;\r\ntype Resolver<T> = (options: ApiRequestOptions) => Promise<T>;\r\n\r\nexport class Interceptors<T> {\r\n  _fns: Middleware<T>[];\r\n\r\n  constructor() {\r\n    this._fns = [];\r\n  }\r\n\r\n  eject(fn: Middleware<T>) {\r\n    const index = this._fns.indexOf(fn);\r\n    if (index !== -1) {\r\n      this._fns = [\r\n        ...this._fns.slice(0, index),\r\n        ...this._fns.slice(index + 1),\r\n      ];\r\n    }\r\n  }\r\n\r\n  use(fn: Middleware<T>) {\r\n    this._fns = [...this._fns, fn];\r\n  }\r\n}\r\n\r\nexport type OpenAPIConfig = {\r\n\tBASE: string;\r\n\tCREDENTIALS: 'include' | 'omit' | 'same-origin';\r\n\tENCODE_PATH?: ((path: string) => string) | undefined;\r\n\tHEADERS?: Headers | Resolver<Headers> | undefined;\r\n\tPASSWORD?: string | Resolver<string> | undefined;\r\n\tTOKEN?: string | Resolver<string> | undefined;\r\n\tUSERNAME?: string | Resolver<string> | undefined;\r\n\tVERSION: string;\r\n\tWITH_CREDENTIALS: boolean;\r\n\tinterceptors: {request: Interceptors<RequestInit>;\r\n\t\tresponse: Interceptors<Response>;};\r\n};\r\n\r\nexport const OpenAPI: OpenAPIConfig = {\r\n\tBASE: '',\r\n\tCREDENTIALS: 'include',\r\n\tENCODE_PATH: undefined,\r\n\tHEADERS: undefined,\r\n\tPASSWORD: undefined,\r\n\tTOKEN: undefined,\r\n\tUSERNAME: undefined,\r\n\tVERSION: 'Latest',\r\n\tWITH_CREDENTIALS: false,\r\n\tinterceptors: {request: new Interceptors(),response: new Interceptors(),\r\n\t},\r\n};","export const GOD_MODE_TREE_REPOSITORY_ALIAS = 'Umb.Repository.GodMode.Tree';\r\nexport const GOD_MODE_TREE_STORE_ALIAS = 'Umb.Store.GodMode.Tree';\r\nexport const GOD_MODE_TREE_ALIAS = 'Umb.Tree.GodMode';\r\n","import { UmbElementMixin } from \"@umbraco-cms/backoffice/element-api\";\r\nimport { LitElement, css, customElement, html, ifDefined, property } from \"@umbraco-cms/backoffice/external/lit\";\r\n\r\n@customElement('godmode-header')\r\nexport class GodModeHeaderElement extends UmbElementMixin(LitElement) {\r\n    @property({ type: String, attribute: true })\r\n    name?: string;\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    render() {\r\n        return html`\r\n            <div class=\"header\">\r\n                <uui-icon name=\"icon-sience\"></uui-icon>\r\n                <h3>God Mode ${ifDefined(this.name)}</h3>\r\n            </div>\r\n        `;\r\n    }\r\n\r\n    static styles = [\r\n        css`\r\n            .header {\r\n                display: flex;\r\n                flex-direction: row;\r\n                align-items: center;\r\n\r\n                uui-icon {\r\n                    width: 24px;\r\n                    height: 24px;\r\n                    margin-right: var(--uui-size-space-2);\r\n                }\r\n            }\r\n        `\r\n    ]\r\n}\r\n\r\nexport default GodModeHeaderElement;","import type { ManifestTypes, ManifestWorkspace } from '@umbraco-cms/backoffice/extension-registry';\r\n\r\nconst workspace: ManifestWorkspace = {\r\n\ttype: 'workspace',\r\n\talias: 'Umb.Workspace.GodModeRoot',\r\n\tname: 'GodMode Root Workspace',\r\n\telement: () => import('./godmode-root-workspace.element'),\r\n\tmeta: {\r\n\t\tentityType: 'godmode-root',\r\n\t},\r\n};\r\n\r\nexport const manifests: Array<ManifestTypes> = [workspace];\r\n","import { ManifestTypes, ManifestWorkspaceView, ManifestWorkspaces } from '@umbraco-cms/backoffice/extension-registry';\r\n\r\nconst workspace: ManifestWorkspaces = {\r\n\ttype: 'workspace',\r\n\tkind: 'routable',\r\n\talias: 'Umb.Workspace.GodMode',\r\n\tname: 'God Mode Workspace',\r\n\tapi: () => import('./godmode-workspace.context'),\r\n\tmeta: {\t\t\r\n\t\tentityType: 'godmode',\r\n\t},\r\n};\r\n\r\nconst workspaceView: ManifestWorkspaceView = {\r\n\ttype: 'workspaceView',\r\n\talias: 'Umb.WorkspaceView.GodMode.View',\r\n\tname: 'God Mode Workspace View',\r\n\telement: () => import('./godmode-workspace-editor.element'),\r\n\tweight: 90,\r\n\tmeta: {\r\n\t\tlabel: 'View',\r\n\t\tpathname: 'browse',\r\n\t\ticon: 'edit'\r\n\t},\r\n\tconditions: [\r\n\t\t{\r\n\t\t\talias: 'Umb.Condition.WorkspaceAlias',\r\n\t\t\tmatch: workspace.alias\r\n\t\t}\r\n\t]\r\n};\r\n\r\nexport const manifests: Array<ManifestTypes> = [\r\n\tworkspace,\r\n\tworkspaceView\r\n];","import type { ManifestTypes } from '@umbraco-cms/backoffice/extension-registry';\r\n\r\nimport { manifests as godModeRootManifests } from './godmode-root/manifests';\r\nimport { manifests as godModeManifests } from './godmode/manifests';\r\n\r\nexport const manifests: Array<ManifestTypes> = [\r\n    ...godModeRootManifests,\r\n    ...godModeManifests\r\n];\r\n","import type { ManifestTypes } from '@umbraco-cms/backoffice/extension-registry';\r\n\r\nexport const manifests: Array<ManifestTypes> = [\r\n    {\r\n        type: 'menuItem',\r\n        kind: 'tree',\r\n        alias: 'Umb.MenuItem.GodMode',\r\n        name: 'God Mode Menu Item',\r\n        weight: 100,\r\n        meta: {\r\n            label: 'God Mode',\r\n            icon: 'icon-sience',\r\n            entityType: 'godmode',\r\n            treeAlias: 'Umb.Tree.GodMode',\r\n            menus: ['Umb.Menu.AdvancedSettings'],\r\n        }\r\n    }\r\n];","import { ManifestRepository, ManifestTree, ManifestTreeItem, ManifestTreeStore, ManifestTypes } from \"@umbraco-cms/backoffice/extension-registry\";\r\nimport { GOD_MODE_TREE_STORE_ALIAS, GOD_MODE_TREE_REPOSITORY_ALIAS } from \"../constants\";\r\n\r\nconst treeRepository: ManifestRepository = {\r\n\ttype: 'repository',\r\n\talias: GOD_MODE_TREE_REPOSITORY_ALIAS,\r\n\tname: 'God Mode Tree Repository',\r\n\tapi: () => import('./godmode-tree.repository'),\r\n};\r\n\r\nconst treeStore: ManifestTreeStore = {\r\n\ttype: 'treeStore',\r\n\talias: GOD_MODE_TREE_STORE_ALIAS,\r\n\tname: 'God Mode Tree Store',\r\n\tapi: () => import('./godmode-tree.store'),\r\n};\r\n\r\nconst tree: ManifestTree = {\r\n\ttype: 'tree',\r\n\tkind: 'default',\r\n\talias: \"Umb.Tree.GodMode\",\r\n\tname: 'God Mode Tree',\r\n\tmeta: {\r\n\t\trepositoryAlias: \"Umb.Repository.GodMode.Tree\",\r\n\t}\r\n};\r\n\r\nconst treeItem: ManifestTreeItem = {\r\n\ttype: 'treeItem',\r\n\tkind: 'default',\r\n\talias: 'Umb.TreeItem.GodMode',\r\n\tname: 'God Mode Tree Item',\r\n\tforEntityTypes: ['godmode-root', 'godmode', 'godmode-folder'],\r\n};\r\n\r\nexport const manifests: Array<ManifestTypes> = [\r\n\ttreeRepository,\r\n\ttreeStore,\r\n\ttree,\r\n\ttreeItem\r\n];","import { UmbEntryPointOnInit } from '@umbraco-cms/backoffice/extension-api';\r\nimport { UMB_AUTH_CONTEXT } from '@umbraco-cms/backoffice/auth';\r\nimport { OpenAPI } from './api/core/OpenAPI.ts';\r\n\r\nexport { GOD_MODE_TREE_ALIAS, GOD_MODE_TREE_REPOSITORY_ALIAS, GOD_MODE_TREE_STORE_ALIAS } from './constants';\r\nexport * from './elements/godmode-header.element';\r\n\r\nimport { manifests as workspaceManifests } from './workspace/manifests';\r\nimport { manifests as menuManifests } from './menu/manifests';\r\nimport { manifests as treeManifests } from './tree/manifests';\r\n\r\nexport const onInit: UmbEntryPointOnInit = (host, extensionRegistry) => {\r\n\r\n    extensionRegistry.registerMany([\r\n        ...workspaceManifests,\r\n        ...menuManifests,\r\n        ...treeManifests\r\n    ]);\r\n\r\n    host.consumeContext(UMB_AUTH_CONTEXT, async (auth) => {\r\n        if (!auth) return;\r\n\r\n        const umbOpenApi = auth.getOpenApiConfiguration();\r\n        OpenAPI.BASE = umbOpenApi.base;\r\n        OpenAPI.TOKEN = umbOpenApi.token;\r\n        OpenAPI.WITH_CREDENTIALS = umbOpenApi.withCredentials;\r\n        OpenAPI.CREDENTIALS = umbOpenApi.credentials;\r\n    });\r\n};\r\n"],"names":["Interceptors","fn","index","OpenAPI","GOD_MODE_TREE_REPOSITORY_ALIAS","GOD_MODE_TREE_STORE_ALIAS","GOD_MODE_TREE_ALIAS","GodModeHeaderElement","UmbElementMixin","LitElement","html","ifDefined","css","__decorateClass","property","customElement","workspace","manifests","workspaceView","godModeRootManifests","godModeManifests","treeRepository","treeStore","tree","treeItem","onInit","host","extensionRegistry","workspaceManifests","menuManifests","treeManifests","UMB_AUTH_CONTEXT","auth","umbOpenApi"],"mappings":";;;AAMO,MAAMA,EAAgB;AAAA,EAG3B,cAAc;AACZ,SAAK,OAAO;EACd;AAAA,EAEA,MAAMC,GAAmB;AACvB,UAAMC,IAAQ,KAAK,KAAK,QAAQD,CAAE;AAClC,IAAIC,MAAU,OACZ,KAAK,OAAO;AAAA,MACV,GAAG,KAAK,KAAK,MAAM,GAAGA,CAAK;AAAA,MAC3B,GAAG,KAAK,KAAK,MAAMA,IAAQ,CAAC;AAAA,IAAA;AAAA,EAGlC;AAAA,EAEA,IAAID,GAAmB;AACrB,SAAK,OAAO,CAAC,GAAG,KAAK,MAAMA,CAAE;AAAA,EAC/B;AACF;AAgBO,MAAME,IAAyB;AAAA,EACrC,MAAM;AAAA,EACN,aAAa;AAAA,EACb,aAAa;AAAA,EACb,SAAS;AAAA,EACT,UAAU;AAAA,EACV,OAAO;AAAA,EACP,UAAU;AAAA,EACV,SAAS;AAAA,EACT,kBAAkB;AAAA,EAClB,cAAc;AAAA,IAAC,SAAS,IAAIH,EAAa;AAAA,IAAE,UAAU,IAAIA,EAAa;AAAA,EACtE;AACD,GCtDaI,IAAiC,+BACjCC,IAA4B,0BAC5BC,IAAsB;;;;;;ACE5B,IAAMC,IAAN,cAAmCC,EAAgBC,CAAU,EAAE;AAAA,EAIlE,cAAc;AACJ;EACV;AAAA,EAEA,SAAS;AACE,WAAAC;AAAA;AAAA;AAAA,+BAGgBC,EAAU,KAAK,IAAI,CAAC;AAAA;AAAA;AAAA,EAG/C;AAiBJ;AAhCaJ,EAiBF,SAAS;AAAA,EACZK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAaJ;AA7BAC,EAAA;AAAA,EADCC,EAAS,EAAE,MAAM,QAAQ,WAAW,IAAM;AAAA,GADlCP,EAET,WAAA,QAAA,CAAA;AAFSA,IAANM,EAAA;AAAA,EADNE,EAAc,gBAAgB;AAAA,GAClBR,CAAA;ACFb,MAAMS,IAA+B;AAAA,EACpC,MAAM;AAAA,EACN,OAAO;AAAA,EACP,MAAM;AAAA,EACN,SAAS,MAAM,OAAO,8CAAkC;AAAA,EACxD,MAAM;AAAA,IACL,YAAY;AAAA,EACb;AACD,GAEaC,IAAkC,CAACD,CAAS,GCVnDA,IAAgC;AAAA,EACrC,MAAM;AAAA,EACN,MAAM;AAAA,EACN,OAAO;AAAA,EACP,MAAM;AAAA,EACN,KAAK,MAAM,OAAO,yCAA6B;AAAA,EAC/C,MAAM;AAAA,IACL,YAAY;AAAA,EACb;AACD,GAEME,IAAuC;AAAA,EAC5C,MAAM;AAAA,EACN,OAAO;AAAA,EACP,MAAM;AAAA,EACN,SAAS,MAAM,OAAO,gDAAoC;AAAA,EAC1D,QAAQ;AAAA,EACR,MAAM;AAAA,IACL,OAAO;AAAA,IACP,UAAU;AAAA,IACV,MAAM;AAAA,EACP;AAAA,EACA,YAAY;AAAA,IACX;AAAA,MACC,OAAO;AAAA,MACP,OAAOF,EAAU;AAAA,IAClB;AAAA,EACD;AACD,GAEaC,IAAkC;AAAA,EAC9CD;AAAA,EACAE;AACD,GC9BaD,IAAkC;AAAA,EAC3C,GAAGE;AAAAA,EACH,GAAGC;AACP,GCNaH,IAAkC;AAAA,EAC3C;AAAA,IACI,MAAM;AAAA,IACN,MAAM;AAAA,IACN,OAAO;AAAA,IACP,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,MAAM;AAAA,MACF,OAAO;AAAA,MACP,MAAM;AAAA,MACN,YAAY;AAAA,MACZ,WAAW;AAAA,MACX,OAAO,CAAC,2BAA2B;AAAA,IACvC;AAAA,EACJ;AACJ,GCdMI,IAAqC;AAAA,EAC1C,MAAM;AAAA,EACN,OAAOjB;AAAA,EACP,MAAM;AAAA,EACN,KAAK,MAAM,OAAO,uCAA2B;AAC9C,GAEMkB,IAA+B;AAAA,EACpC,MAAM;AAAA,EACN,OAAOjB;AAAA,EACP,MAAM;AAAA,EACN,KAAK,MAAM,OAAO,kCAAsB;AACzC,GAEMkB,IAAqB;AAAA,EAC1B,MAAM;AAAA,EACN,MAAM;AAAA,EACN,OAAO;AAAA,EACP,MAAM;AAAA,EACN,MAAM;AAAA,IACL,iBAAiB;AAAA,EAClB;AACD,GAEMC,IAA6B;AAAA,EAClC,MAAM;AAAA,EACN,MAAM;AAAA,EACN,OAAO;AAAA,EACP,MAAM;AAAA,EACN,gBAAgB,CAAC,gBAAgB,WAAW,gBAAgB;AAC7D,GAEaP,IAAkC;AAAA,EAC9CI;AAAA,EACAC;AAAA,EACAC;AAAA,EACAC;AACD,GC7BaC,IAA8B,CAACC,GAAMC,MAAsB;AAEpE,EAAAA,EAAkB,aAAa;AAAA,IAC3B,GAAGC;AAAAA,IACH,GAAGC;AAAAA,IACH,GAAGC;AAAAA,EAAA,CACN,GAEIJ,EAAA,eAAeK,GAAkB,OAAOC,MAAS;AAClD,QAAI,CAACA;AAAM;AAEL,UAAAC,IAAaD,EAAK;AACxB,IAAA7B,EAAQ,OAAO8B,EAAW,MAC1B9B,EAAQ,QAAQ8B,EAAW,OAC3B9B,EAAQ,mBAAmB8B,EAAW,iBACtC9B,EAAQ,cAAc8B,EAAW;AAAA,EAAA,CACpC;AACL;"}