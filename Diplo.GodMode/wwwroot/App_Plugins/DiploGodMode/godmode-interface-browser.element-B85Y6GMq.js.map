{"version":3,"file":"godmode-interface-browser.element-B85Y6GMq.js","sources":["../../../assets/src/workspace/godmode/views/godmode-interface-browser.element.ts"],"sourcesContent":["import { customElement, html, css, state } from \"@umbraco-cms/backoffice/external/lit\";\nimport { UmbLitElement } from \"@umbraco-cms/backoffice/lit-element\";\nimport { DirectionModel, GodModeService, NameValue, TypeMap } from \"../../../api\";\nimport { tryExecuteAndNotify } from \"@umbraco-cms/backoffice/resources\";\nimport { UUISelectEvent } from \"@umbraco-cms/backoffice/external/uui\";\nimport { sortData } from \"../../../helpers/sort\";\nimport { UmbTableColumn, UmbTableConfig, UmbTableElement, UmbTableItem, UmbTableOrderedEvent } from \"@umbraco-cms/backoffice/components\";\n\n@customElement('godmode-interface-browser')\nexport class GodModeInterfaceBrowserElement extends UmbLitElement {\n\n    @state()\n    private _tableConfig: UmbTableConfig = {\n        allowSelection: false,\n        hideIcon: true\n    }\n\n    @state()\n    private _tableColumns: Array<UmbTableColumn> = [\n        {\n            name: 'Implemented By',\n            alias: 'name',\n            allowSorting: true\n        },\n        {\n            name: 'Namespace',\n            alias: 'namespace',\n            allowSorting: true\n        },\n        {\n            name: 'Module',\n            alias: 'module',\n            allowSorting: true\n        },\n        {\n            name: 'Base Type',\n            alias: 'baseType',\n            allowSorting: true\n        }\n    ];\n\n    @state()\n    private _tableItems: Array<UmbTableItem> = [];\n\n    @state()\n    assemblies: Array<NameValue> = [];\n\n    @state()\n    assemblyOptions: Array<Option> = [];\n\n    @state()\n    currentAssembly: NameValue | undefined = undefined;\n\n    @state()\n    currentAssemblyOption: string = '';\n\n    @state()\n    interfaces: Array<TypeMap> = [];\n\n    @state()\n    interfaceOptions: Array<Option> = [];\n\n    @state()\n    currentInterface: TypeMap | undefined = undefined;\n\n    @state()\n    currentInterfaceOption: string = '';\n\n    @state()\n    types: Array<TypeMap> = [];\n\n    constructor() {\n        super();\n        this.#loadAssemblies();\n    }\n\n    #sortingHandler(event: UmbTableOrderedEvent) {\n        const table = event.target as UmbTableElement;\n        const orderingColumn = table.orderingColumn as keyof TypeMap;\n        const orderingDesc = table.orderingDesc;\n\n        this.types = sortData(this.types, orderingColumn, orderingDesc ? DirectionModel.DESCENDING : DirectionModel.ASCENDING);\n        this._tableItems = this.#mapData(this.types);\n    }\n\n    async #loadAssemblies() {\n        const { data } = await tryExecuteAndNotify(this, GodModeService.getUmbracoManagementApiV1GodModeGetAssemblies());\n\n        if (data) {\n            this.assemblies = data;\n\n            this.assemblyOptions = this.assemblies.map((assembly) => ({ name: assembly.name, value: assembly.name }));\n            this.assemblyOptions.unshift({ name: 'Please select', value: '' })\n        }\n    }\n\n    async #getInterfaces(event: UUISelectEvent) {\n        this.currentAssemblyOption = event.target.value as string;\n\n        if (this.currentAssemblyOption !== '') {\n            this.currentAssembly = this.assemblies.find(x => x.name === this.currentAssemblyOption);\n\n            const { data } = await tryExecuteAndNotify(this, GodModeService.getUmbracoManagementApiV1GodModeGetInterfacesFrom({ assembly: this.currentAssemblyOption }));\n\n            if (data) {\n                this.interfaces = data;\n\n                this.interfaceOptions = this.interfaces.map((int) => ({ name: int.name, value: int.name }));\n                this.interfaceOptions.unshift({ name: 'Please select', value: '' });\n            }\n        }\n        else {\n            this.currentAssembly = undefined;\n            this.currentInterface = undefined;\n            this.currentInterfaceOption = '';\n            this.interfaces = [];\n            this.interfaceOptions = [];\n        }\n    }\n\n    async #getTypes(event: UUISelectEvent) {\n        this.currentInterfaceOption = event.target.value as string;\n\n        if (this.currentInterfaceOption !== '') {\n            this.currentInterface = this.interfaces.find(x => x.name === this.currentInterfaceOption);\n\n            if (this.currentInterface) {\n                const { data } = await tryExecuteAndNotify(this, GodModeService.getUmbracoManagementApiV1GodModeGetTypesAssignableFrom({ baseType: this.currentInterface.loadableName }));\n\n                if (data) {\n                    this.types = data;\n                    this._tableItems = this.#mapData(this.types);\n                }\n            }\n        }\n        else {\n            this.currentInterface = undefined;\n            this.types = [];\n        }\n    }\n\n    #mapData(data: TypeMap[]): UmbTableItem[] {\n        return data.map((data) => {\n            return {\n                id: data.name,\n                data: [\n                    {\n                        columnAlias: 'name',\n                        value: data.name\n                    },\n                    {\n                        columnAlias: 'namespace',\n                        value: data.namespace\n                    },\n                    {\n                        columnAlias: 'module',\n                        value: data.module\n                    },\n                    {\n                        columnAlias: 'baseType',\n                        value: data.baseType\n                    }\n                ]\n            }\n        });\n    }\n\n    render() {\n        return html`\n      <umb-body-layout>\n        <godmode-header name=\"Interface Browser\" slot=\"header\"></godmode-header>\n\n        <uui-box>\n          <div class=\"grid\">\n              <div>\n                  <uui-label for=\"search-assembly\">Assembly:</uui-label>\n                  <uui-select\n                      id=\"search-assembly\"\n                      .options=${this.assemblyOptions}\n                      @change=${this.#getInterfaces}\n                      .value=${this.currentAssemblyOption}>\n                  </uui-select>\n              </div>\n              ${this.currentAssemblyOption !== '' ?\n                html`\n                  <div>\n                      <uui-label for=\"search-interface\">Interface:</uui-label>\n                      <uui-select\n                          id=\"search-interface\"\n                          .options=${this.interfaceOptions}\n                          @change=${this.#getTypes}\n                          .value=${this.currentInterfaceOption}>\n                      </uui-select>\n                  </div>\n              ` : html``\n            }\n          </div>\n        </uui-box>\n\n        ${this.currentAssemblyOption === '' ?\n                html`\n            <uui-box>Please select an Assembly (above) and then the Interface you wish to browse. You will then see all types that implement the Interface.</uui-box>\n          `\n                :\n                html`\n            <h5>${this.currentAssembly?.value}</h5>\n\n            ${this.types.length !== 0 ?\n                        html`\n                <uui-box style=\"--uui-box-default-padding: 0;\">\n                  ${this._tableItems.length !== 0 ?\n                                html`\n                        <uui-box style=\"--uui-box-default-padding: 0;\">\n                            <umb-table .config=${this._tableConfig} .columns=${this._tableColumns} .items=${this._tableItems} @ordered=${this.#sortingHandler} />\n                        </uui-box>\n                    ` : html``}\n                </uui-box>\n              ` : html``\n                    }\n          `\n            }\n      </umb-body-layout>\n    `\n    }\n\n    static styles = [\n        css`\n        .grid {\n            display: grid;\n            grid-template-columns: repeat(3, 1fr);\n            gap: 20px;\n\n            div {\n                display: flex;\n                flex-direction: column;\n                align-items: flex-start;\n            }\n        }\n\n        uui-box {\n            margin-bottom: 20px;\n        }\n\n        uui-table-head-cell button {\n            padding: var(--uui-size-4) var(--uui-size-5);\n            background-color: transparent;\n            color: inherit;\n            border: none;\n            cursor: pointer;\n            font-family: var(--uui-font-family);\n            font-weight: inherit;\n            font-size: inherit;\n            display: inline-flex;\n            align-items: center;\n            justify-content: space-between;\n            width: 100%;\n        }\n    `\n    ]\n}\n\nexport default GodModeInterfaceBrowserElement;\n\ndeclare global {\n    interface HTMLElementTagNameMap {\n        'godmode-interface-browser': GodModeInterfaceBrowserElement;\n    }\n}\n"],"names":["_sortingHandler","sortingHandler_fn","_loadAssemblies","loadAssemblies_fn","_getInterfaces","getInterfaces_fn","_getTypes","getTypes_fn","_mapData","mapData_fn","GodModeInterfaceBrowserElement","UmbLitElement","__privateAdd","__privateMethod","html","_a","event","table","orderingColumn","orderingDesc","sortData","DirectionModel","data","tryExecuteAndNotify","GodModeService","assembly","x","int","css","__decorateClass","state","customElement","GodModeInterfaceBrowserElement$1"],"mappings":";;;;;;;;;;;;;;;2DAAAA,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC;AASa,IAAAC,IAAN,cAA6CC,EAAc;AAAA,EA8D9D,cAAc;AACJ,aAIVC,EAAA,MAAAZ,CAAA,GASMY,EAAA,MAAAV,CAAA,GAWAU,EAAA,MAAAR,CAAA,GAwBAQ,EAAA,MAAAN,CAAA,GAqBNM,EAAA,MAAAJ,CAAA,GAjIA,KAAQ,eAA+B;AAAA,MACnC,gBAAgB;AAAA,MAChB,UAAU;AAAA,IAAA,GAId,KAAQ,gBAAuC;AAAA,MAC3C;AAAA,QACI,MAAM;AAAA,QACN,OAAO;AAAA,QACP,cAAc;AAAA,MAClB;AAAA,MACA;AAAA,QACI,MAAM;AAAA,QACN,OAAO;AAAA,QACP,cAAc;AAAA,MAClB;AAAA,MACA;AAAA,QACI,MAAM;AAAA,QACN,OAAO;AAAA,QACP,cAAc;AAAA,MAClB;AAAA,MACA;AAAA,QACI,MAAM;AAAA,QACN,OAAO;AAAA,QACP,cAAc;AAAA,MAClB;AAAA,IAAA,GAIJ,KAAQ,cAAmC,IAG3C,KAAA,aAA+B,IAG/B,KAAA,kBAAiC,IAGQ,KAAA,kBAAA,QAGT,KAAA,wBAAA,IAGhC,KAAA,aAA6B,IAG7B,KAAA,mBAAkC,IAGM,KAAA,mBAAA,QAGP,KAAA,yBAAA,IAGjC,KAAA,QAAwB,IAIpBK,EAAA,MAAKX,GAALC,CAAA,EAAA,KAAA,IAAA;AAAA,EACJ;AAAA,EA6FA,SAAS;;AACE,WAAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCAUkB,KAAK,eAAe;AAAA,gCACrBD,QAAKT,GAAcC,CAAA,CAAA;AAAA,+BACpB,KAAK,qBAAqB;AAAA;AAAA;AAAA,gBAGzC,KAAK,0BAA0B,KAC/BS;AAAA;AAAA;AAAA;AAAA;AAAA,qCAKqB,KAAK,gBAAgB;AAAA,oCACtBD,QAAKP,GAASC,CAAA,CAAA;AAAA,mCACf,KAAK,sBAAsB;AAAA;AAAA;AAAA,kBAG5CO,GACN;AAAA;AAAA;AAAA;AAAA,UAIF,KAAK,0BAA0B,KACzBA;AAAA;AAAA,cAIAA;AAAA,mBACEC,IAAA,KAAK,oBAAL,gBAAAA,EAAsB,KAAK;AAAA;AAAA,cAE/B,KAAK,MAAM,WAAW,IACZD;AAAA;AAAA,oBAEJ,KAAK,YAAY,WAAW,IAChBA;AAAA;AAAA,iDAEiB,KAAK,YAAY,aAAa,KAAK,aAAa,WAAW,KAAK,WAAW,aAAaD,EAAA,MAAKb,GAAeC,CAAA,CAAA;AAAA;AAAA,wBAErIa,GAAM;AAAA;AAAA,kBAEZA,GACE;AAAA,WAER;AAAA;AAAA;AAAA,EAGR;AAoCJ;AAvLId,IAAA,oBAAA,QAAA;AAAAC,IAAe,SAACe,GAA6B;AACzC,QAAMC,IAAQD,EAAM,QACdE,IAAiBD,EAAM,gBACvBE,IAAeF,EAAM;AAEtB,OAAA,QAAQG,EAAS,KAAK,OAAOF,GAAgBC,IAAeE,EAAe,aAAaA,EAAe,SAAS,GACrH,KAAK,cAAcR,EAAA,MAAKL,GAALC,CAAA,EAAA,KAAA,MAAc,KAAK,KAAA;AAC1C;AAEMP,IAAA,oBAAA,QAAA;AAAAC,IAAe,iBAAG;AACd,QAAA,EAAE,MAAAmB,MAAS,MAAMC,EAAoB,MAAMC,EAAe,+CAA+C;AAE/G,EAAIF,MACA,KAAK,aAAaA,GAElB,KAAK,kBAAkB,KAAK,WAAW,IAAI,CAACG,OAAc,EAAE,MAAMA,EAAS,MAAM,OAAOA,EAAS,OAAO,GACxG,KAAK,gBAAgB,QAAQ,EAAE,MAAM,iBAAiB,OAAO,IAAI;AAEzE;AAEMrB,IAAA,oBAAA,QAAA;AAAAC,IAAc,eAACW,GAAuB;AAGpC,MAFC,KAAA,wBAAwBA,EAAM,OAAO,OAEtC,KAAK,0BAA0B,IAAI;AAC9B,SAAA,kBAAkB,KAAK,WAAW,KAAK,OAAKU,EAAE,SAAS,KAAK,qBAAqB;AAEtF,UAAM,EAAE,MAAAJ,EAAA,IAAS,MAAMC,EAAoB,MAAMC,EAAe,kDAAkD,EAAE,UAAU,KAAK,sBAAA,CAAuB,CAAC;AAE3J,IAAIF,MACA,KAAK,aAAaA,GAElB,KAAK,mBAAmB,KAAK,WAAW,IAAI,CAACK,OAAS,EAAE,MAAMA,EAAI,MAAM,OAAOA,EAAI,OAAO,GAC1F,KAAK,iBAAiB,QAAQ,EAAE,MAAM,iBAAiB,OAAO,IAAI;AAAA,EACtE;AAGA,SAAK,kBAAkB,QACvB,KAAK,mBAAmB,QACxB,KAAK,yBAAyB,IAC9B,KAAK,aAAa,IAClB,KAAK,mBAAmB;AAEhC;AAEMrB,IAAA,oBAAA,QAAA;AAAAC,IAAS,eAACS,GAAuB;AAG/B,MAFC,KAAA,yBAAyBA,EAAM,OAAO,OAEvC,KAAK,2BAA2B;AAGhC,QAFK,KAAA,mBAAmB,KAAK,WAAW,KAAK,OAAKU,EAAE,SAAS,KAAK,sBAAsB,GAEpF,KAAK,kBAAkB;AACvB,YAAM,EAAE,MAAAJ,EAAS,IAAA,MAAMC,EAAoB,MAAMC,EAAe,uDAAuD,EAAE,UAAU,KAAK,iBAAiB,aAAA,CAAc,CAAC;AAExK,MAAIF,MACA,KAAK,QAAQA,GACb,KAAK,cAAcT,EAAA,MAAKL,GAALC,CAAA,EAAA,KAAA,MAAc,KAAK,KAAA;AAAA,IAE9C;AAAA;AAGA,SAAK,mBAAmB,QACxB,KAAK,QAAQ;AAErB;AAEAD,IAAA,oBAAA,QAAA;AAAAC,IAAQ,SAACa,GAAiC;AAC/B,SAAAA,EAAK,IAAI,CAACA,OACN;AAAA,IACH,IAAIA,EAAK;AAAA,IACT,MAAM;AAAA,MACF;AAAA,QACI,aAAa;AAAA,QACb,OAAOA,EAAK;AAAA,MAChB;AAAA,MACA;AAAA,QACI,aAAa;AAAA,QACb,OAAOA,EAAK;AAAA,MAChB;AAAA,MACA;AAAA,QACI,aAAa;AAAA,QACb,OAAOA,EAAK;AAAA,MAChB;AAAA,MACA;AAAA,QACI,aAAa;AAAA,QACb,OAAOA,EAAK;AAAA,MAChB;AAAA,IACJ;AAAA,EAAA,EAEP;AACL;AA5JSZ,EAwNF,SAAS;AAAA,EACZkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgCJ;AAtPQC,EAAA;AAAA,EADPC,EAAM;AAAA,GAFEpB,EAGD,WAAA,gBAAA,CAAA;AAMAmB,EAAA;AAAA,EADPC,EAAM;AAAA,GAREpB,EASD,WAAA,iBAAA,CAAA;AAwBAmB,EAAA;AAAA,EADPC,EAAM;AAAA,GAhCEpB,EAiCD,WAAA,eAAA,CAAA;AAGRmB,EAAA;AAAA,EADCC,EAAM;AAAA,GAnCEpB,EAoCT,WAAA,cAAA,CAAA;AAGAmB,EAAA;AAAA,EADCC,EAAM;AAAA,GAtCEpB,EAuCT,WAAA,mBAAA,CAAA;AAGAmB,EAAA;AAAA,EADCC,EAAM;AAAA,GAzCEpB,EA0CT,WAAA,mBAAA,CAAA;AAGAmB,EAAA;AAAA,EADCC,EAAM;AAAA,GA5CEpB,EA6CT,WAAA,yBAAA,CAAA;AAGAmB,EAAA;AAAA,EADCC,EAAM;AAAA,GA/CEpB,EAgDT,WAAA,cAAA,CAAA;AAGAmB,EAAA;AAAA,EADCC,EAAM;AAAA,GAlDEpB,EAmDT,WAAA,oBAAA,CAAA;AAGAmB,EAAA;AAAA,EADCC,EAAM;AAAA,GArDEpB,EAsDT,WAAA,oBAAA,CAAA;AAGAmB,EAAA;AAAA,EADCC,EAAM;AAAA,GAxDEpB,EAyDT,WAAA,0BAAA,CAAA;AAGAmB,EAAA;AAAA,EADCC,EAAM;AAAA,GA3DEpB,EA4DT,WAAA,SAAA,CAAA;AA5DSA,IAANmB,EAAA;AAAA,EADNE,EAAc,2BAA2B;AAAA,GAC7BrB,CAAA;AA4Pb,MAAAsB,IAAetB;"}