{"version":3,"file":"godmode-utility-browser.element-Bqw6dBfD.js","sources":["../../../assets/src/workspace/godmode/views/godmode-utility-browser.element.ts"],"sourcesContent":["import { tryExecuteAndNotify } from '@umbraco-cms/backoffice/resources';\nimport { css, customElement, html, state } from \"@umbraco-cms/backoffice/external/lit\";\nimport { UmbLitElement } from \"@umbraco-cms/backoffice/lit-element\";\nimport { GodModeService } from '../../../api';\nimport { UMB_NOTIFICATION_CONTEXT, UmbNotificationContext } from '@umbraco-cms/backoffice/notification';\nimport { UmbLanguageCollectionRepository, UmbLanguageDetailModel } from '@umbraco-cms/backoffice/language';\nimport { UUISelectEvent } from '@umbraco-cms/backoffice/external/uui';\n\n@customElement('godmode-utility-browser')\nexport class GodModeUtilityBrowserElement extends UmbLitElement {\n    #notificationContext?: UmbNotificationContext;\n    #collectionRepository = new UmbLanguageCollectionRepository(this);\n\n    @state()\n    private languages: Array<UmbLanguageDetailModel> = [];\n\n    @state()\n    private cultures: Array<Option> = [];\n\n    @state()\n    private _selectedCulture: string = '';\n\n    @state()\n    warmingUp: boolean = false;\n\n    @state()\n    warmUpCurrentUrl: string = '';\n\n    @state()\n    warmUpCurrent: number = 1;\n\n    @state()\n    warmUpCount: number = 0;\n\n    constructor() {\n        super();\n\n        this.consumeContext(UMB_NOTIFICATION_CONTEXT, (_instance) => {\n            this.#notificationContext = _instance;\n        });\n\n        this.#observeLanguages();\n    }\n\n    async #observeLanguages() {\n        const { data } = await this.#collectionRepository.requestCollection({});\n        \n        if (data) {\n            this.languages = data.items;\n\n            const cultures = this.languages.map(x => {\n                return { name: x.name, value: x.unique }\n            });\n\n            this.cultures = cultures;\n        }\n    }\n\n    async clearUmbracoCache(cacheName: string) {\n        const { data } = await tryExecuteAndNotify(this, GodModeService.postUmbracoManagementApiV1GodModeClearUmbracoCache({ cache: cacheName }));\n\n        if (data) {\n            if (data.message) {\n                if (data.responseType === 'Error') {\n                    this.#notificationContext?.peek('danger', { data: { message: data.message } });\n                }\n                else if (data.responseType === 'Success') {\n                    this.#notificationContext?.peek('positive', { data: { message: data.message } });\n                }\n                else if (data.responseType === 'Warning') {\n                    this.#notificationContext?.peek('warning', { data: { message: data.message } });\n                }\n            }\n        }\n    }\n\n    async purgeMediaCache() {\n        if (window.confirm(\"This will attempt to delete all the cached image crops on disk in the TEMP/MediaCache. IO operations can sometimes fail. Are you sure?\")) {\n            const { data } = await tryExecuteAndNotify(this, GodModeService.postUmbracoManagementApiV1GodModePurgeMediaCache());\n\n            if (data) {\n                if (data.message) {\n                    if (data.responseType === 'Error') {\n                        this.#notificationContext?.peek('danger', { data: { message: data.message } });\n                    }\n                    else if (data.responseType === 'Success') {\n                        this.#notificationContext?.peek('positive', { data: { message: data.message } });\n                    }\n                    else if (data.responseType === 'Warning') {\n                        this.#notificationContext?.peek('warning', { data: { message: data.message } });\n                    }\n                }\n            }\n        }\n    }\n\n    async restartAppPool() {\n        if (window.confirm(\"This will take the site offline (and won't restart it). Are you really, really, really sure?\")) {\n            const { data } = await tryExecuteAndNotify(this, GodModeService.postUmbracoManagementApiV1GodModeRestartAppPool());\n\n            if (data) {\n                if (data.message) {\n                    if (data.responseType === 'Error') {\n                        this.#notificationContext?.peek('danger', { data: { message: data.message } });\n                    }\n                    else if (data.responseType === 'Success') {\n                        this.#notificationContext?.peek('positive', { data: { message: data.message } });\n                    }\n                    else if (data.responseType === 'Warning') {\n                        this.#notificationContext?.peek('warning', { data: { message: data.message } });\n                    }\n                }\n            }\n        }\n    }\n\n    async warmUpTemplates() {\n        const { data } = await tryExecuteAndNotify(this, GodModeService.getUmbracoManagementApiV1GodModeGetTemplateUrlsToPing());\n\n        if (data) {\n            await this._pingUrls(data);\n        }\n    }\n\n    async pingUrls() {\n        const { data } = await tryExecuteAndNotify(this, GodModeService.getUmbracoManagementApiV1GodModeGetUrlsToPing({ culture: this._selectedCulture }));\n\n        if (data) {\n            await this._pingUrls(data);\n        }\n    }\n\n    async _pingUrls(urls: string[]) {\n        this.warmingUp = true;\n        this.warmUpCount = urls.length;\n\n        if (this.warmUpCount === 0) {\n            this.#notificationContext?.peek('warning', { data: { message: \"THe URL list was empty...\" } });\n        }\n\n        urls.forEach(async url => {\n            this.warmingUp = true;\n            this.warmUpCurrentUrl = url;\n            const response = await fetch(url);\n\n            if (response.ok) {\n                this.warmUpCurrent++;\n            }\n            else {\n                this.warmUpCurrent++;\n            }\n\n            if (this.warmUpCurrent === this.warmUpCount) {\n                this.warmingUp = false;\n            }\n        });\n    }\n\n    #onSelect(event: UUISelectEvent) {\n        this._selectedCulture = event.target.value as string;\n    }\n\n    #renderWarmup() {\n        if (this.warmingUp) {\n            return html`\n                <uui-box>\n                    <uui-loader-bar animationDuration=\"1.5\" style=\"color: black\"></uui-loader-bar>\n                    <p>Warming up ${this.warmUpCurrent} of ${this.warmUpCount} - pinging URL: <a href=${this.warmUpCurrentUrl} target=\"_blank\">${this.warmUpCurrentUrl}</a></p>\n                </uui-box>\n            `;\n        }\n\n        else return html``;\n    }\n\n    render() {\n        return html`\n            <umb-body-layout>\n                <godmode-header name=\"Utility Browser\" slot=\"header\"></godmode-header>\n                <uui-box headline=\"Caches\">\n                    <div class=\"grid\">\n                        <div>\n                            <uui-button type=\"button\" look=\"primary\" color=\"warning\" label=\"Clear Request Cache\" @click=${() => this.clearUmbracoCache('Request')}>\n                                <uui-icon name=\"icon-delete\"></uui-icon> Clear Request Cache\n                            </uui-button>\n                        </div>\n\n                        <div>\n                            <uui-button type=\"button\" look=\"primary\" color=\"warning\" label=\"Clear Runtime Cache\" @click=${() => this.clearUmbracoCache('Runtime')}>\n                                <uui-icon name=\"icon-delete\"></uui-icon> Clear Runtime Cache\n                            </uui-button>\n                        </div>\n\n                        <div>\n                            <uui-button type=\"button\" look=\"primary\" color=\"warning\" label=\"Clear Isolated Cache\" @click=${() => this.clearUmbracoCache('Isolated')}>\n                                <uui-icon name=\"icon-delete\"></uui-icon> Clear Isolated Cache\n                            </uui-button>\n                        </div>\n\n                        <div>\n                            <uui-button type=\"button\" look=\"primary\" color=\"warning\" label=\"Clear Partial Cache\" @click=${() => this.clearUmbracoCache('Partial')}>\n                                <uui-icon name=\"icon-delete\"></uui-icon> Clear Partial Cache\n                            </uui-button>\n                        </div>\n\n                        <div>\n                            <uui-button type=\"button\" look=\"primary\" color=\"warning\" label=\"Clear Other Cache\" @click=${() => this.clearUmbracoCache('Other')}>\n                                <uui-icon name=\"icon-delete\"></uui-icon> Clear Other Cache\n                            </uui-button>\n                        </div>\n\n                        <div>\n                            <uui-button type=\"button\" look=\"primary\" color=\"danger\" label=\"Clear All Caches\" @click=${() => this.clearUmbracoCache('all')}>\n                                <uui-icon name=\"icon-delete\"></uui-icon> Clear All Caches\n                            </uui-button>\n                        </div>\n                    </div>\n                </uui-box>\n\n                <uui-box headline=\"TEMP Files\">\n                    <div class=\"grid\">\n                        <div>\n                            <uui-button type=\"button\" look=\"primary\" color=\"warning\" label=\"Purge Media Cache\" @click=${() => this.purgeMediaCache()}>\n                                <uui-icon name=\"icon-hard-drive\"></uui-icon> Purge Media Cache\n                            </uui-button>\n                        </div>\n                    </div>\n                </uui-box>\n\n                <uui-box headline=\"Application\">\n                    <div class=\"grid\">\n                        <div>\n                            <uui-button type=\"button\" look=\"primary\" color=\"danger\" label=\"Stop Application\" @click=${() => this.restartAppPool()}>\n                                <uui-icon name=\"icon-scull\"></uui-icon> Stop Application\n                            </uui-button>\n                        </div>\n                        <div>\n                            <uui-button type=\"button\" look=\"primary\" color=\"default\" label=\"Warm-Up Templates\" @click=${() => this.warmUpTemplates()}>\n                                <uui-icon name=\"icon-server\"></uui-icon> Warm-Up Templates\n                            </uui-button>\n                        </div>\n                        <div>\n                            <uui-button type=\"button\" look=\"primary\" color=\"default\" label=\"Ping URLs\" @click=${() => this.pingUrls()}>\n                                <uui-icon name=\"icon-server\"></uui-icon> Ping URLs\n                            </uui-button>\n                            <uui-select\n                                placeholder=\"No culture\"\n                                .options=${this.cultures}\n                                @change=${this.#onSelect}>\n                            </uui-select>\n                        </div>\n                    </div>\n                </uui-box>\n\n                ${this.#renderWarmup()}\n            </umb-body-layout>\n        `\n    }\n\n    static styles = [\n        css`\n            .grid {\n                display: grid;\n                grid-template-columns: repeat(3, 1fr);\n                gap: 20px;\n            }\n\n            uui-box {\n                margin-bottom: 20px;\n            }\n        `\n    ]\n}\n\nexport default GodModeUtilityBrowserElement;\n\ndeclare global {\n    interface HTMLElementTagNameMap {\n        'godmode-utility-browser': GodModeUtilityBrowserElement;\n    }\n}\n"],"names":["_notificationContext","_collectionRepository","_observeLanguages","observeLanguages_fn","_onSelect","onSelect_fn","_renderWarmup","renderWarmup_fn","GodModeUtilityBrowserElement","UmbLitElement","__privateAdd","UmbLanguageCollectionRepository","UMB_NOTIFICATION_CONTEXT","_instance","__privateSet","__privateMethod","cacheName","data","tryExecuteAndNotify","GodModeService","_a","__privateGet","_b","_c","urls","url","html","cultures","x","event","css","__decorateClass","state","customElement","GodModeUtilityBrowserElement$1"],"mappings":"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"}