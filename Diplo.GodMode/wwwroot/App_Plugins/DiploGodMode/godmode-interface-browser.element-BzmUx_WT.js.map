{"version":3,"file":"godmode-interface-browser.element-BzmUx_WT.js","sources":["../../../assets/src/workspace/godmode/views/godmode-interface-browser.element.ts"],"sourcesContent":["import { customElement, html, css, state, repeat } from \"@umbraco-cms/backoffice/external/lit\";\nimport { UmbLitElement } from \"@umbraco-cms/backoffice/lit-element\";\nimport { GodModeService, NameValue, TypeMap } from \"../../../api\";\nimport { tryExecuteAndNotify } from \"@umbraco-cms/backoffice/resources\";\nimport { UUISelectEvent } from \"@umbraco-cms/backoffice/external/uui\";\n\n@customElement('godmode-interface-browser')\nexport class GodModeInterfaceBrowserElement extends UmbLitElement {\n  @state()\n  assemblies: Array<NameValue> = [];\n\n  @state()\n  assemblyOptions: Array<Option> = [];\n\n  @state()\n  currentAssembly: NameValue | undefined = undefined;\n\n  @state()\n  currentAssemblyOption: string = '';\n\n  @state()\n  interfaces: Array<TypeMap> = [];\n\n  @state()\n  interfaceOptions: Array<Option> = [];\n\n  @state()\n  currentInterface: TypeMap | undefined = undefined;\n\n  @state()\n  currentInterfaceOption: string = '';\n\n  @state()\n  types: Array<TypeMap> = [];\n\n  constructor() {\n    super();\n    this.#loadAssemblies();\n  }\n\n  async #loadAssemblies() {\n    const { data } = await tryExecuteAndNotify(this, GodModeService.getUmbracoManagementApiV1GodModeGetAssemblies());\n\n    if (data) {\n      this.assemblies = data;\n\n      this.assemblyOptions = this.assemblies.map((assembly) => ({ name: assembly.name, value: assembly.name }));\n      this.assemblyOptions.unshift({ name: 'Please select', value: '' })\n    }\n  }\n\n  async #getInterfaces(event: UUISelectEvent) {\n    this.currentAssemblyOption = event.target.value as string;\n    \n    if (this.currentAssemblyOption !== '') {\n      this.currentAssembly = this.assemblies.find(x => x.name === this.currentAssemblyOption);\n\n      const { data } = await tryExecuteAndNotify(this, GodModeService.getUmbracoManagementApiV1GodModeGetInterfacesFrom({ assembly: this.currentAssemblyOption }));\n\n      if (data) {\n        this.interfaces = data;\n\n        this.interfaceOptions = this.interfaces.map((int) => ({ name: int.name, value: int.name }));\n        this.interfaceOptions.unshift({ name: 'Please select', value: '' });\n      }\n    }\n    else {\n      this.currentAssembly = undefined;\n      this.currentInterface = undefined;\n      this.currentInterfaceOption = '';\n      this.interfaces = [];\n      this.interfaceOptions = [];\n    }\n  }\n\n  async #getTypes(event: UUISelectEvent) {\n    this.currentInterfaceOption = event.target.value as string;\n\n    if (this.currentInterfaceOption !== '') {\n      this.currentInterface = this.interfaces.find(x => x.name === this.currentInterfaceOption);\n\n      if (this.currentInterface) {\n        const { data } = await tryExecuteAndNotify(this, GodModeService.getUmbracoManagementApiV1GodModeGetTypesAssignableFrom({ baseType: this.currentInterface.loadableName }));\n\n        if (data) {\n          this.types = data;\n        }\n      }\n    }\n    else {\n      this.currentInterface = undefined;\n      this.types = [];\n    }\n  }\n\n  render() {\n    return html`\n      <umb-body-layout>\n        <godmode-header name=\"Interface Browser\" slot=\"header\"></godmode-header>\n\n        <uui-box>\n          <div class=\"grid\">\n              <div>\n                  <uui-label for=\"search-assembly\">Assembly:</uui-label>\n                  <uui-select\n                      id=\"search-assembly\"\n                      .options=${this.assemblyOptions}\n                      @change=${this.#getInterfaces}\n                      .value=${this.currentAssemblyOption}>\n                  </uui-select>\n              </div>\n              ${this.currentAssemblyOption !== '' ?\n                html`\n                  <div>\n                      <uui-label for=\"search-interface\">Interface:</uui-label>\n                      <uui-select\n                          id=\"search-interface\"\n                          .options=${this.interfaceOptions}\n                          @change=${this.#getTypes}\n                          .value=${this.currentInterfaceOption}>\n                      </uui-select>\n                  </div>\n              ` : html``\n              }\n          </div>\n        </uui-box>\n\n        ${this.currentAssemblyOption === '' ? \n          html`\n            <uui-box>Please select an Assembly (above) and then the Interface you wish to browse. You will then see all types that implement the Interface.</uui-box>\n          `\n          :\n          html`\n            <h5>${this.currentAssembly?.value}</h5>\n\n            ${this.types.length !== 0 ?\n              html`\n                <uui-box>\n                  <uui-table>\n                      <uui-table-head>\n                          <uui-table-head-cell>Implemented By</uui-table-head-cell>\n                          <uui-table-head-cell>Namespace</uui-table-head-cell>\n                          <uui-table-head-cell>Module</uui-table-head-cell>\n                          <uui-table-head-cell>Base Type</uui-table-head-cell>\n                      </uui-table-head>\n\n                      ${repeat(\n                        this.types,\n                        (type) => type.name,\n                        (type) => html`\n                              <uui-table-row>\n                                  <uui-table-cell>${type.name}</uui-table-cell>\n                                  <uui-table-cell>${type.namespace}</uui-table-cell>\n                                  <uui-table-cell><code>${type.module}</code></uui-table-cell>\n                                  <uui-table-cell>${type.baseType}</uui-table-cell>\n                              </uui-table-row>\n                          `\n                      )}\n                  </uui-table>\n                </uui-box>\n              `\n              :\n              html``\n            }\n          `\n        }\n      </umb-body-layout>\n    `\n  }\n\n  static styles = [\n    css`\n        .grid {\n            display: grid;\n            grid-template-columns: repeat(3, 1fr);\n            gap: 20px;\n\n            div {\n                display: flex;\n                flex-direction: column;\n                align-items: flex-start;\n            }\n        }\n\n        uui-box {\n            margin-bottom: 20px;\n        }\n    `\n  ]\n}\n\nexport default GodModeInterfaceBrowserElement;\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'godmode-interface-browser': GodModeInterfaceBrowserElement;\n  }\n}\n"],"names":["_loadAssemblies","loadAssemblies_fn","_getInterfaces","getInterfaces_fn","_getTypes","getTypes_fn","GodModeInterfaceBrowserElement","UmbLitElement","__privateAdd","__privateMethod","html","_a","repeat","type","data","tryExecuteAndNotify","GodModeService","assembly","event","x","int","css","__decorateClass","state","customElement","GodModeInterfaceBrowserElement$1"],"mappings":"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"}